[{"title":"database2","url":"http://mutemeteor.com/2018/01/14/database2/","content":"","categories":[],"tags":[]},{"title":"database","url":"http://mutemeteor.com/2018/01/13/database1/","content":"","categories":[],"tags":[]},{"title":"Win10 安装msi提示错误代码2503、2502","url":"http://mutemeteor.com/2018/01/02/node-js-reinstall/","content":"<p>之前尝试在win 10系统上搭建 ‘Hugo’ 时，不小心把电脑上的所有环境变量 ‘Path’ 都删掉了，重新添加找目录又费劲，所以直接重新下载了node.js和Python，安装时又发现不断出现弹窗，显示“The installer has encountered an unexpected error installing this package.this may indicate a problem with package.the error code is 2502.<br>The installer has encountered an unexpected error installing this package.this may indicate a problem with package.the error code is 2503.”</p>\n<p>应该是权限问题，Google找解决办法，都没解决，后来综合了两个解决方法，成功安装。</p>\n<p>具体步骤：</p>\n<h1 id=\"永久提权\"><a href=\"#永久提权\" class=\"headerlink\" title=\"永久提权\"></a>永久提权</h1><p>1、按WIN+R，在运行框中输入“gpedit.msc” 确认；<br>2、打开本地策略组编辑器后依次展开 ：“计算机配置”-》“管理模板”-》“windows组件”-》“windows installer”，并找到“始终以提升的权限进行安装”；<br>3、双击该选项，设置为“已启用”，并应用；<br>4、最后还要在【用户配置】中进行同样的操作；</p>\n<h1 id=\"临时安装\"><a href=\"#临时安装\" class=\"headerlink\" title=\"临时安装\"></a>临时安装</h1><p>1、鼠标移到桌面左下角-&gt;右键（或者直接： WIN+X键），命令提示符（管理员）；<br>2、输入：msiexec /package +‘msi文件路径’（输入的时候注意半角字符且路径不能为中文名）<br>例如：<br>C:\\Windows\\system32&gt;msiexec /package G:\\tool\\node-v8.9.3-x64.msi<br>C:\\Windows\\system32&gt;msiexec /package G:\\software\\python\\python-3.4.3.msi<br>C:\\Windows\\system32&gt;msiexec /package G:\\software\\python\\python-2.7.10.msi</p>\n<p>大功告成。</p>\n","categories":["Tech"],"tags":["Windows"]},{"title":"Python3 学习笔记（四）","url":"http://mutemeteor.com/2017/11/14/python3-note4/","content":"<ul>\n<li><p><a href=\"http://mutemeteor.com/2017/03/23/Python3-note/\">python3 学习笔记（一）</a></p>\n</li>\n<li><p><a href=\"http://mutemeteor.com/2017/03/23/Python3-note2/\">python3 学习笔记（二）</a></p>\n</li>\n<li><p><a href=\"http://mutemeteor.com/2017/03/23/Python3-note3/\">python3 学习笔记（三）</a></p>\n</li>\n</ul>\n<hr>\n<h1 id=\"面向对象进阶\"><a href=\"#面向对象进阶\" class=\"headerlink\" title=\"面向对象进阶\"></a>面向对象进阶</h1><h2 id=\"元类\"><a href=\"#元类\" class=\"headerlink\" title=\"元类\"></a>元类</h2><ol>\n<li>类也是对象<br>在大多数编程语言中，类就是一组用来描述如何生成一个对象的代码段。在Python中这一点仍然成立：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObjectCreator</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">…       <span class=\"keyword\">pass</span></div><div class=\"line\">…</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_object = ObjectCreator()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> my_object</div><div class=\"line\">&lt;__main__.ObjectCreator object at <span class=\"number\">0x8974f2c</span>&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>但是，Python中的类还远不止如此。类同样也是一种对象。是的，没错，就是对象。只要你使用关键字class，Python解释器在执行的时候就会创建一个对象。<br><a id=\"more\"></a></p>\n<p>下面的代码段：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObjectCreator</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">…       <span class=\"keyword\">pass</span></div><div class=\"line\">…</div></pre></td></tr></table></figure></p>\n<p>将在内存中创建一个对象，名字就是ObjectCreator。这个对象（类对象ObjectCreator）拥有创建对象（实例对象）的能力。但是，它的本质仍然是一个对象，于是乎你可以对它做如下的操作：</p>\n<ul>\n<li>可以将它赋值给一个变量</li>\n<li>可以拷贝它</li>\n<li>可以为它增加属性</li>\n<li>可以将它作为函数参数进行传递</li>\n</ul>\n<h1 id=\"import导入模块\"><a href=\"#import导入模块\" class=\"headerlink\" title=\"import导入模块\"></a>import导入模块</h1><h1 id=\"垃圾回收\"><a href=\"#垃圾回收\" class=\"headerlink\" title=\"垃圾回收\"></a>垃圾回收</h1><h1 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h1>","categories":["Tech"],"tags":["Notes","Python"]},{"title":"Python3 学习笔记（三）","url":"http://mutemeteor.com/2017/11/14/Python3-note3/","content":"<ul>\n<li><p><a href=\"http://mutemeteor.com/2017/03/23/Python3-note/\">python3 学习笔记（一）</a></p>\n</li>\n<li><p><a href=\"http://mutemeteor.com/2017/03/23/Python3-note2/\">python3 学习笔记（二）</a></p>\n</li>\n</ul>\n<hr>\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><p>如果在开发程序时，需要某块代码多次，但是为了提高编写的效率以及代码的重用，所以把具有独立功能的代码块组织为一个小模块，这就是函数。</p>\n<h2 id=\"定义函数\"><a href=\"#定义函数\" class=\"headerlink\" title=\"定义函数\"></a>定义函数</h2><p>定义函数的格式如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> 函数名<span class=\"params\">()</span>:</span></div><div class=\"line\">    代码</div></pre></td></tr></table></figure></p>\n<p>Demo:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 定义一个函数，能够完成打印信息的功能</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printInfo</span><span class=\"params\">()</span>:</span></div><div class=\"line\">       <span class=\"keyword\">print</span> <span class=\"string\">'------------------------------------'</span></div><div class=\"line\">       <span class=\"keyword\">print</span> <span class=\"string\">'         人生苦短，我用Python'</span></div><div class=\"line\">       <span class=\"keyword\">print</span> <span class=\"string\">'------------------------------------'</span></div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h2 id=\"调用函数\"><a href=\"#调用函数\" class=\"headerlink\" title=\"调用函数\"></a>调用函数</h2><p>定义了函数之后，就相当于有了一个具有某些功能的代码，想要让这些代码能够执行，需要调用它</p>\n<p>调用函数很简单的，通过 函数名() 即可完成调用<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 定义完函数后，函数是不会自动执行的，需要调用它才可以</span></div><div class=\"line\">printInfo()</div></pre></td></tr></table></figure></p>\n<h2 id=\"函数的文档说明\"><a href=\"#函数的文档说明\" class=\"headerlink\" title=\"函数的文档说明\"></a>函数的文档说明</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">(a,b)</span>:</span></div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"string\">\"用来完成对2个数求和\"</span></div><div class=\"line\"><span class=\"meta\">... </span>    print(<span class=\"string\">\"%d\"</span>%(a+b))</div><div class=\"line\"><span class=\"meta\">... </span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>test(<span class=\"number\">11</span>,<span class=\"number\">22</span>)</div><div class=\"line\"><span class=\"number\">33</span></div></pre></td></tr></table></figure>\n<p>如果执行，以下代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>help(test)</div></pre></td></tr></table></figure></p>\n<p>能够看到test函数的相关说明<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Help on function test <span class=\"keyword\">in</span> module __main__:</div><div class=\"line\"></div><div class=\"line\">test(a, b)</div><div class=\"line\">    用来完成对<span class=\"number\">2</span>个数求和</div><div class=\"line\">(END)</div></pre></td></tr></table></figure></p>\n<h2 id=\"函数参数-一\"><a href=\"#函数参数-一\" class=\"headerlink\" title=\"函数参数(一)\"></a>函数参数(一)</h2><ul>\n<li>定义时小括号中的参数，用来接收参数用的，称为 “形参”</li>\n<li>调用时小括号中的参数，用来传递给函数用的，称为 “实参”</li>\n</ul>\n<h3 id=\"定义带有参数的函数\"><a href=\"#定义带有参数的函数\" class=\"headerlink\" title=\"定义带有参数的函数\"></a>定义带有参数的函数</h3><p>示例如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add2num</span><span class=\"params\">(a, b)</span>:</span></div><div class=\"line\">    c = a+b</div><div class=\"line\">    <span class=\"keyword\">print</span> c</div></pre></td></tr></table></figure></p>\n<h3 id=\"调用带有参数的函数\"><a href=\"#调用带有参数的函数\" class=\"headerlink\" title=\"调用带有参数的函数\"></a>调用带有参数的函数</h3><p>以调用上面的add2num(a, b)函数为例:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add2num</span><span class=\"params\">(a, b)</span>:</span></div><div class=\"line\">    c = a+b</div><div class=\"line\">    <span class=\"keyword\">print</span> c</div><div class=\"line\"></div><div class=\"line\">add2num(<span class=\"number\">11</span>, <span class=\"number\">22</span>) <span class=\"comment\">#调用带有参数的函数时，需要在小括号中，传递数据</span></div></pre></td></tr></table></figure>\n<h3 id=\"调用函数时参数的顺序\"><a href=\"#调用函数时参数的顺序\" class=\"headerlink\" title=\"调用函数时参数的顺序\"></a>调用函数时参数的顺序</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">(a,b)</span>:</span></div><div class=\"line\"><span class=\"meta\">... </span>    print(a,b)</div><div class=\"line\"><span class=\"meta\">... </span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>test(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>test(b=<span class=\"number\">1</span>,a=<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"number\">2</span> <span class=\"number\">1</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>test(b=<span class=\"number\">1</span>,<span class=\"number\">2</span>)</div><div class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span></div><div class=\"line\">SyntaxError: positional argument follows keyword argument</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span></div><div class=\"line\">&gt;&gt;&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"函数参数-二\"><a href=\"#函数参数-二\" class=\"headerlink\" title=\"函数参数(二)\"></a>函数参数(二)</h2><h3 id=\"缺省参数\"><a href=\"#缺省参数\" class=\"headerlink\" title=\"缺省参数\"></a>缺省参数</h3><p>调用函数时，缺省参数的值如果没有传入，则被认为是默认值。下例会打印默认的age，如果age没有被传入：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printinfo</span><span class=\"params\">( name, age = <span class=\"number\">35</span> )</span>:</span></div><div class=\"line\">   <span class=\"comment\"># 打印任何传入的字符串</span></div><div class=\"line\">   <span class=\"keyword\">print</span> <span class=\"string\">\"Name: \"</span>, name</div><div class=\"line\">   <span class=\"keyword\">print</span> <span class=\"string\">\"Age \"</span>, age</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 调用printinfo函数</span></div><div class=\"line\">printinfo(name=<span class=\"string\">\"miki\"</span> )</div><div class=\"line\">printinfo( age=<span class=\"number\">9</span>,name=<span class=\"string\">\"miki\"</span> )</div></pre></td></tr></table></figure></p>\n<p>以上实例输出结果：</p>\n<pre><code>Name:  miki\nAge  35\nName:  miki\nAge  9\n</code></pre><p>注意：带有默认值的参数一定要位于参数列表的最后面。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printinfo</span><span class=\"params\">(name, age=<span class=\"number\">35</span>, sex)</span>:</span></div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">print</span> name</div><div class=\"line\">...</div><div class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span></div><div class=\"line\">SyntaxError: non-default argument follows default argument</div></pre></td></tr></table></figure></p>\n<h3 id=\"不定长参数\"><a href=\"#不定长参数\" class=\"headerlink\" title=\"不定长参数\"></a>不定长参数</h3><p>有时可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，声明时不会命名。</p>\n<p>基本语法如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">functionname</span><span class=\"params\">([formal_args,] *args, **kwargs)</span>:</span></div><div class=\"line\">   <span class=\"string\">\"函数_文档字符串\"</span></div><div class=\"line\">   function_suite</div><div class=\"line\">   <span class=\"keyword\">return</span> [expression]</div></pre></td></tr></table></figure></p>\n<p>加了星号（*）的变量<code>args</code>会存放所有未命名的变量参数，args为元组；而加**的变量<code>kwargs</code>会存放命名参数，即形如<code>key=value</code>的参数， <code>kwargs</code>为字典。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fun</span><span class=\"params\">(a, b, *args, **kwargs)</span>:</span></div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"string\">\"\"\"可变参数演示示例\"\"\"</span></div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">print</span> <span class=\"string\">\"a =\"</span>, a</div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">print</span> <span class=\"string\">\"b =\"</span>, b</div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">print</span> <span class=\"string\">\"args =\"</span>, args</div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">print</span> <span class=\"string\">\"kwargs: \"</span></div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> kwargs.items():</div><div class=\"line\"><span class=\"meta\">... </span>        <span class=\"keyword\">print</span> key, <span class=\"string\">\"=\"</span>, value</div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fun(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, m=<span class=\"number\">6</span>, n=<span class=\"number\">7</span>, p=<span class=\"number\">8</span>)  <span class=\"comment\"># 注意传递的参数对应</span></div><div class=\"line\">a = <span class=\"number\">1</span></div><div class=\"line\">b = <span class=\"number\">2</span></div><div class=\"line\">args = (<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</div><div class=\"line\">kwargs: </div><div class=\"line\">p = <span class=\"number\">8</span></div><div class=\"line\">m = <span class=\"number\">6</span></div><div class=\"line\">n = <span class=\"number\">7</span></div><div class=\"line\">&gt;&gt;&gt;</div><div class=\"line\">&gt;&gt;&gt;</div><div class=\"line\">&gt;&gt;&gt;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c = (<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;<span class=\"string\">\"m\"</span>:<span class=\"number\">6</span>, <span class=\"string\">\"n\"</span>:<span class=\"number\">7</span>, <span class=\"string\">\"p\"</span>:<span class=\"number\">8</span>&#125;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fun(<span class=\"number\">1</span>, <span class=\"number\">2</span>, *c, **d)    <span class=\"comment\"># 注意元组与字典的传参方式</span></div><div class=\"line\">a = <span class=\"number\">1</span></div><div class=\"line\">b = <span class=\"number\">2</span></div><div class=\"line\">args = (<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</div><div class=\"line\">kwargs: </div><div class=\"line\">p = <span class=\"number\">8</span></div><div class=\"line\">m = <span class=\"number\">6</span></div><div class=\"line\">n = <span class=\"number\">7</span></div><div class=\"line\">&gt;&gt;&gt;</div><div class=\"line\">&gt;&gt;&gt;</div><div class=\"line\">&gt;&gt;&gt;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>fun(<span class=\"number\">1</span>, <span class=\"number\">2</span>, c, d) <span class=\"comment\"># 注意不加星号与上面的区别</span></div><div class=\"line\">a = <span class=\"number\">1</span></div><div class=\"line\">b = <span class=\"number\">2</span></div><div class=\"line\">args = ((<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>), &#123;<span class=\"string\">'p'</span>: <span class=\"number\">8</span>, <span class=\"string\">'m'</span>: <span class=\"number\">6</span>, <span class=\"string\">'n'</span>: <span class=\"number\">7</span>&#125;)</div><div class=\"line\">kwargs:</div><div class=\"line\">&gt;&gt;&gt;</div><div class=\"line\">&gt;&gt;&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"引用传参\"><a href=\"#引用传参\" class=\"headerlink\" title=\"引用传参\"></a>引用传参</h3><p>可变类型与不可变类型的变量分别作为函数参数时，会有什么不同吗？<br>Python有没有类似C语言中的指针传参呢？<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">selfAdd</span><span class=\"params\">(a)</span>:</span></div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"string\">\"\"\"自增\"\"\"</span></div><div class=\"line\"><span class=\"meta\">... </span>    a += a</div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a_int = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a_int</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>selfAdd(a_int)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a_int</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a_list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a_list</div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>selfAdd(a_list)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a_list</div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</div></pre></td></tr></table></figure></p>\n<p><em>Python中函数参数是引用传递（注意不是值传递）。对于不可变类型，因变量不能修改，所以运算不会影响到变量自身；而对于可变类型来说，函数体中的运算有可能会更改传入的参数变量。</em></p>\n<hr>\n<h2 id=\"函数返回值-一\"><a href=\"#函数返回值-一\" class=\"headerlink\" title=\"函数返回值(一)\"></a>函数返回值(一)</h2><ul>\n<li>所谓“返回值”，就是程序中函数完成一件事情后，最后给调用者的结果</li>\n</ul>\n<h3 id=\"带有返回值的函数\"><a href=\"#带有返回值的函数\" class=\"headerlink\" title=\"带有返回值的函数\"></a>带有返回值的函数</h3><p>想要在函数中把结果返回给调用者，需要在函数中使用return</p>\n<p>如下示例:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add2num</span><span class=\"params\">(a, b)</span>:</span></div><div class=\"line\">    c = a+b</div><div class=\"line\">    <span class=\"keyword\">return</span> c</div></pre></td></tr></table></figure></p>\n<p>或者<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add2num</span><span class=\"params\">(a, b)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> a+b</div></pre></td></tr></table></figure></p>\n<h3 id=\"保存函数的返回值\"><a href=\"#保存函数的返回值\" class=\"headerlink\" title=\"保存函数的返回值\"></a>保存函数的返回值</h3><p>如果一个函数返回了一个数据，那么想要用这个数据，那么就需要保存</p>\n<p>保存函数的返回值示例如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#定义函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add2num</span><span class=\"params\">(a, b)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> a+b</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#调用函数，顺便保存函数的返回值</span></div><div class=\"line\">result = add2num(<span class=\"number\">100</span>,<span class=\"number\">98</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#因为result已经保存了add2num的返回值，所以接下来就可以使用了</span></div><div class=\"line\"><span class=\"keyword\">print</span> result</div></pre></td></tr></table></figure></p>\n<p>结果:</p>\n<pre><code>198\n</code></pre><h2 id=\"函数返回值-二\"><a href=\"#函数返回值-二\" class=\"headerlink\" title=\"函数返回值(二)\"></a>函数返回值(二)</h2><p>在python中我们可不可以返回多个值？<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">divid</span><span class=\"params\">(a, b)</span>:</span></div><div class=\"line\"><span class=\"meta\">... </span>    shang = a//b</div><div class=\"line\"><span class=\"meta\">... </span>    yushu = a%b </div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">return</span> shang, yushu</div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sh, yu = divid(<span class=\"number\">5</span>, <span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sh</div><div class=\"line\"><span class=\"number\">5</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>yu</div><div class=\"line\"><span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n<p>本质是利用了元组</p>\n<hr>\n<h1 id=\"4种函数的类型\"><a href=\"#4种函数的类型\" class=\"headerlink\" title=\"4种函数的类型\"></a>4种函数的类型</h1><p>函数根据有没有参数，有没有返回值，可以相互组合，一共有4种,定义函数时，是根据实际的功能需求来设计的，所以不同开发人员编写的函数类型各不相同：</p>\n<ul>\n<li>无参数，无返回值</li>\n<li>无参数，又反悔</li>\n<li>有参数，无返回值</li>\n<li>有参数，有返回值</li>\n</ul>\n<h2 id=\"无参数，无返回值的函数\"><a href=\"#无参数，无返回值的函数\" class=\"headerlink\" title=\"无参数，无返回值的函数\"></a>无参数，无返回值的函数</h2><p>此类函数，不能接收参数，也没有返回值，一般情况下，打印提示灯类似的功能，使用这类的函数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printMenu</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'--------------------------'</span>)</div><div class=\"line\">    print(<span class=\"string\">'      xx涮涮锅 点菜系统'</span>)</div><div class=\"line\">    print(<span class=\"string\">''</span>)</div><div class=\"line\">    print(<span class=\"string\">'  1.  羊肉涮涮锅'</span>)</div><div class=\"line\">    print(<span class=\"string\">'  2.  牛肉涮涮锅'</span>)</div><div class=\"line\">    print(<span class=\"string\">'  3.  猪肉涮涮锅'</span>)</div><div class=\"line\">    print(<span class=\"string\">'--------------------------'</span>)</div></pre></td></tr></table></figure></p>\n<h2 id=\"无参数，有返回值的函数\"><a href=\"#无参数，有返回值的函数\" class=\"headerlink\" title=\"无参数，有返回值的函数\"></a>无参数，有返回值的函数</h2><p>此类函数，不能接收参数，但是可以返回某个数据，一般情况下，像采集数据，用此类函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"comment\"># 获取温度</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getTemperature</span><span class=\"params\">()</span>:</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">#这里是获取温度的一些处理过程</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">#为了简单起见，先模拟返回一个数据</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">24</span></div><div class=\"line\"></div><div class=\"line\">    temperature = getTemperature()</div><div class=\"line\">    print(<span class=\"string\">'当前的温度为:%d'</span>%temperature)</div><div class=\"line\">结果:</div><div class=\"line\"></div><div class=\"line\">    当前的温度为: <span class=\"number\">24</span></div></pre></td></tr></table></figure>\n<h2 id=\"有参数，无返回值的函数\"><a href=\"#有参数，无返回值的函数\" class=\"headerlink\" title=\"有参数，无返回值的函数\"></a>有参数，无返回值的函数</h2><p>此类函数，能接收参数，但不可以返回数据，一般情况下，对某些变量设置数据而不需结果时，用此类函数</p>\n<h2 id=\"有参数，有返回值的函数\"><a href=\"#有参数，有返回值的函数\" class=\"headerlink\" title=\"有参数，有返回值的函数\"></a>有参数，有返回值的函数</h2><p>此类函数，不仅能接收参数，还可以返回某个数据，一般情况下，像数据处理并需要结果的应用，用此类函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 计算1~num的累积和</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calculateNum</span><span class=\"params\">(num)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    result = <span class=\"number\">0</span></div><div class=\"line\">    i = <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">while</span> i&lt;=num:</div><div class=\"line\"></div><div class=\"line\">        result = result + i</div><div class=\"line\"></div><div class=\"line\">        i+=<span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> result</div><div class=\"line\"></div><div class=\"line\">result = calculateNum(<span class=\"number\">100</span>)</div><div class=\"line\">print(<span class=\"string\">'1~100的累积和为:%d'</span>%result)</div></pre></td></tr></table></figure>\n<p>结果:</p>\n<pre><code>1~100的累积和为: 5050\n</code></pre><h2 id=\"函数的嵌套调用\"><a href=\"#函数的嵌套调用\" class=\"headerlink\" title=\"函数的嵌套调用\"></a>函数的嵌套调用</h2><ul>\n<li>一个函数里面又调用了另外一个函数，这就是所谓的函数嵌套调用 </li>\n<li>如果函数A中，调用了另外一个函数B，那么先把函数B中的任务都执行完毕之后才会回到上次 函数A执行的位置</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testB</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'---- testB start----'</span>)</div><div class=\"line\">    print(<span class=\"string\">'这里是testB函数执行的代码...(省略)...'</span>)</div><div class=\"line\">    print(<span class=\"string\">'---- testB end----'</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">testA</span><span class=\"params\">()</span>:</span></div><div class=\"line\"></div><div class=\"line\">    print(<span class=\"string\">'---- testA start----'</span>)</div><div class=\"line\"></div><div class=\"line\">    testB()</div><div class=\"line\"></div><div class=\"line\">    print(<span class=\"string\">'---- testA end----'</span>)</div><div class=\"line\"></div><div class=\"line\">testA()</div></pre></td></tr></table></figure>\n<p>结果：</p>\n<pre><code>---- testA start----\n---- testB start----\n这里是testB函数执行的代码...(省略)...\n---- testB end----\n---- testA end----\n</code></pre><h2 id=\"函数应用\"><a href=\"#函数应用\" class=\"headerlink\" title=\"函数应用\"></a>函数应用</h2><h3 id=\"打印图形\"><a href=\"#打印图形\" class=\"headerlink\" title=\"打印图形\"></a>打印图形</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 打印一条横线</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printOneLine</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    print(<span class=\"string\">\"-\"</span>*<span class=\"number\">30</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 打印多条横线</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printNumLine</span><span class=\"params\">(num)</span>:</span></div><div class=\"line\">    i=<span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 因为printOneLine函数已经完成了打印横线的功能，</span></div><div class=\"line\">    <span class=\"comment\"># 只需要多次调用此函数即可</span></div><div class=\"line\">    <span class=\"keyword\">while</span> i&lt;num:</div><div class=\"line\">        printOneLine()</div><div class=\"line\">        i+=<span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\">printNumLine(<span class=\"number\">3</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"数学计算\"><a href=\"#数学计算\" class=\"headerlink\" title=\"数学计算\"></a>数学计算</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 求3个数的和</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum3Number</span><span class=\"params\">(a,b,c)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> a+b+c <span class=\"comment\"># return 的后面可以是数值，也可是一个表达式</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 完成对3个数求平均值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">average3Number</span><span class=\"params\">(a,b,c)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 因为sum3Number函数已经完成了3个数的就和，所以只需调用即可</span></div><div class=\"line\">    <span class=\"comment\"># 即把接收到的3个数，当做实参传递即可</span></div><div class=\"line\">    sumResult = sum3Number(a,b,c)</div><div class=\"line\">    aveResult = sumResult/<span class=\"number\">3.0</span></div><div class=\"line\">    <span class=\"keyword\">return</span> aveResult</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 调用函数，完成对3个数求平均值</span></div><div class=\"line\">result = average3Number(<span class=\"number\">11</span>,<span class=\"number\">2</span>,<span class=\"number\">55</span>)</div><div class=\"line\">print(<span class=\"string\">\"average is %d\"</span>%result)</div></pre></td></tr></table></figure>\n<h2 id=\"局部变量\"><a href=\"#局部变量\" class=\"headerlink\" title=\"局部变量\"></a>局部变量</h2><ul>\n<li>局部变量，就是在函数内部定义的变量</li>\n<li>不同的函数，可以定义相同的名字的局部变量，但是各用个的不会产生影响</li>\n<li>局部变量的作用，为了临时保存数据需要在函数中定义变量来进行存储，这就是它的作用</li>\n</ul>\n<h2 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h2><ul>\n<li>在函数外定义的变量叫做<code>全局变量</code></li>\n<li>全局变量能够在所有的函数中进行访问</li>\n<li>如果在函数中修改全局变量，那么就需要使用<code>global</code>进行声明，否则出错</li>\n<li>如果全局变量的名字和局部变量的名字相同，那么使用的是局部变量的，小技巧:强龙不压地头蛇</li>\n</ul>\n<h2 id=\"可变类型的全局变量\"><a href=\"#可变类型的全局变量\" class=\"headerlink\" title=\"可变类型的全局变量\"></a>可变类型的全局变量</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">()</span>:</span></div><div class=\"line\"><span class=\"meta\">... </span>    a += <span class=\"number\">1</span></div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">print</span> a</div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f()</div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">2</span>, <span class=\"keyword\">in</span> f</div><div class=\"line\">UnboundLocalError: local variable <span class=\"string\">'a'</span> referenced before assignment</div><div class=\"line\">&gt;&gt;&gt;</div><div class=\"line\">&gt;&gt;&gt;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>li = [<span class=\"number\">1</span>,]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f2</span><span class=\"params\">()</span>:</span></div><div class=\"line\"><span class=\"meta\">... </span>    li.append(<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">print</span> li</div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f2()</div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">1</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>li</div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">1</span>]</div></pre></td></tr></table></figure>\n<p>小总结：</p>\n<ul>\n<li>在函数中不使用<code>global</code>声明全局变量时不能修改全局变量的本质是不能修改全局变量的指向，即不能将全局变量指向新的数据。</li>\n<li>对于不可变类型的全局变量来说，因其指向的数据不能修改，所以不使用<code>global</code>时无法修改全局变量。</li>\n<li>对于可变类型的全局变量来说，因其指向的数据可以修改，所以不使用<code>global</code>时也可修改全局变量。</li>\n</ul>\n<hr>\n<h1 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h1><ul>\n<li><p>面向过程：根据业务逻辑从上到下写代码。面向过程编程最易被初学者接受，其往往用一长段代码来实现指定功能，开发过程的思路是将数据与函数按照执行的逻辑顺序组织在一起，数据与函数分开考虑。</p>\n</li>\n<li><p>面向对象：将数据与函数绑定到一起，进行封装，这样能够更快速的开发程序，减少了重复代码的重写过程。</p>\n</li>\n</ul>\n<h2 id=\"类和对象\"><a href=\"#类和对象\" class=\"headerlink\" title=\"类和对象\"></a>类和对象</h2><p>面向对象编程的2个非常重要的概念：类和对象</p>\n<p>对象是面向对象编程的核心，在使用对象的过程中，为了将具有共同特征和行为的一组对象抽象定义，提出了另外一个新的概念——类</p>\n<h3 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h3><pre><code>人以类聚 物以群分。\n具有相似内部状态和运动规律的实体的集合(或统称为抽象)。 \n具有相同属性和行为事物的统称\n</code></pre><h4 id=\"类的构成\"><a href=\"#类的构成\" class=\"headerlink\" title=\"类的构成\"></a>类的构成</h4><p>类(Class) 由3个部分构成</p>\n<ul>\n<li>类的名称:类名</li>\n<li>类的属性:一组数据</li>\n<li>类的方法:允许对进行操作的方法 (行为)</li>\n</ul>\n<p><1> 举例：<br>1）人类设计,只关心3样东西:</1></p>\n<p>事物名称(类名):人(Person)<br>属性:身高(height)、年龄(age)<br>方法(行为/功能):跑(run)、打架(fight)</p>\n<p>2）狗类的设计<br>类名:狗(Dog)<br>属性:品种 、毛色、性别、名字、 腿儿的数量<br>方法(行为/功能):叫 、跑、咬人、吃、摇尾巴</p>\n<h4 id=\"类的抽象\"><a href=\"#类的抽象\" class=\"headerlink\" title=\"类的抽象\"></a>类的抽象</h4><p>如何把日常生活中的事物抽象成程序中的类?</p>\n<p>拥有相同(或者类似)属性和行为的对象都可以抽像出一个类</p>\n<p>方法:一般名词都是类(名词提炼法)</p>\n<p><1> 坦克发射3颗炮弹轰掉了2架飞机<br>坦克–》可以抽象成 类<br>炮弹–》可以抽象成类<br>飞机-》可以抽象成类</1></p>\n<p><2> 小明在公车上牵着一条叼着热狗的狗<br>小明–》 人类<br>公车–》 交通工具类<br>热狗–》 食物类<br>狗–》 狗类</2></p>\n<h4 id=\"定义类\"><a href=\"#定义类\" class=\"headerlink\" title=\"定义类\"></a>定义类</h4><p>定义一个类，格式如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> 类名:</span></div><div class=\"line\">    方法列表</div></pre></td></tr></table></figure></p>\n<p>demo：定义一个Car类<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 定义类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getCarInfo</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">'车轮子个数:%d, 颜色%s'</span>%(self.wheelNum, self.color))</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">move</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">\"车正在移动...\"</span>)</div></pre></td></tr></table></figure></p>\n<h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><pre><code>某一个具体事物的存在,在现实世界中可以是看得见摸得着的。可以是直接使用的。\n</code></pre><h4 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h4><p>python中，可以根据已经定义的类去创建出一个个对象</p>\n<p>创建对象的格式为:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">对象名 = 类名()</div></pre></td></tr></table></figure></p>\n<p>创建对象demo:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 定义类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 移动</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">move</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">'车在奔跑...'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 鸣笛</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">toot</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">\"车在鸣笛...嘟嘟..\"</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 创建一个对象，并用变量BMW来保存它的引用</span></div><div class=\"line\">BMW = Car()</div><div class=\"line\">BMW.color = <span class=\"string\">'黑色'</span></div><div class=\"line\">BMW.wheelNum = <span class=\"number\">4</span> <span class=\"comment\">#轮子数量</span></div><div class=\"line\">BMW.move()</div><div class=\"line\">BMW.toot()</div><div class=\"line\">print(BMW.color)</div><div class=\"line\">print(BMW.wheelNum)</div></pre></td></tr></table></figure></p>\n<p>总结：</p>\n<ul>\n<li>BMW = Car()，这样就产生了一个Car的实例对象，此时也可以通过实例对象BMW来访问属性或者方法</li>\n<li>第一次使用BMW.color = ‘黑色’表示给BMW这个对象添加属性，如果后面再次出现BMW.color = xxx表示对属性进行修改</li>\n<li>BMW是一个对象，它拥有属性（数据）和方法（函数）</li>\n<li>当创建一个对象时，就是用一个模子，来制造一个实物</li>\n</ul>\n<h2 id=\"init-方法\"><a href=\"#init-方法\" class=\"headerlink\" title=\"init()方法\"></a><strong>init</strong>()方法</h2><p>在上一小节的demo中，我们已经给BMW这个对象添加了2个属性，wheelNum（车的轮胎数量）以及color（车的颜色），试想如果再次创建一个对象的话，肯定也需要进行添加属性，显然这样做很费事，那么有没有办法能够在创建对象的时候，就顺便把车这个对象的属性给设置呢？</p>\n<p>答:</p>\n<pre><code>__init__()方法\n</code></pre><h3 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> 类名:</span></div><div class=\"line\">    <span class=\"comment\">#初始化函数，用来完成一些默认的设定</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">()</span>:</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div></pre></td></tr></table></figure>\n<p>###<strong>init</strong>()方法的调用<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 定义汽车类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.wheelNum = <span class=\"number\">4</span></div><div class=\"line\">        self.color = <span class=\"string\">'蓝色'</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">move</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">'车在跑，目标:夏威夷'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 创建对象</span></div><div class=\"line\">BMW = Car()</div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">'车的颜色为:%s'</span>%BMW.color)</div><div class=\"line\">print(<span class=\"string\">'车轮胎数量为:%d'</span>%BMW.wheelNum)</div></pre></td></tr></table></figure></p>\n<p>总结: 当创建Car对象后，在没有调用<strong>init</strong>()方法的前提下，BMW就默认拥有了2个属性wheelNum和color，原因是<strong>init</strong>()方法是在创建对象后，就立刻被默认调用了</p>\n<h3 id=\"调用时传参\"><a href=\"#调用时传参\" class=\"headerlink\" title=\"调用时传参\"></a>调用时传参</h3><p>既然在创建完对象后<strong>init</strong>()方法已经被默认的执行了，那么能否让对象在调用<strong>init</strong>()方法的时候传递一些参数呢？如果可以，那怎样传递呢？</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 定义汽车类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, newWheelNum, newColor)</span>:</span></div><div class=\"line\">        self.wheelNum = newWheelNum</div><div class=\"line\">        self.color = newColor</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">move</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">'车在跑，目标:夏威夷'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 创建对象</span></div><div class=\"line\">BMW = Car(<span class=\"number\">4</span>, <span class=\"string\">'green'</span>)</div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">'车的颜色为:%s'</span>%BMW.color)</div><div class=\"line\">print(<span class=\"string\">'车轮子数量为:%d'</span>%BMW.wheelNum)</div></pre></td></tr></table></figure>","categories":["Tech"],"tags":["Notes","Python"]},{"title":"python3 学习笔记（二）","url":"http://mutemeteor.com/2017/11/08/Python3-note2/","content":"<ul>\n<li><a href=\"http://mutemeteor.com/2017/03/23/Python3-note/\">python3 学习笔记（一）</a></li>\n</ul>\n<hr>\n<h1 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h1><p>双引号或者单引号中的数据，就是字符串。</p>\n<h2 id=\"字符串输出\"><a href=\"#字符串输出\" class=\"headerlink\" title=\"字符串输出\"></a>字符串输出</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">name = <span class=\"string\">'KyreneWang'</span></div><div class=\"line\">position = <span class=\"string\">'Beijing'</span></div><div class=\"line\">print(<span class=\"string\">'--------------------------------------------------'</span>)</div><div class=\"line\">print(<span class=\"string\">\"Name：%s\"</span>%name)</div><div class=\"line\">print(<span class=\"string\">\"position：%s\"</span>%position)</div><div class=\"line\">print(<span class=\"string\">'--------------------------------------------------'</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"字符串输入\"><a href=\"#字符串输入\" class=\"headerlink\" title=\"字符串输入\"></a>字符串输入</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding:utf8</span></div><div class=\"line\">userName = input(<span class=\"string\">'请输入用户名:'</span>)</div><div class=\"line\">print(<span class=\"string\">\"用户名为：%s\"</span>%userName)</div><div class=\"line\">password = input(<span class=\"string\">'请输入密码:'</span>)</div><div class=\"line\">print(<span class=\"string\">\"密码为：%s\"</span>%password)</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"下标\"><a href=\"#下标\" class=\"headerlink\" title=\"下标\"></a>下标</h2><p>如果想取出部分字符，那么可以通过 <strong>下标</strong> 的方法（python中下标从 0 开始）。</p>\n<h2 id=\"切片\"><a href=\"#切片\" class=\"headerlink\" title=\"切片\"></a>切片</h2><p>切片是指对操作的对象截取其中一部分的操作。字符串、列表、元组都支持切片操作。</p>\n<p>切片的语法：<code>[起始:结束:步长]</code></p>\n<p>选取的区间属于 <strong>左闭右开型</strong>，即从”起始”位开始，到”结束”位的前一位结束（不包含结束位本身)。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">name = <span class=\"string\">'abcdef'</span></div><div class=\"line\">print(name[<span class=\"number\">0</span>:<span class=\"number\">3</span>]) <span class=\"comment\"># 取 下标0~2 的字符，即abc</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">namesList = [<span class=\"string\">'xiaoWang'</span>,<span class=\"string\">'xiaoZhang'</span>,<span class=\"string\">'xiaoHua'</span>]</div></pre></td></tr></table></figure>\n<p>比C语言的数组强大的地方在于列表中的元素可以是不同类型的<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">testList = [<span class=\"number\">1</span>, <span class=\"string\">'a'</span>]</div></pre></td></tr></table></figure></p>\n<h2 id=\"列表的循环遍历\"><a href=\"#列表的循环遍历\" class=\"headerlink\" title=\"列表的循环遍历\"></a>列表的循环遍历</h2><h3 id=\"用-for-遍历\"><a href=\"#用-for-遍历\" class=\"headerlink\" title=\"用 for 遍历\"></a>用 for 遍历</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">namesList = [<span class=\"string\">'xiaoWang'</span>,<span class=\"string\">'xiaoZhang'</span>,<span class=\"string\">'xiaoHua'</span>]</div><div class=\"line\"><span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> namesList:</div><div class=\"line\">    print(name)</div></pre></td></tr></table></figure>\n<h3 id=\"用-whlie-遍历\"><a href=\"#用-whlie-遍历\" class=\"headerlink\" title=\"用 whlie 遍历\"></a>用 whlie 遍历</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">namesList = [<span class=\"string\">'xiaoWang'</span>,<span class=\"string\">'xiaoZhang'</span>,<span class=\"string\">'xiaoHua'</span>]</div><div class=\"line\">length = len(namesList)</div><div class=\"line\">i = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">while</span> i&lt;length:</div><div class=\"line\">    print(namesList[i])</div><div class=\"line\">    i+=<span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<h2 id=\"列表的常见操作\"><a href=\"#列表的常见操作\" class=\"headerlink\" title=\"列表的常见操作\"></a>列表的常见操作</h2><p>列表中存放的数据是可以进行修改的，比如”增”、”删”、”改””</p>\n<h3 id=\"添加元素\"><a href=\"#添加元素\" class=\"headerlink\" title=\"添加元素\"></a>添加元素</h3><h4 id=\"append\"><a href=\"#append\" class=\"headerlink\" title=\"append\"></a>append</h4><ul>\n<li>通过append可以向列表添加元素</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#定义变量A，默认有3个元素</span></div><div class=\"line\">A = [<span class=\"string\">'xiaoWang'</span>,<span class=\"string\">'xiaoZhang'</span>,<span class=\"string\">'xiaoHua'</span>]</div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">\"-----添加之前，列表A的数据-----\"</span>)</div><div class=\"line\"><span class=\"keyword\">for</span> tempName <span class=\"keyword\">in</span> A:</div><div class=\"line\">    print(tempName)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#提示、并添加元素</span></div><div class=\"line\">temp = input(<span class=\"string\">'请输入要添加的学生姓名:'</span>)</div><div class=\"line\">A.append(temp)</div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">\"-----添加之后，列表A的数据-----\"</span>)</div><div class=\"line\"><span class=\"keyword\">for</span> tempName <span class=\"keyword\">in</span> A:</div><div class=\"line\">    print(tempName)</div></pre></td></tr></table></figure>\n<h4 id=\"extend\"><a href=\"#extend\" class=\"headerlink\" title=\"extend\"></a>extend</h4><ul>\n<li>通过extend可以将另一个集合中的元素逐一添加到列表中</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = [<span class=\"number\">3</span>, <span class=\"number\">4</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.append(b)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>]]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.extend(b)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>], <span class=\"number\">3</span>, <span class=\"number\">4</span>]</div></pre></td></tr></table></figure>\n<h4 id=\"insert\"><a href=\"#insert\" class=\"headerlink\" title=\"insert\"></a>insert</h4><ul>\n<li>insert(index, object) ：在指定位置index前插入元素object</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.insert(<span class=\"number\">1</span>, <span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</div><div class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</div></pre></td></tr></table></figure>\n<h3 id=\"修改元素\"><a href=\"#修改元素\" class=\"headerlink\" title=\"修改元素\"></a>修改元素</h3><ul>\n<li>修改元素的时候，要通过下标来确定要修改的是哪个元素，然后才能进行修改</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#定义变量A，默认有3个元素</span></div><div class=\"line\">A = [<span class=\"string\">'xiaoWang'</span>,<span class=\"string\">'xiaoZhang'</span>,<span class=\"string\">'xiaoHua'</span>]</div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">\"-----修改之前，列表A的数据-----\"</span>)</div><div class=\"line\"><span class=\"keyword\">for</span> tempName <span class=\"keyword\">in</span> A:</div><div class=\"line\">    print(tempName)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#修改元素</span></div><div class=\"line\">A[<span class=\"number\">1</span>] = <span class=\"string\">'xiaoLu'</span></div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">\"-----修改之后，列表A的数据-----\"</span>)</div><div class=\"line\"><span class=\"keyword\">for</span> tempName <span class=\"keyword\">in</span> A:</div><div class=\"line\">    print(tempName)</div></pre></td></tr></table></figure>\n<p>结果:</p>\n<pre><code>-----修改之前，列表A的数据-----\nxiaoWang\nxiaoZhang\nxiaoHua\n-----修改之后，列表A的数据-----\nxiaoWang\nxiaoLu\nxiaoHua\n</code></pre><h3 id=\"查找元素\"><a href=\"#查找元素\" class=\"headerlink\" title=\"查找元素\"></a>查找元素</h3><ul>\n<li>所谓的查找，就是看看指定的元素是否存在</li>\n</ul>\n<h4 id=\"in-not-in\"><a href=\"#in-not-in\" class=\"headerlink\" title=\"in, not in\"></a>in, not in</h4><p>python中查找的常用方法为：</p>\n<ul>\n<li>in（存在）,如果存在那么结果为true，否则为false</li>\n<li>not in（不存在），如果不存在那么结果为true，否则false</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#待查找的列表</span></div><div class=\"line\">nameList = [<span class=\"string\">'xiaoWang'</span>,<span class=\"string\">'xiaoZhang'</span>,<span class=\"string\">'xiaoHua'</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#获取用户要查找的名字</span></div><div class=\"line\">findName = input(<span class=\"string\">'请输入要查找的姓名:'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#查找是否存在</span></div><div class=\"line\"><span class=\"keyword\">if</span> findName <span class=\"keyword\">in</span> nameList:</div><div class=\"line\">    print(<span class=\"string\">'在字典中找到了相同的名字'</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    print(<span class=\"string\">'没有找到'</span>)</div></pre></td></tr></table></figure>\n<p>in的方法只要会用了，那么not in也是同样的用法，只不过not in判断的是不存在</p>\n<h4 id=\"index-count\"><a href=\"#index-count\" class=\"headerlink\" title=\"index, count\"></a>index, count</h4><p>(index和count与字符串中的用法相同)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.index(<span class=\"string\">'a'</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>) <span class=\"comment\"># 注意是左闭右开区间</span></div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">ValueError: <span class=\"string\">'a'</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> list</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.index(<span class=\"string\">'a'</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>)</div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.count(<span class=\"string\">'b'</span>)</div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.count(<span class=\"string\">'d'</span>)</div><div class=\"line\"><span class=\"number\">0</span></div></pre></td></tr></table></figure>\n<h3 id=\"删除元素\"><a href=\"#删除元素\" class=\"headerlink\" title=\"删除元素\"></a>删除元素</h3><p>类比现实生活中，如果某位同学调班了，那么就应该把这个条走后的学生的姓名删除掉；在开发中经常会用到删除这种功能。</p>\n<p>列表元素的常用删除方法有：</p>\n<ul>\n<li>del：根据下标进行删除</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">movieName = [<span class=\"string\">'加勒比海盗'</span>,<span class=\"string\">'骇客帝国'</span>,<span class=\"string\">'第一滴血'</span>,<span class=\"string\">'指环王'</span>,<span class=\"string\">'霍比特人'</span>,<span class=\"string\">'速度与激情'</span>]</div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">'------删除之前------'</span>)</div><div class=\"line\"><span class=\"keyword\">for</span> tempName <span class=\"keyword\">in</span> movieName:</div><div class=\"line\">    print(tempName)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">del</span> movieName[<span class=\"number\">2</span>]</div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">'------删除之后------'</span>)</div><div class=\"line\"><span class=\"keyword\">for</span> tempName <span class=\"keyword\">in</span> movieName:</div><div class=\"line\">    print(tempName)</div></pre></td></tr></table></figure>\n<ul>\n<li>pop：删除最后一个元素</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">movieName = [<span class=\"string\">'加勒比海盗'</span>,<span class=\"string\">'骇客帝国'</span>,<span class=\"string\">'第一滴血'</span>,<span class=\"string\">'指环王'</span>,<span class=\"string\">'霍比特人'</span>,<span class=\"string\">'速度与激情'</span>]</div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">'------删除之前------'</span>)</div><div class=\"line\"><span class=\"keyword\">for</span> tempName <span class=\"keyword\">in</span> movieName:</div><div class=\"line\">    print(tempName)</div><div class=\"line\"></div><div class=\"line\">movieName.pop()</div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">'------删除之后------'</span>)</div><div class=\"line\"><span class=\"keyword\">for</span> tempName <span class=\"keyword\">in</span> movieName:</div><div class=\"line\">    print(tempName)</div></pre></td></tr></table></figure>\n<ul>\n<li>remove：根据元素的值进行删除</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">movieName = [<span class=\"string\">'加勒比海盗'</span>,<span class=\"string\">'骇客帝国'</span>,<span class=\"string\">'第一滴血'</span>,<span class=\"string\">'指环王'</span>,<span class=\"string\">'霍比特人'</span>,<span class=\"string\">'速度与激情'</span>]</div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">'------删除之前------'</span>)</div><div class=\"line\"><span class=\"keyword\">for</span> tempName <span class=\"keyword\">in</span> movieName:</div><div class=\"line\">    print(tempName)</div><div class=\"line\"></div><div class=\"line\">movieName.remove(<span class=\"string\">'指环王'</span>)</div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">'------删除之后------'</span>)</div><div class=\"line\"><span class=\"keyword\">for</span> tempName <span class=\"keyword\">in</span> movieName:</div><div class=\"line\">    print(tempName)</div></pre></td></tr></table></figure>\n<h3 id=\"排序-sort-reverse\"><a href=\"#排序-sort-reverse\" class=\"headerlink\" title=\"排序(sort, reverse)\"></a>排序(sort, reverse)</h3><p>sort方法是将list按特定顺序重新排列，默认为由小到大，参数reverse=True可改为倒序，由大到小。</p>\n<p>reverse方法是将list逆置。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.reverse()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</div><div class=\"line\">[<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.sort()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.sort(reverse=<span class=\"keyword\">True</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</div><div class=\"line\">[<span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]</div></pre></td></tr></table></figure>\n<h2 id=\"列表的嵌套\"><a href=\"#列表的嵌套\" class=\"headerlink\" title=\"列表的嵌套\"></a>列表的嵌套</h2><p>类似while循环的嵌套，列表也是支持嵌套的</p>\n<p>一个列表中的元素又是一个列表，那么这就是列表的嵌套<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">schoolNames = [[<span class=\"string\">'北京大学'</span>,<span class=\"string\">'清华大学'</span>],</div><div class=\"line\">                [<span class=\"string\">'南开大学'</span>,<span class=\"string\">'天津大学'</span>,<span class=\"string\">'天津师范大学'</span>],</div><div class=\"line\">                [<span class=\"string\">'山东大学'</span>,<span class=\"string\">'中国海洋大学'</span>]]</div></pre></td></tr></table></figure></p>\n<p>应用Demo：一个学校，有3个办公室，现在有8位老师等待工位的分配，编写程序，完成随机的分配<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#encoding=utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> random</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 定义一个列表用来保存3个办公室</span></div><div class=\"line\">offices = [[],[],[]]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 定义一个列表用来存储8位老师的名字</span></div><div class=\"line\">names = [<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>,<span class=\"string\">'D'</span>,<span class=\"string\">'E'</span>,<span class=\"string\">'F'</span>,<span class=\"string\">'G'</span>,<span class=\"string\">'H'</span>]</div><div class=\"line\"></div><div class=\"line\">i = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> names:</div><div class=\"line\">    index = random.randint(<span class=\"number\">0</span>,<span class=\"number\">2</span>)    </div><div class=\"line\">    offices[index].append(name)</div><div class=\"line\"></div><div class=\"line\">i = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">for</span> tempNames <span class=\"keyword\">in</span> offices:</div><div class=\"line\">    print(<span class=\"string\">'办公室%d的人数为:%d'</span>%(i,len(tempNames)))</div><div class=\"line\">    i+=<span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> tempNames:</div><div class=\"line\">        print(<span class=\"string\">\"%s\"</span>%name,end=<span class=\"string\">''</span>)</div><div class=\"line\">    print(<span class=\"string\">\"\\n\"</span>)</div><div class=\"line\">    print(<span class=\"string\">\"-\"</span>*<span class=\"number\">20</span>)</div></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h1><p>Python的元组与列表类似，不同之处在于元组的元素不能修改或删除其中元素。元组使用小括号，列表使用方括号。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>aTuple = (<span class=\"string\">'et'</span>,<span class=\"number\">77</span>,<span class=\"number\">99.9</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>aTuple</div><div class=\"line\">(<span class=\"string\">'et'</span>,<span class=\"number\">77</span>,<span class=\"number\">99.9</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"访问元祖\"><a href=\"#访问元祖\" class=\"headerlink\" title=\"访问元祖\"></a>访问元祖</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple = (<span class=\"string\">'hello'</span>,<span class=\"number\">100</span>,<span class=\"number\">3.14</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple[<span class=\"number\">0</span>]</div><div class=\"line\"><span class=\"string\">'hello'</span></div></pre></td></tr></table></figure>\n<h2 id=\"元组的内置函数count-index\"><a href=\"#元组的内置函数count-index\" class=\"headerlink\" title=\"元组的内置函数count, index\"></a>元组的内置函数count, index</h2><p>index和count与字符串和列表中的用法相同<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = (<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.index(<span class=\"string\">'a'</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>) <span class=\"comment\"># 注意是左闭右开区间</span></div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">ValueError: tuple.index(x): x <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> tuple</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.index(<span class=\"string\">'a'</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>)</div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.count(<span class=\"string\">'b'</span>)</div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.count(<span class=\"string\">'d'</span>)</div><div class=\"line\"><span class=\"number\">0</span></div></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"字典\"><a href=\"#字典\" class=\"headerlink\" title=\"字典\"></a>字典</h1><p>字典既能存储多个数据，还能在访问元素的很方便就能够定位到需要的那个元素。</p>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>变量info为字典类型：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">info = &#123;<span class=\"string\">'name'</span>:<span class=\"string\">'班长'</span>, <span class=\"string\">'id'</span>:<span class=\"number\">100</span>, <span class=\"string\">'sex'</span>:<span class=\"string\">'f'</span>, <span class=\"string\">'address'</span>:<span class=\"string\">'地球亚洲中国北京'</span>&#125;</div></pre></td></tr></table></figure></p>\n<p>说明：</p>\n<ul>\n<li>字典和列表一样，也能够存储多个数据</li>\n<li>列表中找某个元素时，是根据下标进行的</li>\n<li>字典中找某个元素时，是根据’名字’（就是冒号:前面的那个值，例如上面代码中的’name’、’id’、’sex’）</li>\n<li>字典的每个元素由2部分组成，键:值。例如 ‘name’:’班长’ ,’name’为键，’班长’为值</li>\n</ul>\n<h2 id=\"根据键访问值\"><a href=\"#根据键访问值\" class=\"headerlink\" title=\"根据键访问值\"></a>根据键访问值</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">info = &#123;<span class=\"string\">'name'</span>:<span class=\"string\">'班长'</span>, <span class=\"string\">'id'</span>:<span class=\"number\">100</span>, <span class=\"string\">'sex'</span>:<span class=\"string\">'f'</span>, <span class=\"string\">'address'</span>:<span class=\"string\">'地球亚洲中国北京'</span>&#125;</div><div class=\"line\"></div><div class=\"line\">print(info[<span class=\"string\">'name'</span>])</div><div class=\"line\">print(info[<span class=\"string\">'address'</span>])</div></pre></td></tr></table></figure>\n<p>在不确定字典中是否存在某个键而又想获取其值时，可以使用get方法，还可以设置默认值：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>age = info.get(<span class=\"string\">'age'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>age <span class=\"comment\">#'age'键不存在，所以age为None</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(age)</div><div class=\"line\">&lt;type <span class=\"string\">'NoneType'</span>&gt;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>age = info.get(<span class=\"string\">'age'</span>, <span class=\"number\">18</span>) <span class=\"comment\"># 若info中不存在'age'这个键，就返回默认值18</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>age</div><div class=\"line\"><span class=\"number\">18</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"字典的常见操作\"><a href=\"#字典的常见操作\" class=\"headerlink\" title=\"字典的常见操作\"></a>字典的常见操作</h2><h3 id=\"修改元素-1\"><a href=\"#修改元素-1\" class=\"headerlink\" title=\"修改元素\"></a>修改元素</h3><p>字典的每个元素中的数据是可以修改的，只要通过key找到，即可修改<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">info = &#123;<span class=\"string\">'name'</span>:<span class=\"string\">'班长'</span>, <span class=\"string\">'id'</span>:<span class=\"number\">100</span>, <span class=\"string\">'sex'</span>:<span class=\"string\">'f'</span>, <span class=\"string\">'address'</span>:<span class=\"string\">'地球亚洲中国北京'</span>&#125;</div><div class=\"line\"></div><div class=\"line\">newId = input(<span class=\"string\">'请输入新的学号'</span>)</div><div class=\"line\"></div><div class=\"line\">info[<span class=\"string\">'id'</span>] = int(newId)</div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">'修改之后的id为%d:'</span>%info[<span class=\"string\">'id'</span>])</div></pre></td></tr></table></figure></p>\n<h3 id=\"添加元素-1\"><a href=\"#添加元素-1\" class=\"headerlink\" title=\"添加元素\"></a>添加元素</h3><p>如果在使用 变量名[‘键’] = 数据 时，这个“键”在字典中，不存在，那么就会新增这个元素。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">info = &#123;<span class=\"string\">'name'</span>:<span class=\"string\">'班长'</span>, <span class=\"string\">'sex'</span>:<span class=\"string\">'f'</span>, <span class=\"string\">'address'</span>:<span class=\"string\">'地球亚洲中国北京'</span>&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># print('id为:%d'%info['id'])#程序会终端运行，因为访问了不存在的键</span></div><div class=\"line\"></div><div class=\"line\">newId = input(<span class=\"string\">'请输入新的学号'</span>)</div><div class=\"line\"></div><div class=\"line\">info[<span class=\"string\">'id'</span>] = newId</div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">'添加之后的id为:%d'</span>%info[<span class=\"string\">'id'</span>])</div></pre></td></tr></table></figure></p>\n<h3 id=\"删除元素-1\"><a href=\"#删除元素-1\" class=\"headerlink\" title=\"删除元素\"></a>删除元素</h3><p>对字典进行删除操作，有一下几种：</p>\n<ul>\n<li>del删除指定的元素</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">info = &#123;<span class=\"string\">'name'</span>:<span class=\"string\">'班长'</span>, <span class=\"string\">'sex'</span>:<span class=\"string\">'f'</span>, <span class=\"string\">'address'</span>:<span class=\"string\">'地球亚洲中国北京'</span>&#125;</div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">'删除前,%s'</span>%info[<span class=\"string\">'name'</span>])</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">del</span> info[<span class=\"string\">'name'</span>]</div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">'删除后,%s'</span>%info[<span class=\"string\">'name'</span>])</div></pre></td></tr></table></figure>\n<ul>\n<li>del删除整个字典</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"> info = &#123;<span class=\"string\">'name'</span>:<span class=\"string\">'monitor'</span>, <span class=\"string\">'sex'</span>:<span class=\"string\">'f'</span>, <span class=\"string\">'address'</span>:<span class=\"string\">'China'</span>&#125;</div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">'删除前,%s'</span>%info)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">del</span> info</div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">'删除后,%s'</span>%info)</div></pre></td></tr></table></figure>\n<ul>\n<li>clear清空整个字典</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">info = &#123;<span class=\"string\">'name'</span>:<span class=\"string\">'monitor'</span>, <span class=\"string\">'sex'</span>:<span class=\"string\">'f'</span>, <span class=\"string\">'address'</span>:<span class=\"string\">'China'</span>&#125;</div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">'清空前,%s'</span>%info)</div><div class=\"line\"></div><div class=\"line\">info.clear()</div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">'清空后,%s'</span>%info)</div></pre></td></tr></table></figure>\n<h3 id=\"其他常见操作\"><a href=\"#其他常见操作\" class=\"headerlink\" title=\"其他常见操作\"></a>其他常见操作</h3><ul>\n<li>len()<br>测量字典中，键值对的个数</li>\n<li>keys<br>返回一个包含字典所有KEY的列表</li>\n<li>values<br>返回一个包含字典所有value的列表</li>\n<li>items<br>返回一个包含所有（键，值）元祖的列表</li>\n<li>has_key<br>如果key在字典中，返回True，否则返回False</li>\n</ul>\n<hr>\n<h1 id=\"遍历\"><a href=\"#遍历\" class=\"headerlink\" title=\"遍历\"></a>遍历</h1><ul>\n<li>通过for … in …:的语法结构，我们可以遍历字符串、列表、元组、字典等数据结构。（注意python语法的缩进）</li>\n</ul>\n<h2 id=\"字符串遍历\"><a href=\"#字符串遍历\" class=\"headerlink\" title=\"字符串遍历\"></a>字符串遍历</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a_str = <span class=\"string\">\"hello itcast\"</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> a_str:</div><div class=\"line\"><span class=\"meta\">... </span>    print(char,end=<span class=\"string\">' '</span>)</div><div class=\"line\">...</div><div class=\"line\">h e l l o   i t c a s t</div></pre></td></tr></table></figure>\n<h2 id=\"列表遍历\"><a href=\"#列表遍历\" class=\"headerlink\" title=\"列表遍历\"></a>列表遍历</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a_list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> a_list:</div><div class=\"line\"><span class=\"meta\">... </span>    print(num,end=<span class=\"string\">' '</span>)</div><div class=\"line\">...</div><div class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span></div></pre></td></tr></table></figure>\n<h2 id=\"元组遍历\"><a href=\"#元组遍历\" class=\"headerlink\" title=\"元组遍历\"></a>元组遍历</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a_turple = (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> a_turple:</div><div class=\"line\"><span class=\"meta\">... </span>    print(num,end=<span class=\"string\">\" \"</span>)</div><div class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span></div></pre></td></tr></table></figure>\n<h1 id=\"公共运算符\"><a href=\"#公共运算符\" class=\"headerlink\" title=\"公共运算符\"></a>公共运算符</h1><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th style=\"text-align:center\">Python表达式</th>\n<th style=\"text-align:center\">结果</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">支持的数据类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td style=\"text-align:center\">[1, 2] + [3, 4]</td>\n<td style=\"text-align:center\">[1, 2, 3, 4]</td>\n<td style=\"text-align:center\">合并</td>\n<td style=\"text-align:center\">字符串、列表、元组</td>\n</tr>\n<tr>\n<td>*</td>\n<td style=\"text-align:center\">‘Hi!’ * 4</td>\n<td style=\"text-align:center\">[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td>\n<td style=\"text-align:center\">复制</td>\n<td style=\"text-align:center\">字符串、列表、元组</td>\n</tr>\n<tr>\n<td>in</td>\n<td style=\"text-align:center\">3 in (1, 2, 3)</td>\n<td style=\"text-align:center\">True</td>\n<td style=\"text-align:center\">元素是否存在</td>\n<td style=\"text-align:center\">字符串、列表、元组、字典</td>\n</tr>\n<tr>\n<td>not in</td>\n<td style=\"text-align:center\">4 not in (1, 2, 3)</td>\n<td style=\"text-align:center\">True</td>\n<td style=\"text-align:center\">元素是否不存在</td>\n<td style=\"text-align:center\">字符串、列表、元组、字典</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"+\"></a>+</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"hello \"</span> + <span class=\"string\">\"itcast\"</span></div><div class=\"line\"><span class=\"string\">'hello itcast'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>] + [<span class=\"number\">3</span>, <span class=\"number\">4</span>]</div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>(<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>) + (<span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>)</div><div class=\"line\">(<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"*\"></a>*</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'ab'</span>*<span class=\"number\">4</span></div><div class=\"line\"><span class=\"string\">'ababab'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>]*<span class=\"number\">4</span></div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>(<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>)*<span class=\"number\">4</span></div><div class=\"line\">(<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"in\"><a href=\"#in\" class=\"headerlink\" title=\"in\"></a>in</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'itc'</span> <span class=\"keyword\">in</span> <span class=\"string\">'hello itcast'</span></div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">3</span> <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</div><div class=\"line\"><span class=\"keyword\">False</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">4</span> <span class=\"keyword\">in</span> (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"name\"</span> <span class=\"keyword\">in</span> &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"Delron\"</span>, <span class=\"string\">\"age\"</span>:<span class=\"number\">24</span>&#125;</div><div class=\"line\"><span class=\"keyword\">True</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"python内置函数\"><a href=\"#python内置函数\" class=\"headerlink\" title=\"python内置函数\"></a>python内置函数</h1><p>Python包含了以下内置函数</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td style=\"text-align:center\">cmp(item1, item2)</td>\n<td style=\"text-align:center\">比较两个值</td>\n</tr>\n<tr>\n<td>2</td>\n<td style=\"text-align:center\">len(item)</td>\n<td style=\"text-align:center\">计算容器中元素个数</td>\n</tr>\n<tr>\n<td>3</td>\n<td style=\"text-align:center\">max(item)</td>\n<td style=\"text-align:center\">返回容器中元素最大值</td>\n</tr>\n<tr>\n<td>4</td>\n<td style=\"text-align:center\">min(item)</td>\n<td style=\"text-align:center\">返回容器中元素最小值</td>\n</tr>\n<tr>\n<td>5</td>\n<td style=\"text-align:center\">del(item)</td>\n<td style=\"text-align:center\">删除变量</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"cmp\"><a href=\"#cmp\" class=\"headerlink\" title=\"cmp\"></a>cmp</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cmp(<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"itcast\"</span>)</div><div class=\"line\"><span class=\"number\">-1</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cmp(<span class=\"string\">\"itcast\"</span>, <span class=\"string\">\"hello\"</span>)</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cmp(<span class=\"string\">\"itcast\"</span>, <span class=\"string\">\"itcast\"</span>)</div><div class=\"line\"><span class=\"number\">0</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cmp([<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>])</div><div class=\"line\"><span class=\"number\">-1</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cmp([<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">1</span>, <span class=\"number\">1</span>])</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cmp([<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</div><div class=\"line\"><span class=\"number\">-1</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cmp(&#123;<span class=\"string\">\"a\"</span>:<span class=\"number\">1</span>&#125;, &#123;<span class=\"string\">\"b\"</span>:<span class=\"number\">1</span>&#125;)</div><div class=\"line\"><span class=\"number\">-1</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cmp(&#123;<span class=\"string\">\"a\"</span>:<span class=\"number\">2</span>&#125;, &#123;<span class=\"string\">\"a\"</span>:<span class=\"number\">1</span>&#125;)</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cmp(&#123;<span class=\"string\">\"a\"</span>:<span class=\"number\">2</span>&#125;, &#123;<span class=\"string\">\"a\"</span>:<span class=\"number\">2</span>, <span class=\"string\">\"b\"</span>:<span class=\"number\">1</span>&#125;)</div><div class=\"line\"><span class=\"number\">-1</span></div></pre></td></tr></table></figure>\n<p>注意：cmp在比较字典数据时，先比较键，再比较值。</p>\n<h2 id=\"len\"><a href=\"#len\" class=\"headerlink\" title=\"len\"></a>len</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len(<span class=\"string\">\"hello itcast\"</span>)</div><div class=\"line\"><span class=\"number\">12</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])</div><div class=\"line\"><span class=\"number\">4</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len((<span class=\"number\">3</span>,<span class=\"number\">4</span>))</div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len(&#123;<span class=\"string\">\"a\"</span>:<span class=\"number\">1</span>, <span class=\"string\">\"b\"</span>:<span class=\"number\">2</span>&#125;)</div><div class=\"line\"><span class=\"number\">2</span></div></pre></td></tr></table></figure>\n<p>注意：len在操作字典数据时，返回的是键值对个数。</p>\n<h2 id=\"max\"><a href=\"#max\" class=\"headerlink\" title=\"max\"></a>max</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>max(<span class=\"string\">\"hello itcast\"</span>)</div><div class=\"line\"><span class=\"string\">'t'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>max([<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">522</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>])</div><div class=\"line\"><span class=\"number\">522</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>max(&#123;<span class=\"string\">\"a\"</span>:<span class=\"number\">1</span>, <span class=\"string\">\"b\"</span>:<span class=\"number\">2</span>&#125;)</div><div class=\"line\"><span class=\"string\">'b'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>max(&#123;<span class=\"string\">\"a\"</span>:<span class=\"number\">10</span>, <span class=\"string\">\"b\"</span>:<span class=\"number\">2</span>&#125;)</div><div class=\"line\"><span class=\"string\">'b'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>max(&#123;<span class=\"string\">\"c\"</span>:<span class=\"number\">10</span>, <span class=\"string\">\"b\"</span>:<span class=\"number\">2</span>&#125;)</div><div class=\"line\"><span class=\"string\">'c'</span></div></pre></td></tr></table></figure>\n<h2 id=\"del\"><a href=\"#del\" class=\"headerlink\" title=\"del\"></a>del</h2><p>del有两种用法，一种是del加空格，另一种是del()</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">del</span> a</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">NameError: name <span class=\"string\">'a'</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> defined</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">del</span> a[<span class=\"number\">0</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</div><div class=\"line\">[<span class=\"string\">'b'</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">del</span>(a)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">NameError: name <span class=\"string\">'a'</span> <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> defined</div></pre></td></tr></table></figure>\n<h2 id=\"多维列表-元祖访问的示例\"><a href=\"#多维列表-元祖访问的示例\" class=\"headerlink\" title=\"多维列表/元祖访问的示例\"></a>多维列表/元祖访问的示例</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple1 = [(<span class=\"number\">2</span>,<span class=\"number\">3</span>),(<span class=\"number\">4</span>,<span class=\"number\">5</span>)]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple1[<span class=\"number\">0</span>]</div><div class=\"line\">(<span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple1[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple1[<span class=\"number\">0</span>][<span class=\"number\">2</span>]</div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">IndexError: tuple index out of range</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple1[<span class=\"number\">0</span>][<span class=\"number\">1</span>]</div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple1[<span class=\"number\">2</span>][<span class=\"number\">2</span>]</div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">IndexError: list index out of range</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple2 = tuple1+[(<span class=\"number\">3</span>)]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple2</div><div class=\"line\">[(<span class=\"number\">2</span>, <span class=\"number\">3</span>), (<span class=\"number\">4</span>, <span class=\"number\">5</span>), <span class=\"number\">3</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple2[<span class=\"number\">2</span>]</div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>tuple2[<span class=\"number\">2</span>][<span class=\"number\">0</span>]</div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">TypeError: <span class=\"string\">'int'</span> object <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> subscriptable</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><p>-在python中，值是靠引用来传递来的。</p>\n<p>我们可以用id()来判断两个变量是否为同一个值的引用。 我们可以将id值理解为那块内存的地址标示。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = a</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(a) </div><div class=\"line\"><span class=\"number\">13033816</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(b)   <span class=\"comment\"># 注意两个变量的id值相同</span></div><div class=\"line\"><span class=\"number\">13033816</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">2</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(a)   <span class=\"comment\"># 注意a的id值已经变了</span></div><div class=\"line\"><span class=\"number\">13033792</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(b)   <span class=\"comment\"># b的id值依旧</span></div><div class=\"line\"><span class=\"number\">13033816</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = a</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(a)</div><div class=\"line\"><span class=\"number\">139935018544808</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(b)</div><div class=\"line\"><span class=\"number\">139935018544808</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.append(<span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(a)</div><div class=\"line\"><span class=\"number\">139935018544808</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>id(b)       <span class=\"comment\"># 注意a与b始终指向同一个地址</span></div><div class=\"line\"><span class=\"number\">139935018544808</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"可变类型与不可变类型\"><a href=\"#可变类型与不可变类型\" class=\"headerlink\" title=\"可变类型与不可变类型\"></a>可变类型与不可变类型</h1><p>可变类型，值可以改变：</p>\n<ul>\n<li>列表 list</li>\n<li>字典 dict</li>\n</ul>\n<p>不可变类型，值不可以改变：</p>\n<ul>\n<li>数值类型 int, long, bool, float</li>\n<li>字符串 str</li>\n<li>元组 tuple</li>\n</ul>\n","categories":["Tech"],"tags":["Notes","Python"]},{"title":"Python3 学习笔记（一）","url":"http://mutemeteor.com/2017/10/28/Python3-note/","content":"<h1 id=\"认识-Python\"><a href=\"#认识-Python\" class=\"headerlink\" title=\"认识 Python\"></a>认识 Python</h1><ul>\n<li>Python的发音与拼写 [ˈpaɪθən]</li>\n<li>Python的意思是蟒蛇，源于作者喜欢的一部电视剧 (C呢？)</li>\n<li>Python的作者是Guido van Rossum（龟叔）</li>\n<li>Python是龟叔在1989年圣诞节期间，为了打发无聊的圣诞节而用C编写的一个编程语言</li>\n<li>Python正式诞生于1991年</li>\n<li>Python的解释器如今有多个语言实现，我们常用的是CPython（官方版本的C语言实现），其他还有Jython（可以运行在Java平台）、IronPython（可以运行在.NET和Mono平台）、PyPy（Python实现的，支持JIT即时编译）</li>\n<li>Python目前有两个版本，Python2和Python3，最新版分别为2.7.12和3.5.2，现阶段大部分公司用的是Python2<a id=\"more\"></a>\n</li>\n</ul>\n<h1 id=\"Python优缺点\"><a href=\"#Python优缺点\" class=\"headerlink\" title=\"Python优缺点\"></a>Python优缺点</h1><h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li><p>简单————Python是一种代表简单主义思想的语言。阅读一个良好的Python程序就感觉像是在读英语一样，尽管这个英语的要求非常严格。</p>\n</li>\n<li><p>易学————Python有极其简单的语法。</p>\n</li>\n<li><p>免费、开源————Python是FLOSS（自由/开放源码软件）之一。简单地说，你可以自由地发布这个软件的拷贝、阅读它的源代码、对它做改动、把它的一部分用于新的自由软件中。FLOSS是基于一个团体分享知识的概念。这是为什么Python如此优秀的原因之一——它是由一群希望看到一个更加优秀的Python的人创造并经常改进着的。</p>\n</li>\n<li><p>高层语言————当你用Python语言编写程序的时候，你无需考虑诸如如何管理你的程序使用的内存一类的底层细节。</p>\n</li>\n<li><p>可移植性————由于它的开源本质，Python已经被移植在许多平台上（经过改动使它能够工作在不同平台上）。如果你小心地避免使用依赖于系统的特性，那么你的所有Python程序无需修改就可以在下述任何平台上面运行。</p>\n</li>\n<li><p>解释性————一个用编译性语言比如C或C++写的程序可以从源文件（即C或C++语言）转换到一个计算机使用的语言（二进制代码，即0和1）。这个过程通过编译器和不同的标记、选项完成。当运行程序的时候，连接/转载器软件把程序从硬盘复制到内存中并且运行。而Python语言写的程序不需要编译成二进制代码，可以直接从源代码运行程序。在计算机内部，Python解释器把源代码转换成称为字节码的中间形式，然后再把它翻译成计算机使用的机器语言并运行。事实上，由于不再需要担心如何编译程序，如何确保连接转载正确的库等等，所有这一切使得使用Python更加简单。</p>\n</li>\n<li><p>面向对象————Python既支持面向过程的编程也支持面向对象的编程。在“面向过程”的语言中，程序是由过程或仅仅是可重用代码的函数构建起来的。在“面向对象”的语言中，程序是由数据和功能组合而成的对象构建起来的。与其他主要的语言如C++和Java相比，Python以一种非常强大又简单的方式实现面向对象编程。</p>\n</li>\n<li><p>可扩展性————如果需要一段关键代码运行得更快或者希望某些算法不公开，可以把部分程序用C或C++编写，然后在Python程序中使用它们。</p>\n</li>\n<li><p>丰富的库————Python标准库确实很庞大。它可以帮助你处理各种工作，包括正则表达式、文档生成、单元测试、线程、数据库、网页浏览器、CGI、FTP、电子邮件、XML、XML-RPC、HTML、WAV文件、密码系统、GUI（图形用户界面）、Tk和其他与系统有关的操作。记住，只要安装了Python，所有这些功能都是可用的。这被称作Python的“功能齐全”理念。除了标准库以外，还有许多其他高质量的库，如wxPython、Twisted和Python图像库等等。</p>\n</li>\n<li><p>规范的代码————Python采用强制缩进的方式使得代码具有极佳的可读性。</p>\n</li>\n</ul>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ul>\n<li>运行速度，有速度要求的话，用C++改写关键部分吧。</li>\n<li>国内市场较小（国内以python来做主要开发的，目前只有一些web2.0公司）。但时间推移，目前很多国内软件公司，尤其是游戏公司，也开始规模使用他。</li>\n<li>中文资料匮乏（好的python中文资料屈指可数）。托社区的福，有几本优秀的教材已经被翻译了，但入门级教材多，高级内容还是只能看英语版。</li>\n<li>构架选择太多（没有像C#这样的官方.net构架，也没有像ruby由于历史较短，构架开发的相对集中。Ruby on Rails 构架开发中小型web程序天下无敌）。不过这也从另一个侧面说明，python比较优秀，吸引的人才多，项目也多。</li>\n</ul>\n<hr>\n<h1 id=\"解释器-amp-脚本文件\"><a href=\"#解释器-amp-脚本文件\" class=\"headerlink\" title=\"解释器&amp;脚本文件\"></a>解释器&amp;脚本文件</h1><p>Python 是一个脚本语言，可以在 Python 解释器中直接写代码或者将代码写到一个文件里，然后执行这个文件（即脚本文件）。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ python3</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(<span class=\"string\">\"Hello World!\"</span>)</div><div class=\"line\">Hello World!</div><div class=\"line\">exit()  </div><div class=\"line\"></div><div class=\"line\">vim helloworld.py                       <span class=\"comment\">#按i进入插入模式</span></div><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python3              </span></div><div class=\"line\">print(<span class=\"string\">\"Hello World!\"</span>)                   <span class=\"comment\">#输完文本按esc退出，并敲：wq</span></div><div class=\"line\"></div><div class=\"line\">$ chmod +x helloworld.py                <span class=\"comment\">#给文件添加可执行权限</span></div><div class=\"line\">$ ./helloworld.py</div></pre></td></tr></table></figure>\n<h1 id=\"代码风格建议\"><a href=\"#代码风格建议\" class=\"headerlink\" title=\"代码风格建议\"></a>代码风格建议</h1><p>在 Python 中，空格很重要，使用空格将标识符区分开，行开始处的空格我们称之为缩进，如果缩进是错误的，Python 解释器会抛出错误。</p>\n<p>所以建议遵守以下约定：</p>\n<ul>\n<li>使用 4 个空格来缩进</li>\n<li>永远不要混用空格和制表符</li>\n<li>在函数之间空一行</li>\n<li>在类之间空两行</li>\n<li>字典，列表，元组以及参数列表中，在 , 后添加一个空格。对于字典，: 后面也添加一个空格</li>\n<li>在赋值运算符和比较运算符周围要有空格（参数列表中除外），但是括号里侧不加空格：a = f(1, 2) + g(3, 4)</li>\n</ul>\n<h1 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h1><p>Python 的注释以 # 字符开始的，在 # 字符到行尾之间的所有东西都被程序忽略为注释，也就说对程序没有任何影响。快捷键为<code>Ctrl+/</code>。</p>\n<p>多行注释是用三引号包含的。</p>\n<hr>\n<h1 id=\"变量和数据类型\"><a href=\"#变量和数据类型\" class=\"headerlink\" title=\"变量和数据类型\"></a>变量和数据类型</h1><h2 id=\"关键字和标识符\"><a href=\"#关键字和标识符\" class=\"headerlink\" title=\"关键字和标识符\"></a>关键字和标识符</h2><p>Python3 的关键字，不能用于通常的标识符。关键字可以通过 Python3 解释器中得到：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ python3</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>help（）</div><div class=\"line\">help&gt; keywords</div></pre></td></tr></table></figure>\n<p>在 Python 中不需要为变量指定数据类型。所以可以直接写出 abc = 1 ，这样变量 abc 就是整数类型。如果写出 abc = 1.0 ，那么变量 abc 就是浮点类型。</p>\n<p>Python 也能操作字符串，它们用单引号或双引号括起来，就像下面这样。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ python3</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"Hello World!\"</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'Hello World!'</span></div></pre></td></tr></table></figure>\n<h2 id=\"从键盘读取输入\"><a href=\"#从键盘读取输入\" class=\"headerlink\" title=\"从键盘读取输入\"></a>从键盘读取输入</h2><p>通常情况下，Python 的代码中是不需要从键盘读取输入的。不过我们还是可以在 Python 中使用函数 input() 来做到这一点，input() 有一个用于打印在屏幕上的可选字符串参数，返回用户输入的字符串。</p>\n<h2 id=\"单行定义多个变量或赋值\"><a href=\"#单行定义多个变量或赋值\" class=\"headerlink\" title=\"单行定义多个变量或赋值\"></a>单行定义多个变量或赋值</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a , b = <span class=\"number\">45</span>, <span class=\"number\">54</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</div><div class=\"line\"><span class=\"number\">45</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b</div><div class=\"line\"><span class=\"number\">54</span></div></pre></td></tr></table></figure>\n<p>这个技巧用来交换两个数的值非常方便:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a, b = b , a</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</div><div class=\"line\"><span class=\"number\">54</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b</div><div class=\"line\"><span class=\"number\">45</span></div></pre></td></tr></table></figure>\n<p>要明白这是怎么工作的，需要学习元组（tuple）这个数据类型。python3用逗号创建元组。在赋值语句的右边创建了一个元组，称这为元组封装（tuple packing），赋值语句的左边则做的是元组拆封 （tuple unpacking）。<br>下面是另一个元组拆封的例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>data = (<span class=\"string\">\"mute\"</span>, <span class=\"string\">\"China\"</span>, <span class=\"string\">\"Python\"</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name, country, language = data</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>name</div><div class=\"line\"><span class=\"string\">'mute'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>country</div><div class=\"line\"><span class=\"string\">'China'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>language</div><div class=\"line\"><span class=\"string\">'Python'</span></div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"运算符和表达式\"><a href=\"#运算符和表达式\" class=\"headerlink\" title=\"运算符和表达式\"></a>运算符和表达式</h1><h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><p>运算符是一些符号，它告诉 Python 解释器去做一些数学或逻辑操作。只要有任意一个操作数是浮点数，结果就会是浮点数。</p>\n<p>进行除法运算时若是除不尽，结果将会是小数，这很自然，如果要进行整除，使用 // 运算符，它将返回商的整数部分。</p>\n<h2 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h2><table>\n<thead>\n<tr>\n<th>Operator</th>\n<th style=\"text-align:center\">Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&lt;</td>\n<td style=\"text-align:center\">Is less than</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td style=\"text-align:center\">Is less than or equal to</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td style=\"text-align:center\">Is greater than</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td style=\"text-align:center\">Is greater than or equal to</td>\n</tr>\n<tr>\n<td>==</td>\n<td style=\"text-align:center\">Is equal to</td>\n</tr>\n<tr>\n<td>!=</td>\n<td style=\"text-align:center\">Is not equal to</td>\n</tr>\n</tbody>\n</table>\n<p>举一些例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">1</span> &lt; <span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">3</span> &gt; <span class=\"number\">34</span></div><div class=\"line\"><span class=\"keyword\">False</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">23</span> == <span class=\"number\">45</span></div><div class=\"line\"><span class=\"keyword\">False</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">34</span> != <span class=\"number\">323</span></div><div class=\"line\"><span class=\"keyword\">True</span></div></pre></td></tr></table></figure>\n<h2 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h2><p>对于逻辑 与，或，非，使用 and，or，not 这几个关键字。</p>\n<p>逻辑运算符 and 和 or 也称作短路运算符：它们的参数从左向右解析，一旦结果可以确定就停止。例如，如果 A 和 C 为真而 B 为假，A and B and C 不会解析 C 。作用于一个普通的非逻辑值时，短路运算符的返回值通常是能够最先确定结果的那个操作数。</p>\n<p>关系运算可以通过逻辑运算符 and 和 or 组合，比较的结果可以用 not 来取反意。逻辑运算符的优先级又低于关系运算符，在它们之中，not 具有最高的优先级，or 优先级最低，所以 A and not B or C 等于 (A and (notB)) or C。当然，括号也可以用于比较表达式。</p>\n<p>举一些例子：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">5</span> <span class=\"keyword\">and</span> <span class=\"number\">4</span></div><div class=\"line\"><span class=\"number\">4</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0</span> <span class=\"keyword\">and</span> <span class=\"number\">4</span></div><div class=\"line\"><span class=\"number\">0</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">False</span> <span class=\"keyword\">or</span> <span class=\"number\">3</span> <span class=\"keyword\">or</span> <span class=\"number\">0</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">2</span> &gt; <span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"keyword\">not</span> <span class=\"number\">3</span> &gt; <span class=\"number\">5</span> <span class=\"keyword\">or</span> <span class=\"number\">4</span></div><div class=\"line\"><span class=\"keyword\">True</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"简写运算符\"><a href=\"#简写运算符\" class=\"headerlink\" title=\"简写运算符\"></a>简写运算符</h2><p>x op= expression 为简写运算的语法形式。其等价于 x = x op expression ，举例如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">12</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a += <span class=\"number\">13</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</div><div class=\"line\"><span class=\"number\">25</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a /= <span class=\"number\">3</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</div><div class=\"line\"><span class=\"number\">8.333333333333334</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a += (<span class=\"number\">26</span> * <span class=\"number\">32</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</div><div class=\"line\"><span class=\"number\">840.3333333333334</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></div><div class=\"line\">a = <span class=\"number\">9</span></div><div class=\"line\">b = <span class=\"number\">12</span></div><div class=\"line\">c = <span class=\"number\">3</span></div><div class=\"line\">x = a - b / <span class=\"number\">3</span> + c * <span class=\"number\">2</span> - <span class=\"number\">1</span></div><div class=\"line\">y = a - b / (<span class=\"number\">3</span> + c) * (<span class=\"number\">2</span> - <span class=\"number\">1</span>)</div><div class=\"line\">z = a - (b / (<span class=\"number\">3</span> + c) * <span class=\"number\">2</span>) - <span class=\"number\">1</span></div><div class=\"line\">print(<span class=\"string\">\"X = \"</span>, x)</div><div class=\"line\">print(<span class=\"string\">\"Y = \"</span>, y)</div><div class=\"line\">print(<span class=\"string\">\"Z = \"</span>, z)</div><div class=\"line\"></div><div class=\"line\">$ ./evaluationexp.py</div><div class=\"line\">X =  <span class=\"number\">10</span></div><div class=\"line\">Y =  <span class=\"number\">7</span></div><div class=\"line\">Z =  <span class=\"number\">4</span></div></pre></td></tr></table></figure>\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><table>\n<thead>\n<tr>\n<th>类型转换函数</th>\n<th style=\"text-align:center\">转换路径</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>float(string)</td>\n<td style=\"text-align:center\">字符串 -&gt; 浮点值</td>\n</tr>\n<tr>\n<td>int(string)</td>\n<td style=\"text-align:center\">字符串 -&gt; 整数值</td>\n</tr>\n<tr>\n<td>str(integer)</td>\n<td style=\"text-align:center\">整数值 -&gt; 字符串</td>\n</tr>\n<tr>\n<td>str(float)</td>\n<td style=\"text-align:center\">浮点值 -&gt; 字符串</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"number\">8.126768</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>str(a)</div><div class=\"line\"><span class=\"string\">'8.126768'</span></div><div class=\"line\">总结</div></pre></td></tr></table></figure>\n<p>除了数值运算，关系和逻辑运算也是程序的重要组成部分。另外 Python 是强类型语言，所以必要的时候需要手动进行类型转换。</p>\n<hr>\n<h1 id=\"判断语句\"><a href=\"#判断语句\" class=\"headerlink\" title=\"判断语句\"></a>判断语句</h1><h2 id=\"if-else\"><a href=\"#if-else\" class=\"headerlink\" title=\"if-else\"></a>if-else</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> 条件:</div><div class=\"line\">    满足条件时要做的事情</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    不满足条件时要做的事情</div></pre></td></tr></table></figure>\n<h2 id=\"elif\"><a href=\"#elif\" class=\"headerlink\" title=\"elif\"></a>elif</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> xxx1:</div><div class=\"line\">    事情<span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">elif</span> xxx2:</div><div class=\"line\">    事情<span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">elif</span> xxx3:</div><div class=\"line\">    事情<span class=\"number\">3</span></div></pre></td></tr></table></figure>\n<p>Demo：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">score = <span class=\"number\">77</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> score&gt;=<span class=\"number\">90</span> <span class=\"keyword\">and</span> score&lt;=<span class=\"number\">100</span>:</div><div class=\"line\">    print(<span class=\"string\">'本次考试，等级为A'</span>)</div><div class=\"line\"><span class=\"keyword\">elif</span> score&gt;=<span class=\"number\">80</span> <span class=\"keyword\">and</span> score&lt;<span class=\"number\">90</span>:</div><div class=\"line\">    print(<span class=\"string\">'本次考试，等级为B'</span>)</div><div class=\"line\"><span class=\"keyword\">elif</span> score&gt;=<span class=\"number\">70</span> <span class=\"keyword\">and</span> score&lt;<span class=\"number\">80</span>:</div><div class=\"line\">    print(<span class=\"string\">'本次考试，等级为C'</span>)</div><div class=\"line\"><span class=\"keyword\">elif</span> score&gt;=<span class=\"number\">60</span> <span class=\"keyword\">and</span> score&lt;<span class=\"number\">70</span>:</div><div class=\"line\">    print(<span class=\"string\">'本次考试，等级为D'</span>)</div><div class=\"line\"><span class=\"keyword\">elif</span> score&gt;=<span class=\"number\">0</span> <span class=\"keyword\">and</span> score&lt;<span class=\"number\">60</span>:</div><div class=\"line\">    print(<span class=\"string\">'本次考试，等级为E'</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"if嵌套\"><a href=\"#if嵌套\" class=\"headerlink\" title=\"if嵌套\"></a>if嵌套</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> 条件<span class=\"number\">1</span>:</div><div class=\"line\"></div><div class=\"line\">   满足条件<span class=\"number\">1</span> 做的事情<span class=\"number\">1</span></div><div class=\"line\">   满足条件<span class=\"number\">1</span> 做的事情<span class=\"number\">2</span></div><div class=\"line\">   ...(省略)...</div><div class=\"line\"></div><div class=\"line\">   <span class=\"keyword\">if</span> 条件<span class=\"number\">2</span>:</div><div class=\"line\">       满足条件<span class=\"number\">2</span> 做的事情<span class=\"number\">1</span></div><div class=\"line\">       满足条件<span class=\"number\">2</span> 做的事情<span class=\"number\">2</span></div><div class=\"line\">       ...(省略)...</div></pre></td></tr></table></figure>\n<p>Demo：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">ticket = <span class=\"number\">1</span>     <span class=\"comment\"># 用1代表有车票，0代表没有车票</span></div><div class=\"line\">knife = <span class=\"number\">9</span>     <span class=\"comment\"># 刀子的长度，单位为cm</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> ticket == <span class=\"number\">1</span>:</div><div class=\"line\">    print(<span class=\"string\">\"有车票，可以进站\"</span>)</div><div class=\"line\">    <span class=\"keyword\">if</span> knife &lt; <span class=\"number\">10</span>:</div><div class=\"line\">        print(<span class=\"string\">\"通过安检\"</span>)</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        print(<span class=\"string\">\"没有通过安检\"</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    print(<span class=\"string\">\"没有车票，不能进站\"</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"小应用-猜拳游戏\"><a href=\"#小应用-猜拳游戏\" class=\"headerlink\" title=\"小应用-猜拳游戏\"></a>小应用-猜拳游戏</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> random</div><div class=\"line\"></div><div class=\"line\">player = input(<span class=\"string\">'请输入：剪刀(0)  石头(1)  布(2):'</span>)</div><div class=\"line\"></div><div class=\"line\">player = int(player)</div><div class=\"line\"></div><div class=\"line\">computer = random.randint(<span class=\"number\">0</span>,<span class=\"number\">2</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 用来进行测试</span></div><div class=\"line\"><span class=\"comment\">#print('player=%d,computer=%d',(player,computer))</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> ((player == <span class=\"number\">0</span>) <span class=\"keyword\">and</span> (computer == <span class=\"number\">2</span>)) <span class=\"keyword\">or</span> ((player ==<span class=\"number\">1</span>) <span class=\"keyword\">and</span> (computer == <span class=\"number\">0</span>)) <span class=\"keyword\">or</span> ((player == <span class=\"number\">2</span>) <span class=\"keyword\">and</span> (computer == <span class=\"number\">1</span>)):</div><div class=\"line\">    print(<span class=\"string\">'获胜，哈哈，你太厉害了'</span>)</div><div class=\"line\"><span class=\"keyword\">elif</span> player == computer:</div><div class=\"line\">    print(<span class=\"string\">'平局，要不再来一局'</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    print(<span class=\"string\">'输了，不要走，洗洗手接着来，决战到天亮'</span>)</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"循环语句\"><a href=\"#循环语句\" class=\"headerlink\" title=\"循环语句\"></a>循环语句</h1><h2 id=\"while\"><a href=\"#while\" class=\"headerlink\" title=\"while\"></a>while</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">while</span> 条件:</div><div class=\"line\">        条件满足时，做的事情<span class=\"number\">1</span></div><div class=\"line\">        条件满足时，做的事情<span class=\"number\">2</span></div><div class=\"line\">        条件满足时，做的事情<span class=\"number\">3</span></div><div class=\"line\">        ...(省略)...</div></pre></td></tr></table></figure>\n<p>Demo:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">i = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">while</span> i&lt;<span class=\"number\">5</span>:</div><div class=\"line\">    print(<span class=\"string\">\"当前是第%d次执行循环\"</span>%(i+<span class=\"number\">1</span>))</div><div class=\"line\">    print(<span class=\"string\">\"i=%d\"</span>%i)</div><div class=\"line\">    i+=<span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<h2 id=\"while循环嵌套\"><a href=\"#while循环嵌套\" class=\"headerlink\" title=\"while循环嵌套\"></a>while循环嵌套</h2><p>要求：打印如下图形：</p>\n<pre><code>*\n* *\n* * *\n* * * *\n* * * * *\n</code></pre><p>参考代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">i = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">while</span> i&lt;=<span class=\"number\">5</span>:</div><div class=\"line\">    j = <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">while</span> j&lt;=i:</div><div class=\"line\">        print(<span class=\"string\">\"* \"</span>,end=<span class=\"string\">''</span>)</div><div class=\"line\">        j+=<span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\">    print(<span class=\"string\">\"\\n\"</span>)</div><div class=\"line\">    i+=<span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<p>99乘法表</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">i = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">while</span> i&lt;=<span class=\"number\">9</span>:</div><div class=\"line\">    j=<span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">while</span> j&lt;=i:</div><div class=\"line\">        print(<span class=\"string\">\"%d*%d=%-2d \"</span>%(j,i,i*j),end=<span class=\"string\">''</span>)</div><div class=\"line\">        j+=<span class=\"number\">1</span></div><div class=\"line\">    print(<span class=\"string\">'\\n'</span>)</div><div class=\"line\">    i+=<span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<h2 id=\"for\"><a href=\"#for\" class=\"headerlink\" title=\"for\"></a>for</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> 临时变量 <span class=\"keyword\">in</span> 列表或者字符串等:</div><div class=\"line\">    循环满足条件时执行的代码</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    循环不满足条件时执行的代码</div></pre></td></tr></table></figure>\n","categories":["Tech"],"tags":["Notes","Python"]},{"title":"Scala 入门学习笔记","url":"http://mutemeteor.com/2017/10/28/ScalaNote/","content":"<p>Scala 是一门多范式的编程语言，类似于 Java 。设计初衷是实现可伸缩的语言、并集成面向对象编程和函数式编程的各种特性。</p>\n<h1 id=\"实现-Hello-World\"><a href=\"#实现-Hello-World\" class=\"headerlink\" title=\"实现 Hello World\"></a>实现 Hello World</h1><pre><code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">object HelloWorld &#123;</div><div class=\"line\">  <span class=\"function\">def <span class=\"title\">main</span><span class=\"params\">(args: Array[String])</span> </span>&#123;</div><div class=\"line\">    println(<span class=\"string\">\"Hello, world!\"</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre><p>可以使用命令行交互式执行：</p>\n<p>  HelloWorld.main(null)</p>\n<a id=\"more\"></a>\n","categories":["Tech"],"tags":["Notes","Scala"]},{"title":"《极简宇宙史》","url":"http://mutemeteor.com/2017/10/05/Universe/","content":"<p><a href=\"http://ogzkngv09.bkt.clouddn.com/universe.JPG\" target=\"_blank\" rel=\"external\"><img src=\"http://ogzkngv09.bkt.clouddn.com/universe.JPG\" alt=\"极简宇宙史\"></a></p>\n<blockquote>\n<p>读这本书时一直在随着作者的描述去想象，却仍然无法在脑海里描绘出宇宙之磅礴之诡谲之绮丽之深邃。唯有感叹宇宙之浩瀚，人类之渺小。我们看到的太阳，永远是8分20秒之前的太阳，永远不可能是它当下的样子，甚至不在我们看到它在的地方，因为它已经绕着银河系中心旋转的轨道上移动了117,300公里。</p>\n</blockquote>\n<h1 id=\"宇宙\"><a href=\"#宇宙\" class=\"headerlink\" title=\"宇宙\"></a>宇宙</h1><ul>\n<li>大概四十亿年前，我们年轻的行星与另一颗行星撞在一起，后者大概有火星那么大，这次撞击从地球上扯了一块物质下来，被带入太空。在随后的几亿年时间里，所有那次撞击产生的碎片聚到一起，形成了一个球体绕着地球运行。等这一切尘埃落定之时，就是月球的诞生之日。</li>\n<li>如果这次撞击发生在今天，其剧烈程度足以将地球上的一切生命抹去。而当时，我们的地球上还是一片荒芜，没有生命。有趣的是，如果没有这次灾难性的碰撞，我们就不会有月亮照亮我们的夜晚，没有潮汐变化，而地球上可能也不会出现如我们现在所熟悉的生命形式。当那颗蓝色的地球跃过月平线，出现在你眼前时，你意识到这场宇宙级的灾难事件所带来的创生与破坏一样伟大。</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li>如果人类能够以某种方式收获太阳在一秒钟内辐射出的所有能量，它就足以满足我们全世界五亿年的能量需求。</li>\n<li>我们可以依据原子的大小将它们分类。它们中最小的一个被称为氢原子。第二小的被称为氦原子。这两种原子加在一起构成了已知宇宙的百分之九十八的物质。的确很多。但与以前比，这个比例现在已经变小了，大概一百三十八亿年前，这两种原子几乎构成了宇宙中所有的已知物质。今天我们可以看到的除了氢与氦之外的原子还包括氮原子、碳原子、氧原子或银原子等。</li>\n<li>热核聚变，一个用较小的原子核产生较大的原子核的过程。热核聚变反应能够发生的一个必要条件是巨大的能量，太阳压倒一切的自身引力就是这种巨大能量的来源。</li>\n<li>我们的行星体积太小，而且不够致密，因此自身引力不足以让其内核达到足以触发热核聚变反应的温度和压力。在定义上，这就是行星与恒星的主要差别。</li>\n<li>当两颗原子核融合在一起变成一个更大的原子核时，它们的一部分质量消失了。聚合而成的新核比创造它的两颗旧核的总质量来得轻。</li>\n<li><p>太阳的爆炸将发生在五十亿年后的某个星期四，前后误差各三天。</p>\n</li>\n<li><p>时不时地，因为碰撞或其他某种扰动，某个或某些脏雪球（属于海王星）会脱离它们原本安静而遥远的绕日轨道。当它们朝向太阳飞行时，会慢慢来到较暖的环境并在太阳辐射的照耀下融化并留下长长的尾巴，这条尾巴里是微小的冰块或石块，在黑暗的背景下被阳光照得闪闪发光。这就是我们称之为“彗星”的天体。</p>\n</li>\n<li>从冥王星被发现并被称为太阳系第九大行星到这个称号被剥夺、归于矮行星的七十六个地球年里，它们绕太阳一周都没走完，也就是这一切都发生在冥王星上的一年时间里。冥王星的大小只有月球的四分之一。</li>\n<li>一个储存着几千亿亿亿个可能彗星的彗星库形成一个巨大的球状星云，看起来就像占据了太阳与其他恒星之间的所有空间。这个彗星库被称为“奥尔特云”。</li>\n</ul>\n<ul>\n<li>比邻星属于那种被称为红矮星的家族。它比太阳小很多（只有太阳的大约七分之一大），色调偏红。这也是红矮星名字的来源。红矮星非常普遍，天空里大多数恒星都属于红矮星。因为比太阳小，它微小的内核里原子聚合的速度比太阳慢好多好多。对恒星来说，大小，的确至关重要：体积越大，寿命越短。</li>\n<li><p>从月球发出的光需要大约一秒到达地球，然后再花一秒返回。太阳就更远了。光需要八分二十秒才能到达地球，对话变得有趣起来，因为一方要等超过十六分钟才能听到对方对自己问题的回答。但在宇宙中，太阳到地球的距离只能说是近邻。如果现在你从比邻星边上致电地球，电话铃声将在四年两个月后响起。</p>\n</li>\n<li><p>保持S2以这种速度旋转而不被甩出去，所需要的质量要超过四百万颗太阳。</p>\n</li>\n<li><p>如果你把太阳系，以及其中的行星、小行星和彗星看成我们在宇宙里的家庭，把比邻星当作我们的邻居，那么银河系就是我们在宇宙中的大城市，一个由三千亿颗恒星构成的繁华都市，而我们的太阳，只是其中的一颗。</p>\n</li>\n<li><p>即使在人类混乱的历史上最黑暗的日子里，也有些人勇敢地挑战宗教权威，坚信其他世界的存在。意大利天主教教士乔达诺·布鲁诺就是其中的一个，因为公开宣传这种异教思想，他在一六〇〇年的意大利罗马被活活烧死。他宣称“有无数太阳与无数的地球存在，这些地球围绕着各自的太阳旋转”。他因这些信念而痛苦地死去。</p>\n</li>\n<li><p>银河系属于一个由五十四个不同星系通过引力相互纠缠而构成的一个小小星系群。科学家把这个星系群命名为“本星系群”。它的区域覆盖了宽度大约八百四十万光年的球状区域。银河系是其中第二大的成员，大王是仙女座星系。</p>\n</li>\n<li>我们的望远镜已经探测到并且绘出了这道墙。这个尽头，这道光线无法透过的墙被称为“临界最后散射面”。</li>\n</ul>\n<h1 id=\"理解外部空间\"><a href=\"#理解外部空间\" class=\"headerlink\" title=\"理解外部空间\"></a>理解外部空间</h1><ul>\n<li><p>水星看起来很普通，只比我们的月亮大了一点点，是太阳系八大行星中最小的一个。它是岩石质地，表面满是陨石坑，相当长的时间内都不会消失。水星没有大气层，因此也就没有气候变化来抹平它不规则的形状和伤痕。总之，水星不会是一个可能被选作度假目的地的行星。它自转一周需要五十九个地球日，也就是说水星上的一个夜晚相当于地球上的一个月，紧接着是同样漫长的白昼。水星上的白昼与黑夜都同地狱一般残酷，白天的温度可以高达430°C，到了晚上，又低到-180°C。</p>\n</li>\n<li><p>引力原来是宇宙的构造被它所含的物体弯曲所引起的。将物质与宇宙的局部几何联系起来并用以解释引力本质的理论，被称为广义相对论。</p>\n</li>\n<li><p>光，别名电磁辐射，可被认为既是微粒（光子），又是波。光波的高度代表着我们所称的强度。</p>\n</li>\n<li><p>包围着我们的各种光线，从最低到最高能量依次是：无线电波、微波、红外线、可见光、紫外线、X光和伽玛射线。无线电波有着很长的波长，波峰之间距离可从一米到十万公里或更长，而伽玛射线，其波长短于一毫米的十亿分之一——但它们都是光线。</p>\n</li>\n<li><p>我们所探测到的最遥远星光在到达我们的望远镜的旅途上走了一百三十八亿年时间，出发于宇宙黑暗世纪，当宇宙开始变得透明之时。</p>\n</li>\n<li><p>发现宇宙膨胀的是美国天文学家埃德温·哈勃，他是在一九二九年发现的，因此描述远处的星系越走越远这一行为的定律被命名为哈勃定律。</p>\n</li>\n<li><p>引力永远是互相吸引的，它永远让物体掉落，但竞争产生了层次，某些物体不得不往上走，以腾出空间容纳比自己更重的物体。</p>\n</li>\n</ul>\n<h1 id=\"快\"><a href=\"#快\" class=\"headerlink\" title=\"快\"></a>快</h1><h1 id=\"跃入量子世界\"><a href=\"#跃入量子世界\" class=\"headerlink\" title=\"跃入量子世界\"></a>跃入量子世界</h1><h1 id=\"到达空间与时间的源头\"><a href=\"#到达空间与时间的源头\" class=\"headerlink\" title=\"到达空间与时间的源头\"></a>到达空间与时间的源头</h1><h1 id=\"意料之外的谜团\"><a href=\"#意料之外的谜团\" class=\"headerlink\" title=\"意料之外的谜团\"></a>意料之外的谜团</h1><h1 id=\"迈向已知世界之外的第一步\"><a href=\"#迈向已知世界之外的第一步\" class=\"headerlink\" title=\"迈向已知世界之外的第一步\"></a>迈向已知世界之外的第一步</h1>","categories":["读书记"],"tags":["天文","科普"]},{"title":"【数据结构与算法】排序专题","url":"http://mutemeteor.com/2017/10/02/algorithm-sort/","content":"<p>算法分析</p>\n<ol>\n<li>时间复杂度-执行时间(比较和交换次数)</li>\n<li>空间复杂度-所消耗的额外内存空间</li>\n</ol>\n<ul>\n<li>使用小堆栈或表</li>\n<li>使用链表或指针、数组索引来代表数据</li>\n<li>排序数据的副本</li>\n</ul>\n<p>对具有重键的数据(同一组数按不同键多次排序)进行排序时，需要考虑排序方法的稳定性，在非稳定性排序算法中需要稳定性时可考虑加入小索引。</p>\n<p>稳定性：如果排序后文件中拥有相同键的项的相对位置不变，这种排序方式是稳定的。</p>\n<p>常见的排序算法根据是否需要比较可以分为如下几类：</p>\n<ol>\n<li>Comparison Sorting</li>\n</ol>\n<ul>\n<li>Bubble Sort</li>\n<li>Selection Sort</li>\n<li>Insertion Sort</li>\n<li>Shell Sort</li>\n<li>Merge Sort</li>\n<li>Quck Sort</li>\n<li>Heap Sort</li>\n</ul>\n<ol>\n<li>Bucket Sort</li>\n<li>Counting Sort</li>\n<li>Radix Sort</li>\n</ol>\n<p>从稳定性角度考虑可分为如下两类：</p>\n<ul>\n<li>稳定</li>\n<li>非稳定<a id=\"more\"></a>\n</li>\n</ul>\n<hr>\n<p>【数据结构与算法】笔记相关链接：</p>\n<p>作者主页：<a href=\"http://www.yuanbin.me/\" target=\"_blank\" rel=\"external\">http://www.yuanbin.me/</a></p>\n<h2 id=\"项目Github地址：https-github-com-billryan-algorithm-exercise\"><a href=\"#项目Github地址：https-github-com-billryan-algorithm-exercise\" class=\"headerlink\" title=\"项目Github地址：https://github.com/billryan/algorithm-exercise\"></a>项目Github地址：<a href=\"https://github.com/billryan/algorithm-exercise\" target=\"_blank\" rel=\"external\">https://github.com/billryan/algorithm-exercise</a></h2>","categories":["Tech"],"tags":["Algorithm","DataStructure","Java","Sort"]},{"title":"【数据结构与算法】二叉树专题","url":"http://mutemeteor.com/2017/09/30/algorithm-binarytree/","content":"<p>编程实现<br>    <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> val;</div><div class=\"line\">    <span class=\"keyword\">public</span> TreeNode left, right;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.val = val;</div><div class=\"line\">        <span class=\"keyword\">this</span>.left = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">this</span>.right = <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>树的遍历</p>\n<p>从二叉树的根节点出发，节点的遍历分为三个主要步骤：对当前节点进行操作（称为“访问”节点，或者根节点）、遍历左边子节点、遍历右边子节点。访问节点顺序的不同也就形成了不同的遍历方式。需要注意的是树的遍历通常使用递归的方法进行理解和实现，在访问元素时也需要使用递归的思想去理解。实际实现中对于前序和中序遍历可尝试使用递归实现。</p>\n<p>按照访问根元素(当前元素)的前后顺序，遍历方式可划分为如下几种：<br>深度优先：先访问子节点，再访问父节点，最后访问第二个子节点。</p>\n<p>根据根节点相对于左右子节点的访问先后顺序又可细分为以下三种方式。<br>前序(pre-order)：先根后左再右<br>中序(in-order)：先左后根再右<br>后序(post-order)：先左后右再根<br>广度优先：先访问根节点，沿着树的宽度遍历子节点，直到所有节点均被访问为止。</p>\n<p>如下图所示，遍历顺序在右侧框中，红色A为根节点。使用递归和整体的思想去分析遍历顺序较为清晰。</p>\n<p>二叉树的广度优先遍历和树的前序/中序/后序遍历不太一样，前/中/后序遍历使用递归，也就是栈的思想对二叉树进行遍历，广度优先一般使用队列的思想对二叉树进行遍历。</p>\n<p>如果已知中序遍历和前序遍历或者后序遍历，那么就可以完全恢复出原二叉树结构。其中最为关键的是前序遍历中第一个一定是根，而后序遍历最后一个一定是根，中序遍历在得知根节点后又可进一步递归得知左右子树的根节点。但是这种方法也是有适用范围的：元素不能重复！否则无法完成定位。</p>\n<hr>\n<p>【数据结构与算法】笔记相关链接：</p>\n<p>作者主页：<a href=\"http://www.yuanbin.me/\" target=\"_blank\" rel=\"external\">http://www.yuanbin.me/</a></p>\n<h2 id=\"项目Github地址：https-github-com-billryan-algorithm-exercise\"><a href=\"#项目Github地址：https-github-com-billryan-algorithm-exercise\" class=\"headerlink\" title=\"项目Github地址：https://github.com/billryan/algorithm-exercise\"></a>项目Github地址：<a href=\"https://github.com/billryan/algorithm-exercise\" target=\"_blank\" rel=\"external\">https://github.com/billryan/algorithm-exercise</a></h2>","categories":[],"tags":[]},{"title":"【数据结构与算法】链表专题","url":"http://mutemeteor.com/2017/09/27/algorithm-linkedlist/","content":"<p>链表是线性表的一种。线性表是最基本、最简单、也是最常用的一种数据结构。线性表中数据元素之间的关系是一对一的关系，即除了第一个和最后一个数据元素之外，其它数据元素都是首尾相接的。线性表有两种存储方式，一种是顺序存储结构，另一种是链式存储结构。我们常用的数组就是一种典型的顺序存储结构。</p>\n<p>相反，链式存储结构就是两个相邻的元素在内存中可能不是相邻的，每一个元素都有一个指针域，指针域一般是存储着到下一个元素的指针。这种存储方式的优点是定点插入和定点删除的时间复杂度为 O(1)，不会浪费太多内存，添加元素的时候才会申请内存，删除元素会释放内存。缺点是访问的时间复杂度最坏为 O(n)。</p>\n<p>顺序表的特性是随机读取，也就是访问一个元素的时间复杂度是O(1)，链式表的特性是插入和删除的时间复杂度为O(1)。</p>\n<p>链表就是链式存储的线性表。根据指针域的不同，链表分为单向链表、双向链表、循环链表等等。</p>\n<h1 id=\"Part-I-Basics\"><a href=\"#Part-I-Basics\" class=\"headerlink\" title=\"Part I - Basics\"></a>Part I - Basics</h1><h2 id=\"Java编程实现\"><a href=\"#Java编程实现\" class=\"headerlink\" title=\"Java编程实现\"></a>Java编程实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> val;</div><div class=\"line\">    <span class=\"keyword\">public</span> ListNode next;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ListNode</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.val = val;</div><div class=\"line\">        <span class=\"keyword\">this</span>.next = <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"链表的基本操作\"><a href=\"#链表的基本操作\" class=\"headerlink\" title=\"链表的基本操作\"></a>链表的基本操作</h2><h3 id=\"反转链表\"><a href=\"#反转链表\" class=\"headerlink\" title=\"反转链表\"></a>反转链表</h3><h4 id=\"单向链表\"><a href=\"#单向链表\" class=\"headerlink\" title=\"单向链表\"></a>单向链表</h4><p>链表的基本形式是：1 -&gt; 2 -&gt; 3 -&gt; null，反转需要变为 3 -&gt; 2 -&gt; 1 -&gt; null。这里要注意：<br>访问某个节点 curt.next 时，要检验 curt 是否为 null。<br>要把反转后的最后一个节点（即反转前的第一个节点）指向 null。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val;</div><div class=\"line\">    ListNode next;</div><div class=\"line\">    ListNode(<span class=\"keyword\">int</span> val) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.val = val;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// iterative method</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverse</span><span class=\"params\">(ListNode head)</span> </span>&#123;</div><div class=\"line\">    ListNode prev = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> (head != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        ListNode next = head.next;</div><div class=\"line\">        head.next = prev;</div><div class=\"line\">        prev = head;</div><div class=\"line\">        head = next;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> prev;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// recursive method</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverse</span><span class=\"params\">(ListNode head)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"keyword\">null</span> || head.next == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> head;</div><div class=\"line\">        &#125;</div><div class=\"line\">        ListNode next = head.next;</div><div class=\"line\">        ListNode newHead = reverse(next);</div><div class=\"line\">        next.next = head;</div><div class=\"line\">        head.next = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> newHead;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"双向链表\"><a href=\"#双向链表\" class=\"headerlink\" title=\"双向链表\"></a>双向链表</h3><p>和单向链表的区别在于：双向链表的反转核心在于next和prev域的交换，还需要注意的是当前节点和上一个节点的递推。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DListNode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val;</div><div class=\"line\">    DListNode prev, next;</div><div class=\"line\">    DListNode(<span class=\"keyword\">int</span> val) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.val = val;</div><div class=\"line\">        <span class=\"keyword\">this</span>.prev = <span class=\"keyword\">this</span>.next = <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> DListNode <span class=\"title\">reverse</span><span class=\"params\">(DListNode head)</span> </span>&#123;</div><div class=\"line\">    DListNode curr = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> (head != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        curr = head;</div><div class=\"line\">        head = curr.next;</div><div class=\"line\">        curr.next = curr.prev;</div><div class=\"line\">        curr.prev = head;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> curr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"Part-II-Coding\"><a href=\"#Part-II-Coding\" class=\"headerlink\" title=\"Part II - Coding\"></a>Part II - Coding</h1><hr>\n<p>【数据结构与算法】笔记相关链接：</p>\n<p>作者主页：<a href=\"http://www.yuanbin.me/\" target=\"_blank\" rel=\"external\">http://www.yuanbin.me/</a></p>\n<h2 id=\"项目Github地址：https-github-com-billryan-algorithm-exercise\"><a href=\"#项目Github地址：https-github-com-billryan-algorithm-exercise\" class=\"headerlink\" title=\"项目Github地址：https://github.com/billryan/algorithm-exercise\"></a>项目Github地址：<a href=\"https://github.com/billryan/algorithm-exercise\" target=\"_blank\" rel=\"external\">https://github.com/billryan/algorithm-exercise</a></h2>","categories":["Tech"],"tags":["Algorithm","DataStructure","Java","LinkedList"]},{"title":"【数据结构与算法】字符串专题","url":"http://mutemeteor.com/2017/09/18/algorithm-string/","content":"<h1 id=\"Part-I-Basics\"><a href=\"#Part-I-Basics\" class=\"headerlink\" title=\"Part I - Basics\"></a>Part I - Basics</h1><p>Java中字符串常用的方法：</p>\n<pre><code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">String s1 = <span class=\"keyword\">new</span> String();</div><div class=\"line\">String s2 = <span class=\"string\">\"mutemeteor\"</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> s2Len = s2.length();</div><div class=\"line\">s2.substring(<span class=\"number\">4</span>,<span class=\"number\">9</span>);  <span class=\"comment\">// return \"meteor\"</span></div><div class=\"line\">StringBuilder s3 = <span class=\"keyword\">new</span> StringBuilder(s2.substring(<span class=\"number\">4</span>,<span class=\"number\">8</span>));</div><div class=\"line\">s3.append(<span class=\"string\">\"mute\"</span>);</div><div class=\"line\">String s2new = s3.toString(); <span class=\"comment\">// return \"mutemeteor\"</span></div><div class=\"line\"><span class=\"comment\">// convert String to char array</span></div><div class=\"line\"><span class=\"keyword\">char</span>[] s2Char = s2.toCharArray();</div><div class=\"line\"><span class=\"comment\">// char ch = s2.charAt(4); // return 'm'</span></div><div class=\"line\"><span class=\"comment\">// find index at first</span></div><div class=\"line\"><span class=\"keyword\">int</span> index = s2.indexof(<span class=\"string\">'m'</span>); <span class=\"comment\">// return 4, if not found, return -1</span></div></pre></td></tr></table></figure>\n</code></pre><a id=\"more\"></a>\n<h1 id=\"Part-II-Coding\"><a href=\"#Part-II-Coding\" class=\"headerlink\" title=\"Part II - Coding\"></a>Part II - Coding</h1><blockquote>\n<p>处理字符串操作相关问题时，常见的做法是从字符串尾部开始编辑，从后往前逆向操作。这么做的原因是因为字符串的尾部往往有足够空间，可以直接修改而不用担心覆盖字符串前面的数据。</p>\n</blockquote>\n<h2 id=\"Implement-strStr\"><a href=\"#Implement-strStr\" class=\"headerlink\" title=\"Implement strStr\"></a>Implement strStr</h2><p><strong>lintcode #13</strong><br>Problem Statement:<br>Implement strStr().<br>Returns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.</p>\n<p>对于一个给定的 source 字符串和一个 target 字符串，你应该在 source 字符串中找出 target 字符串出现的第一个位置(从0开始)。如果不存在，则返回 -1。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">strStr</span><span class=\"params\">(String haystack, String needle)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (haystack == <span class=\"keyword\">null</span> &amp;&amp; needle == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (haystack == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (needle == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; haystack.length() - needle.length() + <span class=\"number\">1</span>; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">for</span> (; j &lt; needle.length(); j++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (haystack.charAt(i+j) != needle.charAt(j)) <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (j == needle.length()) <span class=\"keyword\">return</span> i;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Two-Strings-Are-Anagrams\"><a href=\"#Two-Strings-Are-Anagrams\" class=\"headerlink\" title=\"Two Strings Are Anagrams\"></a>Two Strings Are Anagrams</h2><h2 id=\"Compare-Strings\"><a href=\"#Compare-Strings\" class=\"headerlink\" title=\"Compare Strings\"></a>Compare Strings</h2><h2 id=\"Group-Anagrams\"><a href=\"#Group-Anagrams\" class=\"headerlink\" title=\"Group Anagrams\"></a>Group Anagrams</h2><h2 id=\"Longest-Common-Substring\"><a href=\"#Longest-Common-Substring\" class=\"headerlink\" title=\"Longest Common Substring\"></a>Longest Common Substring</h2><h2 id=\"Rotate-String\"><a href=\"#Rotate-String\" class=\"headerlink\" title=\"Rotate String\"></a>Rotate String</h2><h2 id=\"Reverse-Words-in-a-String\"><a href=\"#Reverse-Words-in-a-String\" class=\"headerlink\" title=\"Reverse Words in a String\"></a>Reverse Words in a String</h2><h2 id=\"Valid-Palindrome\"><a href=\"#Valid-Palindrome\" class=\"headerlink\" title=\"Valid Palindrome\"></a>Valid Palindrome</h2><h2 id=\"Longest-Palindromic-Substring\"><a href=\"#Longest-Palindromic-Substring\" class=\"headerlink\" title=\"Longest Palindromic Substring\"></a>Longest Palindromic Substring</h2><h2 id=\"Space-Replacement\"><a href=\"#Space-Replacement\" class=\"headerlink\" title=\"Space Replacement\"></a>Space Replacement</h2><h2 id=\"Wildcard-Matching\"><a href=\"#Wildcard-Matching\" class=\"headerlink\" title=\"Wildcard Matching\"></a>Wildcard Matching</h2><h2 id=\"Length-of-Last-Words\"><a href=\"#Length-of-Last-Words\" class=\"headerlink\" title=\"Length of Last Words\"></a>Length of Last Words</h2><h2 id=\"Count-and-Say\"><a href=\"#Count-and-Say\" class=\"headerlink\" title=\"Count and Say\"></a>Count and Say</h2><hr>\n<p>【数据结构与算法】笔记相关链接：</p>\n<p>作者主页：<a href=\"http://www.yuanbin.me/\" target=\"_blank\" rel=\"external\">http://www.yuanbin.me/</a></p>\n<h2 id=\"项目Github地址：https-github-com-billryan-algorithm-exercise\"><a href=\"#项目Github地址：https-github-com-billryan-algorithm-exercise\" class=\"headerlink\" title=\"项目Github地址：https://github.com/billryan/algorithm-exercise\"></a>项目Github地址：<a href=\"https://github.com/billryan/algorithm-exercise\" target=\"_blank\" rel=\"external\">https://github.com/billryan/algorithm-exercise</a></h2>","categories":["Tech"],"tags":["Algorithm","DataStructure","Java","String"]},{"title":"软件工程开发的技术基础 学习笔记","url":"http://mutemeteor.com/2017/09/16/SE-note/","content":"<p>该学习笔记整理于南大软工教材《软件开发的技术基础-软件工程与计算（卷二）》。</p>\n<pre><code>最后更新时间：2017年9月27日\n</code></pre><hr>\n<h1 id=\"软件工程概论\"><a href=\"#软件工程概论\" class=\"headerlink\" title=\"软件工程概论\"></a>软件工程概论</h1><h2 id=\"软件的核心是程序\"><a href=\"#软件的核心是程序\" class=\"headerlink\" title=\"软件的核心是程序\"></a>软件的核心是程序</h2><p>软件以程序代码为核心，由三个部分组成：</p>\n<ul>\n<li>程序，机器指令的集合</li>\n<li>文档，描述程序操作与使用的文档</li>\n<li>数据，程序运行时需要使用的信息</li>\n</ul>\n<h2 id=\"软件工程\"><a href=\"#软件工程\" class=\"headerlink\" title=\"软件工程\"></a>软件工程</h2><p><strong>定义（重点）</strong></p>\n<ol>\n<li><strong>应用系统的、规范的、可量化的方法来开发、运行和维护软件，即将工程应用到软件。</strong></li>\n<li><strong>对 1 中各种方法的研究。</strong></li>\n</ol>\n<h2 id=\"软件工程是一种工程活动\"><a href=\"#软件工程是一种工程活动\" class=\"headerlink\" title=\"软件工程是一种工程活动\"></a>软件工程是一种工程活动</h2><p>具备所有工程学科共有的特性：</p>\n<ul>\n<li>具有解决实际问题的动机</li>\n<li>应用科学知识知指导工程活动</li>\n<li>以成本效益比有效为基本条件</li>\n<li>构建机器或事物</li>\n<li>以服务人类为最终目的</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"软件工程的动机\"><a href=\"#软件工程的动机\" class=\"headerlink\" title=\"软件工程的动机\"></a>软件工程的动机</h2><ul>\n<li>软件工程要解决的实际问题可能是模糊的，而且通常都是模糊的，这就要求软件工程师在构建软件之前要花大力气澄清解决问题，明确项目目标。</li>\n</ul>\n<h2 id=\"软件工程知识域\"><a href=\"#软件工程知识域\" class=\"headerlink\" title=\"软件工程知识域\"></a>软件工程知识域</h2><ol>\n<li>软件技术知识域:<ul>\n<li>软件需求</li>\n<li>软件设计</li>\n<li>软件构造</li>\n<li>软件测试</li>\n<li>软件维护</li>\n</ul>\n</li>\n<li>软件管理知识域:<ul>\n<li>软件配置管理</li>\n<li>软件工程管理</li>\n<li>软件工程过程</li>\n<li>软件工程工具与方法</li>\n<li>软件质量</li>\n<li>相关学科知识域</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"软件开发活动\"><a href=\"#软件开发活动\" class=\"headerlink\" title=\"软件开发活动\"></a>软件开发活动</h2><ul>\n<li>需求开发<ul>\n<li>探索并明确描述现实世界信息</li>\n<li>探索并定义问题</li>\n<li>建立软件系统的解决方案</li>\n</ul>\n</li>\n<li>软件设计<ul>\n<li>软件体系结构设计，确定系统的高层结构</li>\n<li>详细设计，将高层结构的部件设计为更为详细有效的模块与类，定义模块与类的功能以及它们的借口</li>\n<li>人机交互设计</li>\n</ul>\n</li>\n<li>软件测构造<ul>\n<li>程序设计，以“数据结构+算法”的方式继续深化软件构建基本单位（模块或者类）的设计</li>\n<li>编程，将程序设计方案映射为代码</li>\n<li>调试</li>\n</ul>\n</li>\n<li>软件测试<ul>\n<li>技术上保证产品质量合格</li>\n<li>需求上符合规格</li>\n</ul>\n</li>\n<li>软件交付与维护<ul>\n<li>安装与部署软件系统</li>\n<li>培训用户使用软件并提供文档支持</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"项目启动\"><a href=\"#项目启动\" class=\"headerlink\" title=\"项目启动\"></a>项目启动</h1><h2 id=\"项目管理基础\"><a href=\"#项目管理基础\" class=\"headerlink\" title=\"项目管理基础\"></a>项目管理基础</h2><h3 id=\"团队的特征\"><a href=\"#团队的特征\" class=\"headerlink\" title=\"团队的特征\"></a>团队的特征</h3><ul>\n<li>团队成员要具备共同的目标</li>\n<li>团队成员要共担责任</li>\n<li>团队成员要技能互补</li>\n<li>团队是小规模团体</li>\n<li>团队内部要有一个明确的结构</li>\n</ul>\n<h3 id=\"团队结构\"><a href=\"#团队结构\" class=\"headerlink\" title=\"团队结构\"></a>团队结构</h3><ul>\n<li>主程序员团队</li>\n<li>民主团队</li>\n<li>开放团队</li>\n</ul>\n<h3 id=\"团队建设\"><a href=\"#团队建设\" class=\"headerlink\" title=\"团队建设\"></a>团队建设</h3><ul>\n<li>建立团队章程</li>\n<li>持续成功</li>\n<li>和谐沟通</li>\n<li>避免团队杀手</li>\n</ul>\n<h3 id=\"软件质量\"><a href=\"#软件质量\" class=\"headerlink\" title=\"软件质量\"></a>软件质量</h3><p>IEEE1061-1992,1998的质量模型：</p>\n<ul>\n<li>功能性</li>\n<li>可靠性</li>\n<li>易用性</li>\n<li>效率</li>\n<li>可维护性</li>\n<li>可移植性</li>\n</ul>\n<h3 id=\"评审（peer-review）\"><a href=\"#评审（peer-review）\" class=\"headerlink\" title=\"评审（peer review）\"></a>评审（peer review）</h3><ul>\n<li>planning</li>\n<li>overview</li>\n<li>preparation</li>\n<li>inspection meeting</li>\n<li>rework</li>\n<li>follow-up</li>\n</ul>\n<h3 id=\"质量度量-metric\"><a href=\"#质量度量-metric\" class=\"headerlink\" title=\"质量度量(metric)\"></a>质量度量(metric)</h3><ul>\n<li>用数字量化的方式描述软件产品。</li>\n<li>基于所有对象的代码行数测度可以建立平均代码行数/最大代码行数/最小代码行数等多个度量。</li>\n</ul>\n<h2 id=\"软件配置管理\"><a href=\"#软件配置管理\" class=\"headerlink\" title=\"软件配置管理\"></a>软件配置管理</h2><h3 id=\"配置管理动机\"><a href=\"#配置管理动机\" class=\"headerlink\" title=\"配置管理动机\"></a>配置管理动机</h3><ul>\n<li>配置管理的定义：用技术的和管理的指导和监督方法，来标识和说明配置项的功能和物理特征，控制对这些特征的变更，记录和报告变更处理及其实现状态，并验证与需求规格的一致性。</li>\n</ul>\n<h3 id=\"配置项\"><a href=\"#配置项\" class=\"headerlink\" title=\"配置项\"></a>配置项</h3><ul>\n<li>配置项的定义：置于软件配置管理之下的软件配置的各种相关项目，包括各种管理文档、评审记录与文档、软件文档、源代码及可执行代码、运行所需的系统软件和支持软件及有关数据等。</li>\n</ul>\n<h3 id=\"基线\"><a href=\"#基线\" class=\"headerlink\" title=\"基线\"></a>基线</h3><ul>\n<li>基线的建立意味着一个里程碑，标志着产生基线制品活动的成功结束而后续协同开发活动的开始。</li>\n<li>基线的定义：已经经过正式评审的规格说明或制品，可以作为进一步开发的基础，并且只有通过正式的变更控制过程才能变更。</li>\n</ul>\n<h3 id=\"配置管理活动\"><a href=\"#配置管理活动\" class=\"headerlink\" title=\"配置管理活动\"></a>配置管理活动</h3><ul>\n<li>标识配置项</li>\n<li>版本管理</li>\n<li>变更控制</li>\n<li>配置审计</li>\n<li>状态报告</li>\n<li>软件发布管理</li>\n</ul>\n<hr>\n<h1 id=\"需求开发阶段\"><a href=\"#需求开发阶段\" class=\"headerlink\" title=\"需求开发阶段\"></a>需求开发阶段</h1><h2 id=\"软件需求基础\"><a href=\"#软件需求基础\" class=\"headerlink\" title=\"软件需求基础\"></a>软件需求基础</h2><h3 id=\"需求工程简介\"><a href=\"#需求工程简介\" class=\"headerlink\" title=\"需求工程简介\"></a>需求工程简介</h3><ul>\n<li><strong>需求工程</strong> 就是所有需求处理活动的总和，它收集信息、分析问题、整合观点、记录需求并验证其正确性，最终描述出软件被应用后与其环境互动形成的期望效应。</li>\n</ul>\n<h3 id=\"需求工程活动\"><a href=\"#需求工程活动\" class=\"headerlink\" title=\"需求工程活动\"></a>需求工程活动</h3><ul>\n<li>需求开发<ul>\n<li>需求获取</li>\n<li>需求分析</li>\n<li>需求规格说明</li>\n<li>需求验证</li>\n</ul>\n</li>\n<li>需求管理</li>\n<li>需求获取</li>\n<li>需求分析</li>\n<li>需求规格说明</li>\n<li>需求验证</li>\n<li>需求管理</li>\n</ul>\n<h3 id=\"需求基础\"><a href=\"#需求基础\" class=\"headerlink\" title=\"需求基础\"></a>需求基础</h3><ul>\n<li>需求</li>\n<li>需求的层次性</li>\n<li>结合层次性的需求开发</li>\n<li>区分需求、问题域与规格说明</li>\n</ul>\n<h3 id=\"需求分类\"><a href=\"#需求分类\" class=\"headerlink\" title=\"需求分类\"></a>需求分类</h3><h4 id=\"需求谱系\"><a href=\"#需求谱系\" class=\"headerlink\" title=\"需求谱系\"></a>需求谱系</h4><h4 id=\"软件需求的分类\"><a href=\"#软件需求的分类\" class=\"headerlink\" title=\"软件需求的分类\"></a>软件需求的分类</h4><hr>\n<h2 id=\"需求分析方法\"><a href=\"#需求分析方法\" class=\"headerlink\" title=\"需求分析方法\"></a>需求分析方法</h2><h3 id=\"需求分析基础\"><a href=\"#需求分析基础\" class=\"headerlink\" title=\"需求分析基础\"></a>需求分析基础</h3><p>6.1.1 需求分析的原因<br>6.1.2 需求分析模型</p>\n<h3 id=\"结构化分析\"><a href=\"#结构化分析\" class=\"headerlink\" title=\"结构化分析\"></a>结构化分析</h3><p>6.2.1 结构化分析方法<br>6.2.2 数据流图<br>6.2.3 实体关系图</p>\n<h3 id=\"面向对象分析\"><a href=\"#面向对象分析\" class=\"headerlink\" title=\"面向对象分析\"></a>面向对象分析</h3><p>6.3.1 面向对象分析方法<br>6.3.2 用例<br>6.3.3 用例图<br>6.3.4 用例描述<br>6.3.5 概念类图（领域模型）<br>6.3.6 交互图（顺序图）<br>6.3.7 状态图</p>\n<h3 id=\"使用需求分析方法细化和明确需求\"><a href=\"#使用需求分析方法细化和明确需求\" class=\"headerlink\" title=\"使用需求分析方法细化和明确需求\"></a>使用需求分析方法细化和明确需求</h3><p>6.4.1 细化和明确需求内容<br>6.4.2 建立系统级需求</p>\n<hr>\n<h2 id=\"需求文档化与验证\"><a href=\"#需求文档化与验证\" class=\"headerlink\" title=\"需求文档化与验证\"></a>需求文档化与验证</h2><h3 id=\"文档化的原因\"><a href=\"#文档化的原因\" class=\"headerlink\" title=\"文档化的原因\"></a>文档化的原因</h3><h3 id=\"需求文档基础\"><a href=\"#需求文档基础\" class=\"headerlink\" title=\"需求文档基础\"></a>需求文档基础</h3><p>7.2.1 需求文档的交流对象<br>7.2.2 用例文档<br>7.2.3 软件需求规格说明文档</p>\n<h3 id=\"需求文档化要点\"><a href=\"#需求文档化要点\" class=\"headerlink\" title=\"需求文档化要点\"></a>需求文档化要点</h3><p>7.3.1 技术文档写作要点<br>7.3.2 需求书写要点<br>7.3.3 软件需求规格说明文档书写要点</p>\n<h3 id=\"评审软件需求规格说明文档\"><a href=\"#评审软件需求规格说明文档\" class=\"headerlink\" title=\"评审软件需求规格说明文档\"></a>评审软件需求规格说明文档</h3><p>7.4.1 需求验证与确认<br>7.4.2 评审需求的注意事项</p>\n<h3 id=\"以需求为基础开发系统测试用例\"><a href=\"#以需求为基础开发系统测试用例\" class=\"headerlink\" title=\"以需求为基础开发系统测试用例\"></a>以需求为基础开发系统测试用例</h3><p>7.5.1 开发测试用例套件<br>7.5.2 开发测试用例</p>\n<h3 id=\"度量需求\"><a href=\"#度量需求\" class=\"headerlink\" title=\"度量需求\"></a>度量需求</h3><h3 id=\"将需求制品纳入配置管理\"><a href=\"#将需求制品纳入配置管理\" class=\"headerlink\" title=\"将需求制品纳入配置管理\"></a>将需求制品纳入配置管理</h3><hr>\n<h1 id=\"软件设计\"><a href=\"#软件设计\" class=\"headerlink\" title=\"软件设计\"></a>软件设计</h1><h2 id=\"软件设计基础\"><a href=\"#软件设计基础\" class=\"headerlink\" title=\"软件设计基础\"></a>软件设计基础</h2><h3 id=\"软件设计思想的发展\"><a href=\"#软件设计思想的发展\" class=\"headerlink\" title=\"软件设计思想的发展\"></a>软件设计思想的发展</h3><ul>\n<li>1985： “software”一词出现。当时为面向语句编程，所有数据都是全局的。</li>\n<li>20世纪60年代中后期到70年代中期：语句层次 → 函数层次，主要进行“函数”和“过程”的设计。</li>\n<li>20世纪中期后期开始到90年代：函数 → 模块，开始进行高质量的软件设计。</li>\n<li>20世纪90年代之后：”大规模软件设计”年代</li>\n<li>2000年年初至今：以重视体系结构/设计建模、重构等为代表的最佳设计实践方式被广泛应用。</li>\n</ul>\n<h3 id=\"软件设计的核心思想\"><a href=\"#软件设计的核心思想\" class=\"headerlink\" title=\"软件设计的核心思想\"></a>软件设计的核心思想</h3><p>分解（decomposition）和 抽象（abstraction）</p>\n<h3 id=\"理解软件设计\"><a href=\"#理解软件设计\" class=\"headerlink\" title=\"理解软件设计\"></a>理解软件设计</h3><p>8.3.1 设计与软件设计<br>8.3.2 工程设计与艺术设计<br>8.3.3 理性主义和经验主义<br>8.3.4 软件设计的演化性<br>8.3.5 软件设计的决策性<br>8.3.6 软件设计的约束满足和多样性</p>\n<h3 id=\"软件设计的分层\"><a href=\"#软件设计的分层\" class=\"headerlink\" title=\"软件设计的分层\"></a>软件设计的分层</h3><h3 id=\"软件设计过程的主要活动\"><a href=\"#软件设计过程的主要活动\" class=\"headerlink\" title=\"软件设计过程的主要活动\"></a>软件设计过程的主要活动</h3><h3 id=\"软件设计的方法和模型\"><a href=\"#软件设计的方法和模型\" class=\"headerlink\" title=\"软件设计的方法和模型\"></a>软件设计的方法和模型</h3><p>8.6.1 软件设计的方法<br>8.6.2 软件设计的模型</p>\n<h3 id=\"软件设计描述\"><a href=\"#软件设计描述\" class=\"headerlink\" title=\"软件设计描述\"></a>软件设计描述</h3><p>8.7.1 设计视图和设计图<br>8.7.2 设计视角和设计关注<br>8.7.3 需求和涉众<br>8.7.4 设计理由<br>8.7.5 设计描述的模板</p>\n<h2 id=\"8-7-6-软件设计文档书写要点\"><a href=\"#8-7-6-软件设计文档书写要点\" class=\"headerlink\" title=\"8.7.6 软件设计文档书写要点\"></a>8.7.6 软件设计文档书写要点</h2><h2 id=\"软件体系结构基础\"><a href=\"#软件体系结构基础\" class=\"headerlink\" title=\"软件体系结构基础\"></a>软件体系结构基础</h2><h3 id=\"理解软件体系结构\"><a href=\"#理解软件体系结构\" class=\"headerlink\" title=\"理解软件体系结构\"></a>理解软件体系结构</h3><p>定义<br>软件体系结构 = {部件，连接件，配置}</p>\n<h4 id=\"部件\"><a href=\"#部件\" class=\"headerlink\" title=\"部件\"></a>部件</h4><p>分为 原始 和 复合 两种类型。<br>原始类型常用的软件实现机制：</p>\n<ul>\n<li>模块</li>\n<li>层</li>\n<li>文件</li>\n<li>数据库</li>\n<li>进程</li>\n<li>物理单元</li>\n</ul>\n<h4 id=\"连接件\"><a href=\"#连接件\" class=\"headerlink\" title=\"连接件\"></a>连接件</h4><p>同样分为 原始 和 复合 两种类型。<br>原始类型常用的软件实现机制：</p>\n<ul>\n<li>隐式（程序调用、共享变量、消息、管道、事件、远程过程调用、网络协议、数据库访问协议）</li>\n<li>显示（适配器、委托、中介）</li>\n</ul>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>将部件和连接件整合起来，构成系统整体结构的一种专门机制。<br>用 体系结构描述语言 表达配置。</p>\n<h3 id=\"体系结构风格初步\"><a href=\"#体系结构风格初步\" class=\"headerlink\" title=\"体系结构风格初步\"></a>体系结构风格初步</h3><h4 id=\"主程序-子程序\"><a href=\"#主程序-子程序\" class=\"headerlink\" title=\"主程序/子程序\"></a>主程序/子程序</h4><p>主程序是系统的控制器，负责调度子程序的执行。各个子程序又是一个局部控制器，负责调度其子子程序执行。</p>\n<ul>\n<li>基于声明-使用（程序调用）关系建立连接件。</li>\n<li>主要实现机制：模块实现。</li>\n<li>优点：<ol>\n<li>流程清晰，易于理解。</li>\n<li>强控制性。（更能控制程序的正确性。）</li>\n</ol>\n</li>\n<li>缺点：<ol>\n<li>程序调用是一种强耦合的连接方式，非常依赖交互方的接口规格，这会使系统难以修改和复用。</li>\n<li>程序调用的连接方式限制了各个部件之间的数据交互，可能会使不同部件使用隐含的共享数据交流产生不必要的公共耦合，进而破坏它的“正确性”控制能力。</li>\n</ol>\n</li>\n<li>应用： 主要用于能够将系统功能依层次分解为多个顺序执行步骤的系统。</li>\n</ul>\n<h4 id=\"面向对象式\"><a href=\"#面向对象式\" class=\"headerlink\" title=\"面向对象式\"></a>面向对象式</h4><p>面向对象式风格将系统组织为多个独立的对象，每个对象封装其内部数据，并基于数据对外提供服务。不同对象之间通过协作机制共同完成系统任务。</p>\n<ul>\n<li>基于方法调用机制建立连接件。每个对象都是一个自治单位。</li>\n<li>主要实现机制：模块实现。</li>\n<li>优点：<ol>\n<li>内部实现的可修改性。</li>\n<li>易开发、易理解、易复用的结构组织。</li>\n</ol>\n</li>\n<li>缺点：<ol>\n<li>接口的耦合性。</li>\n<li>标识的耦合性。</li>\n<li>副作用。更难实现程序的“正确性”。</li>\n</ol>\n</li>\n<li>应用： 适用于能够基于数据信息分解和组织的软件系统，其能够标识和保护相关的数据信息；能够将数据信息和相关操作联系起来，进行封装。</li>\n</ul>\n<h4 id=\"分层\"><a href=\"#分层\" class=\"headerlink\" title=\"分层\"></a>分层</h4><p>根据不同的抽象层次，将系统组织为层次式结构。每个层次被建立为一个部件，不同部件之间通常用程序调用方式进行连接。</p>\n<ul>\n<li>基于方法调用机制建立连接件。</li>\n<li>优点：<ol>\n<li>设计机制清晰，易于理解。</li>\n<li>支持并行开发。</li>\n<li>更好的复用性和可修改性。</li>\n</ol>\n</li>\n<li>缺点：<ol>\n<li>交互协议难以修改。</li>\n<li>性能损失。</li>\n<li>难以确定层次数量和粒度。</li>\n</ol>\n</li>\n<li>应用： 主要功能是能在不同抽象层次上进行任务分解的复杂处理；能够建立不同抽象层次之间稳定的交互协议；能够容许稍许的延迟。  </li>\n</ul>\n<h4 id=\"MVC\"><a href=\"#MVC\" class=\"headerlink\" title=\"MVC\"></a>MVC</h4><p>模型-视图-控制（Model-View-Control，MVC）。</p>\n<ul>\n<li>优点：<ol>\n<li>易开发性。</li>\n<li>视图和控制的可修改性。</li>\n<li>适宜于网络系统开发的特征。</li>\n</ol>\n</li>\n<li>缺点：<ol>\n<li>复杂性。</li>\n<li>模型修改困难。</li>\n</ol>\n</li>\n<li>应用：主要用于网络系统的开发。如Web网页。</li>\n</ul>\n<hr>\n<h2 id=\"软件体系结构设计与构建\"><a href=\"#软件体系结构设计与构建\" class=\"headerlink\" title=\"软件体系结构设计与构建\"></a>软件体系结构设计与构建</h2><h3 id=\"体系结构设计过程\"><a href=\"#体系结构设计过程\" class=\"headerlink\" title=\"体系结构设计过程\"></a>体系结构设计过程</h3><h4 id=\"分析关键需求和项目约束\"><a href=\"#分析关键需求和项目约束\" class=\"headerlink\" title=\"分析关键需求和项目约束\"></a>分析关键需求和项目约束</h4><ol>\n<li>关键需求：<ul>\n<li>概要功能需求</li>\n<li>非概要功能需求（质量、性质、约束、接口）</li>\n</ul>\n</li>\n<li>项目约束：开发技术、环境、团队，项目预算、进度、风险，市场大小等等。</li>\n</ol>\n<h4 id=\"选择体系结构风格\"><a href=\"#选择体系结构风格\" class=\"headerlink\" title=\"选择体系结构风格\"></a>选择体系结构风格</h4><p>不同的风格有不同的特点，选择依据是风格的特点是否能与关键需求和项目约束相兼容。如，需要基于Web开发，更偏向Web应用的MVC风格就是选择之一；系统对实时性要求不高，对修改性和灵活性要求比较高，分层风格（展示层、逻辑层、数据层）可能就更合适。</p>\n<p>选择了体系结构风格，可以用UML包图来描述。</p>\n<h4 id=\"软件体系结构逻辑设计\"><a href=\"#软件体系结构逻辑设计\" class=\"headerlink\" title=\"软件体系结构逻辑设计\"></a>软件体系结构逻辑设计</h4><ol>\n<li>依据概要功能需求与体系结构风格建立初始设计</li>\n<li>使用非功能性需求与项目约束评价和改进进行初始设计</li>\n</ol>\n<h4 id=\"软件体系结构实现\"><a href=\"#软件体系结构实现\" class=\"headerlink\" title=\"软件体系结构实现\"></a>软件体系结构实现</h4><ol>\n<li>开发包（构件）设计</li>\n<li>运行时的进程</li>\n<li>物理部署</li>\n</ol>\n<h4 id=\"完善软件体系结构设计\"><a href=\"#完善软件体系结构设计\" class=\"headerlink\" title=\"完善软件体系结构设计\"></a>完善软件体系结构设计</h4><p>在完成软件体系结构设计的实现方案之后，往往还需要对其进行完善和细化。例如添加辅助构件以完成系统的特殊功能。</p>\n<h4 id=\"定义构件接口\"><a href=\"#定义构件接口\" class=\"headerlink\" title=\"定义构件接口\"></a>定义构件接口</h4><p>在完成软件体系结构设计之后，要定义构件之间的接口，这是进行软件体系结构设计文档化和交流的必要手段。</p>\n<h3 id=\"体系结构的原型构建\"><a href=\"#体系结构的原型构建\" class=\"headerlink\" title=\"体系结构的原型构建\"></a>体系结构的原型构建</h3><h4 id=\"包的创建\"><a href=\"#包的创建\" class=\"headerlink\" title=\"包的创建\"></a>包的创建</h4><p>包是用于将系统组织成层次结构的机制，可以根据构件设计来创建项目的包。</p>\n<h4 id=\"重要文件的创建\"><a href=\"#重要文件的创建\" class=\"headerlink\" title=\"重要文件的创建\"></a>重要文件的创建</h4><p>包含类源文件，接口源文件，数据文件，项目配置文件，构建配置文件等。</p>\n<h4 id=\"定义构件之间的接口\"><a href=\"#定义构件之间的接口\" class=\"headerlink\" title=\"定义构件之间的接口\"></a>定义构件之间的接口</h4><p>在包和文件定义之后，着力开始定义构件之间的接口。</p>\n<h4 id=\"关键需求的实现\"><a href=\"#关键需求的实现\" class=\"headerlink\" title=\"关键需求的实现\"></a>关键需求的实现</h4><p>端到端实现需求。</p>\n<h3 id=\"体系结构集成与测试\"><a href=\"#体系结构集成与测试\" class=\"headerlink\" title=\"体系结构集成与测试\"></a>体系结构集成与测试</h3><h4 id=\"集成的策略\"><a href=\"#集成的策略\" class=\"headerlink\" title=\"集成的策略\"></a>集成的策略</h4><ol>\n<li>大爆炸集成</li>\n<li>增量式集成<ul>\n<li>自顶向下式</li>\n<li>自底向上式</li>\n<li>三明治式</li>\n<li>持续集成</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"桩、驱动与集成测试用例\"><a href=\"#桩、驱动与集成测试用例\" class=\"headerlink\" title=\"桩、驱动与集成测试用例\"></a>桩、驱动与集成测试用例</h4><p>桩是在软件测试中用来替换某些模块的。桩一般和所替代的模块有相同的接口，并且模拟地实现了模块的行为。</p>\n<p>桩模仿的是下层模块，用来测试上层；而驱动则模仿的是上层模块，来测试下层。</p>\n<h3 id=\"软件体系结构设计文档描述\"><a href=\"#软件体系结构设计文档描述\" class=\"headerlink\" title=\"软件体系结构设计文档描述\"></a>软件体系结构设计文档描述</h3><h3 id=\"体系结构评审\"><a href=\"#体系结构评审\" class=\"headerlink\" title=\"体系结构评审\"></a>体系结构评审</h3><hr>\n<h2 id=\"人机交互设计\"><a href=\"#人机交互设计\" class=\"headerlink\" title=\"人机交互设计\"></a>人机交互设计</h2><h3 id=\"人机交互设计的目标\"><a href=\"#人机交互设计的目标\" class=\"headerlink\" title=\"人机交互设计的目标\"></a>人机交互设计的目标</h3><h3 id=\"人机交互设计的人类因素\"><a href=\"#人机交互设计的人类因素\" class=\"headerlink\" title=\"人机交互设计的人类因素\"></a>人机交互设计的人类因素</h3><h4 id=\"精神模型\"><a href=\"#精神模型\" class=\"headerlink\" title=\"精神模型\"></a>精神模型</h4><h4 id=\"差异性\"><a href=\"#差异性\" class=\"headerlink\" title=\"差异性\"></a>差异性</h4><h3 id=\"人机交互设计的计算机因素\"><a href=\"#人机交互设计的计算机因素\" class=\"headerlink\" title=\"人机交互设计的计算机因素\"></a>人机交互设计的计算机因素</h3><h4 id=\"可视化设计\"><a href=\"#可视化设计\" class=\"headerlink\" title=\"可视化设计\"></a>可视化设计</h4><h4 id=\"常见界面类型\"><a href=\"#常见界面类型\" class=\"headerlink\" title=\"常见界面类型\"></a>常见界面类型</h4><h3 id=\"人机交互设计的交互性\"><a href=\"#人机交互设计的交互性\" class=\"headerlink\" title=\"人机交互设计的交互性\"></a>人机交互设计的交互性</h3><h4 id=\"导航\"><a href=\"#导航\" class=\"headerlink\" title=\"导航\"></a>导航</h4><h4 id=\"反馈\"><a href=\"#反馈\" class=\"headerlink\" title=\"反馈\"></a>反馈</h4><h4 id=\"一些人机交互设计原则\"><a href=\"#一些人机交互设计原则\" class=\"headerlink\" title=\"一些人机交互设计原则\"></a>一些人机交互设计原则</h4><h3 id=\"人机交互设计过程\"><a href=\"#人机交互设计过程\" class=\"headerlink\" title=\"人机交互设计过程\"></a>人机交互设计过程</h3><h4 id=\"基本过程\"><a href=\"#基本过程\" class=\"headerlink\" title=\"基本过程\"></a>基本过程</h4><h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><hr>\n<h2 id=\"详细设计的基础\"><a href=\"#详细设计的基础\" class=\"headerlink\" title=\"详细设计的基础\"></a>详细设计的基础</h2><h3 id=\"详细设计概述\"><a href=\"#详细设计概述\" class=\"headerlink\" title=\"详细设计概述\"></a>详细设计概述</h3><h4 id=\"详细设计出发点\"><a href=\"#详细设计出发点\" class=\"headerlink\" title=\"详细设计出发点\"></a>详细设计出发点</h4><h4 id=\"详细设计的上下文\"><a href=\"#详细设计的上下文\" class=\"headerlink\" title=\"详细设计的上下文\"></a>详细设计的上下文</h4><h3 id=\"结构化设计\"><a href=\"#结构化设计\" class=\"headerlink\" title=\"结构化设计\"></a>结构化设计</h3><h4 id=\"结构化设计的思想\"><a href=\"#结构化设计的思想\" class=\"headerlink\" title=\"结构化设计的思想\"></a>结构化设计的思想</h4><h4 id=\"结构化设计的过程\"><a href=\"#结构化设计的过程\" class=\"headerlink\" title=\"结构化设计的过程\"></a>结构化设计的过程</h4><h3 id=\"面向对象设计\"><a href=\"#面向对象设计\" class=\"headerlink\" title=\"面向对象设计\"></a>面向对象设计</h3><h4 id=\"面向对象设计的思想\"><a href=\"#面向对象设计的思想\" class=\"headerlink\" title=\"面向对象设计的思想\"></a>面向对象设计的思想</h4><h4 id=\"面向对象设计的过程\"><a href=\"#面向对象设计的过程\" class=\"headerlink\" title=\"面向对象设计的过程\"></a>面向对象设计的过程</h4><h4 id=\"通过职责建立静态模型\"><a href=\"#通过职责建立静态模型\" class=\"headerlink\" title=\"通过职责建立静态模型\"></a>通过职责建立静态模型</h4><h4 id=\"通过协作建立动态模型\"><a href=\"#通过协作建立动态模型\" class=\"headerlink\" title=\"通过协作建立动态模型\"></a>通过协作建立动态模型</h4><h3 id=\"为类间协作开发集成测试用例\"><a href=\"#为类间协作开发集成测试用例\" class=\"headerlink\" title=\"为类间协作开发集成测试用例\"></a>为类间协作开发集成测试用例</h3><h3 id=\"详细设计文档描述\"><a href=\"#详细设计文档描述\" class=\"headerlink\" title=\"详细设计文档描述\"></a>详细设计文档描述</h3><h3 id=\"详细设计的评审\"><a href=\"#详细设计的评审\" class=\"headerlink\" title=\"详细设计的评审\"></a>详细设计的评审</h3><hr>\n<h2 id=\"详细设计中的模块化与信息隐藏\"><a href=\"#详细设计中的模块化与信息隐藏\" class=\"headerlink\" title=\"详细设计中的模块化与信息隐藏\"></a>详细设计中的模块化与信息隐藏</h2><h3 id=\"模块化与信息隐藏思想\"><a href=\"#模块化与信息隐藏思想\" class=\"headerlink\" title=\"模块化与信息隐藏思想\"></a>模块化与信息隐藏思想</h3><p>13.1.1 设计质量<br>13.1.2 模块化与信息隐藏思想的动机<br>13.1.3 模块化与信息隐藏思想的发展</p>\n<h3 id=\"模块化\"><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h3><p>13.2.1 分解与模块化<br>13.2.2 结构化设计中的耦合<br>13.2.3 结构化设计中的内聚<br>13.2.4 回顾：MSCS系统设计中的模块化思想</p>\n<h3 id=\"信息隐藏\"><a href=\"#信息隐藏\" class=\"headerlink\" title=\"信息隐藏\"></a>信息隐藏</h3><p>13.3.1 抽象与信息隐藏<br>13.3.2 信息与隐藏<br>13.3.3 模块说明</p>\n<h2 id=\"13-3-4-回顾：MSCS系统设计中的信息思想\"><a href=\"#13-3-4-回顾：MSCS系统设计中的信息思想\" class=\"headerlink\" title=\"13.3.4 回顾：MSCS系统设计中的信息思想\"></a>13.3.4 回顾：MSCS系统设计中的信息思想</h2><h2 id=\"详细设计中面向对象方法下的模块化\"><a href=\"#详细设计中面向对象方法下的模块化\" class=\"headerlink\" title=\"详细设计中面向对象方法下的模块化\"></a>详细设计中面向对象方法下的模块化</h2><h3 id=\"面向对象中的模块\"><a href=\"#面向对象中的模块\" class=\"headerlink\" title=\"面向对象中的模块\"></a>面向对象中的模块</h3><p>14.1.1 类<br>14.1.2 类之间的联系</p>\n<h3 id=\"访问耦合\"><a href=\"#访问耦合\" class=\"headerlink\" title=\"访问耦合\"></a>访问耦合</h3><p>14.2.1 访问耦合的分析<br>14.2.2 降低访问耦合的方法</p>\n<h3 id=\"继承耦合\"><a href=\"#继承耦合\" class=\"headerlink\" title=\"继承耦合\"></a>继承耦合</h3><p>14.3.1 继承耦合的分析<br>14.3.2 降低继承耦合的方法</p>\n<h3 id=\"内聚\"><a href=\"#内聚\" class=\"headerlink\" title=\"内聚\"></a>内聚</h3><p>14.4.1 面向对象中的内聚<br>14.4.2 提高内聚的方法</p>\n<h3 id=\"耦合与内聚的度量\"><a href=\"#耦合与内聚的度量\" class=\"headerlink\" title=\"耦合与内聚的度量\"></a>耦合与内聚的度量</h3><p>14.5.1 耦合的度量<br>14.5.2 内聚的度量</p>\n<hr>\n<h2 id=\"详细设计中面向对象方法下的信息隐藏\"><a href=\"#详细设计中面向对象方法下的信息隐藏\" class=\"headerlink\" title=\"详细设计中面向对象方法下的信息隐藏\"></a>详细设计中面向对象方法下的信息隐藏</h2><h3 id=\"封装类的职责\"><a href=\"#封装类的职责\" class=\"headerlink\" title=\"封装类的职责\"></a>封装类的职责</h3><p>15.1.1 类的职责<br>15.1.2 封装——分离接口与实现<br>15.1.3 封装实现细节</p>\n<h3 id=\"为变更而设计\"><a href=\"#为变更而设计\" class=\"headerlink\" title=\"为变更而设计\"></a>为变更而设计</h3><p>15.2.1 封装变更/开闭原则<br>15.2.2 多态<br>15.2.3 依赖倒置原则</p>\n<h2 id=\"15-2-4-总结\"><a href=\"#15-2-4-总结\" class=\"headerlink\" title=\"15.2.4 总结\"></a>15.2.4 总结</h2><h2 id=\"详细设计的设计模式\"><a href=\"#详细设计的设计模式\" class=\"headerlink\" title=\"详细设计的设计模式\"></a>详细设计的设计模式</h2><h3 id=\"设计模式基础\"><a href=\"#设计模式基础\" class=\"headerlink\" title=\"设计模式基础\"></a>设计模式基础</h3><h3 id=\"可修改性及其基本实现机制\"><a href=\"#可修改性及其基本实现机制\" class=\"headerlink\" title=\"可修改性及其基本实现机制\"></a>可修改性及其基本实现机制</h3><h3 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h3><p>16.3.1 典型问题<br>16.3.2 设计分析<br>16.3.3 解决方案<br>16.3.4 模式实例</p>\n<h3 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h3><p>16.4.1 典型问题<br>16.4.2 设计分析<br>16.4.3 解决方案<br>16.4.4 模式实例</p>\n<h3 id=\"单件模式\"><a href=\"#单件模式\" class=\"headerlink\" title=\"单件模式\"></a>单件模式</h3><p>16.5.1 典型问题<br>16.5.2 设计分析<br>16.5.3 解决方案<br>16.5.4 模式实例</p>\n<h3 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h3><p>16.6.1 典型问题<br>16.6.2 设计分析<br>16.6.3 解决方案</p>\n<h2 id=\"16-6-4-模式实例\"><a href=\"#16-6-4-模式实例\" class=\"headerlink\" title=\"16.6.4 模式实例\"></a>16.6.4 模式实例</h2><h1 id=\"软件构造、测试、交付与维护\"><a href=\"#软件构造、测试、交付与维护\" class=\"headerlink\" title=\"软件构造、测试、交付与维护\"></a>软件构造、测试、交付与维护</h1><h2 id=\"软件构造\"><a href=\"#软件构造\" class=\"headerlink\" title=\"软件构造\"></a>软件构造</h2><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>17.1.1 软件构造的定义<br>17.1.2 软件构造是设计的延续</p>\n<h3 id=\"软件构造活动\"><a href=\"#软件构造活动\" class=\"headerlink\" title=\"软件构造活动\"></a>软件构造活动</h3><p>17.2.1 详细设计<br>17.2.2 编程<br>17.2.3 测试<br>17.2.4 调试<br>17.2.5 代码评审<br>17.2.6 集成与构建<br>17.2.7 构造管理</p>\n<h3 id=\"软件构造实践方法\"><a href=\"#软件构造实践方法\" class=\"headerlink\" title=\"软件构造实践方法\"></a>软件构造实践方法</h3><p>17.3.1 重构<br>17.3.2 测试驱动开发<br>17.3.3 结对编程</p>\n<hr>\n<h2 id=\"代码设计\"><a href=\"#代码设计\" class=\"headerlink\" title=\"代码设计\"></a>代码设计</h2><h3 id=\"设计易读的代码\"><a href=\"#设计易读的代码\" class=\"headerlink\" title=\"设计易读的代码\"></a>设计易读的代码</h3><p>18.1.1 格式<br>18.1.2 命名<br>18.1.3 注释</p>\n<h3 id=\"设计易维护的代码\"><a href=\"#设计易维护的代码\" class=\"headerlink\" title=\"设计易维护的代码\"></a>设计易维护的代码</h3><p>18.2.1 小型任务<br>18.2.2 复杂决策<br>18.2.3 数据使用<br>18.2.4 明确依赖关系</p>\n<h3 id=\"设计可靠的代码\"><a href=\"#设计可靠的代码\" class=\"headerlink\" title=\"设计可靠的代码\"></a>设计可靠的代码</h3><p>18.3.1 契约式设计<br>18.3.2 防御式编程</p>\n<h3 id=\"使用模型辅助设计复杂代码\"><a href=\"#使用模型辅助设计复杂代码\" class=\"headerlink\" title=\"使用模型辅助设计复杂代码\"></a>使用模型辅助设计复杂代码</h3><p>18.4.1 决策表<br>18.4.2 伪代码<br>18.4.3 程序流程图</p>\n<h3 id=\"为代码开发单元测试用例\"><a href=\"#为代码开发单元测试用例\" class=\"headerlink\" title=\"为代码开发单元测试用例\"></a>为代码开发单元测试用例</h3><p>18.5.1 为方法开发测试用例<br>18.5.2 使用Mock Object测试类方法<br>18.5.3 为类开发测试用例</p>\n<h3 id=\"代码复杂度度量\"><a href=\"#代码复杂度度量\" class=\"headerlink\" title=\"代码复杂度度量\"></a>代码复杂度度量</h3><h3 id=\"问题代码\"><a href=\"#问题代码\" class=\"headerlink\" title=\"问题代码\"></a>问题代码</h3><hr>\n<h2 id=\"软件测试\"><a href=\"#软件测试\" class=\"headerlink\" title=\"软件测试\"></a>软件测试</h2><h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>19.1.1 验证与确认<br>19.1.2 软件测试的目标<br>19.1.3 测试用例<br>19.1.4 桩与驱动<br>19.1.5 缺陷、错误与失败</p>\n<h3 id=\"测试层次\"><a href=\"#测试层次\" class=\"headerlink\" title=\"测试层次\"></a>测试层次</h3><p>19.2.1 测试层次的划分<br>19.2.2 单元测试<br>19.2.3 集成测试<br>19.2.4 系统测试</p>\n<h3 id=\"测试技术\"><a href=\"#测试技术\" class=\"headerlink\" title=\"测试技术\"></a>测试技术</h3><p>19.3.1 测试用例的选择<br>19.3.2 随机测试<br>19.3.3 基于规格的技术——黑盒测试方法<br>19.3.4 基于代码的技术——白盒测试方法<br>19.3.5 特定测试技术</p>\n<h3 id=\"测试活动\"><a href=\"#测试活动\" class=\"headerlink\" title=\"测试活动\"></a>测试活动</h3><h3 id=\"测试度量\"><a href=\"#测试度量\" class=\"headerlink\" title=\"测试度量\"></a>测试度量</h3><hr>\n<h2 id=\"软件交付\"><a href=\"#软件交付\" class=\"headerlink\" title=\"软件交付\"></a>软件交付</h2><h3 id=\"安装与部署\"><a href=\"#安装与部署\" class=\"headerlink\" title=\"安装与部署\"></a>安装与部署</h3><p>20.1.1 安装<br>20.1.2 部署</p>\n<h3 id=\"培训与文档支持\"><a href=\"#培训与文档支持\" class=\"headerlink\" title=\"培训与文档支持\"></a>培训与文档支持</h3><p>20.2.1 培训<br>20.2.2 文档支持</p>\n<h3 id=\"项目评价\"><a href=\"#项目评价\" class=\"headerlink\" title=\"项目评价\"></a>项目评价</h3><p>20.3.1 项目评价的原因<br>20.3.2 项目评价的内容<br>20.3.3 项目评价的方法</p>\n<h2 id=\"20-3-4-注意事项\"><a href=\"#20-3-4-注意事项\" class=\"headerlink\" title=\"20.3.4 注意事项\"></a>20.3.4 注意事项</h2><h2 id=\"软件维护与演化\"><a href=\"#软件维护与演化\" class=\"headerlink\" title=\"软件维护与演化\"></a>软件维护与演化</h2><h3 id=\"软件维护\"><a href=\"#软件维护\" class=\"headerlink\" title=\"软件维护\"></a>软件维护</h3><p>21.1.1 软件可修改性与软件维护<br>21.1.2 软件维护的类型<br>21.1.3 软件维护的高代价性<br>21.1.4 开发可维护的软件<br>21.1.5 软件维护过程与活动</p>\n<h3 id=\"软件演化\"><a href=\"#软件演化\" class=\"headerlink\" title=\"软件演化\"></a>软件演化</h3><p>21.2.1 演化与维护<br>21.2.2 软件演化定律<br>21.2.3 软件演化生命周期模型与演化活动</p>\n<h3 id=\"软件维护与演化的常见技术\"><a href=\"#软件维护与演化的常见技术\" class=\"headerlink\" title=\"软件维护与演化的常见技术\"></a>软件维护与演化的常见技术</h3><p>21.3.1 遗留软件<br>21.3.2 逆向工程</p>\n<h2 id=\"21-3-3-再工程\"><a href=\"#21-3-3-再工程\" class=\"headerlink\" title=\"21.3.3 再工程\"></a>21.3.3 再工程</h2><h1 id=\"软件过程模型与职业基础\"><a href=\"#软件过程模型与职业基础\" class=\"headerlink\" title=\"软件过程模型与职业基础\"></a>软件过程模型与职业基础</h1><h2 id=\"软件开发过程模型\"><a href=\"#软件开发过程模型\" class=\"headerlink\" title=\"软件开发过程模型\"></a>软件开发过程模型</h2><h3 id=\"软件开发的典型阶段\"><a href=\"#软件开发的典型阶段\" class=\"headerlink\" title=\"软件开发的典型阶段\"></a>软件开发的典型阶段</h3><p>22.1.1 软件需求工程<br>22.1.2 软件设计<br>22.1.3 软件构造<br>22.1.4 软件测试<br>22.1.5 软件交付<br>22.1.6 软件维护</p>\n<h3 id=\"软件生命周期模型\"><a href=\"#软件生命周期模型\" class=\"headerlink\" title=\"软件生命周期模型\"></a>软件生命周期模型</h3><h3 id=\"软件过程模型（重点）\"><a href=\"#软件过程模型（重点）\" class=\"headerlink\" title=\"软件过程模型（重点）\"></a>软件过程模型（重点）</h3><p>软件生命周期模型知识界定了软件开发的不同阶段和阶段之间的顺序关系，软件过程模型则进一步详细说明各个阶段的任务、活动、对象及组织、控制过程。</p>\n<h4 id=\"构建-修复模型\"><a href=\"#构建-修复模型\" class=\"headerlink\" title=\"构建-修复模型\"></a>构建-修复模型</h4><p>构建-修复模型最早也是最自然产生的软件开发模型。缺陷很明显，甚至不能算一个软件过程模型。</p>\n<h4 id=\"瀑布模型\"><a href=\"#瀑布模型\" class=\"headerlink\" title=\"瀑布模型\"></a>瀑布模型</h4><ul>\n<li>20世纪70年代</li>\n<li>自上而下、相互衔接的次序，按照“从一个阶段到另一个阶段的有序序列转换”的方式来组织开发活动。</li>\n<li>允许活动出现反复和迭代。</li>\n<li>局限性：<ol>\n<li>对文档的过高期望。</li>\n<li>对开发活动的线性顺序假设。</li>\n<li>客户、用户参与不够。</li>\n<li>里程碑粒度过粗。</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"增量迭代模型\"><a href=\"#增量迭代模型\" class=\"headerlink\" title=\"增量迭代模型\"></a>增量迭代模型</h4><ul>\n<li>20世纪80年代</li>\n<li>需求驱动</li>\n<li>优点：<ol>\n<li>适用性强。</li>\n<li>并行开发可以帮助缩短软件产品的开发时间。</li>\n<li>渐进交付可以加强用户反馈，降低开发风险。</li>\n</ol>\n</li>\n<li>缺点：<ol>\n<li>各个构件是逐渐并入已有的软件体系结构中的，所以加入构件必须不破坏已构造好的系统部分，这需要软件具有开放式的体系结构。</li>\n<li>需要一个完备、清晰的项目前景和范围进行并行开发规划，但不定性太多，很难在项目开始就确定前景和范围。</li>\n</ol>\n</li>\n<li>适用于比较成熟稳定的领域。</li>\n</ul>\n<h4 id=\"演化模型\"><a href=\"#演化模型\" class=\"headerlink\" title=\"演化模型\"></a>演化模型</h4><ul>\n<li>需求驱动</li>\n<li>优点：<ol>\n<li>迭代式开发，适用性强。</li>\n<li>并行开发可以帮助缩短软件产品的开发时间。</li>\n<li>渐进交付可以加强用户反馈，降低开发风险。</li>\n</ol>\n</li>\n<li>缺点：<ol>\n<li>无法在项目早期阶段确定项目范围。</li>\n<li>容易让后续迭代蜕变为构建-修复方式。</li>\n</ol>\n</li>\n<li>主要用于需求变更比较频繁或不确定性比较多的领域。</li>\n</ul>\n<h4 id=\"原型模型\"><a href=\"#原型模型\" class=\"headerlink\" title=\"原型模型\"></a>原型模型</h4><h4 id=\"螺旋模型\"><a href=\"#螺旋模型\" class=\"headerlink\" title=\"螺旋模型\"></a>螺旋模型</h4><h4 id=\"Rational统一过程\"><a href=\"#Rational统一过程\" class=\"headerlink\" title=\"Rational统一过程\"></a>Rational统一过程</h4><h4 id=\"敏捷过程\"><a href=\"#敏捷过程\" class=\"headerlink\" title=\"敏捷过程\"></a>敏捷过程</h4><hr>\n","categories":["Tech"],"tags":["Notes","软件工程"]},{"title":"Java 学习笔记（三）","url":"http://mutemeteor.com/2017/09/10/java-note3/","content":"<p><strong>面向对象有三大特性：封装、继承、多态。</strong></p>\n<h1 id=\"Java-封装\"><a href=\"#Java-封装\" class=\"headerlink\" title=\"Java 封装\"></a>Java 封装</h1><h2 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h2><p>封装是指，一种将抽象性函式接口的实例细节部份包装、隐藏起来的方法。封装可以被认为是一个保护屏障，防止该类的代码和数据被外部类定义的代码随机访问。要访问该类的代码和数据，必须通过严格的接口控制，通过该类提供的方法来实现对隐藏信息的操作和访问。</p>\n<p>那这样的好处是什么呢？</p>\n<ol>\n<li><p>只能通过规定的方法访问数据。</p>\n</li>\n<li><p>隐藏类的实例细节，方便修改和实现。</p>\n</li>\n</ol>\n<p>我们在开汽车的时候，只用去关注如何开车，我们并不在意车子是如何实现的，这就是封装。</p>\n<p>如何去实现类的封装呢？</p>\n<ol>\n<li><p>修改属性的可见性，在属性的前面添加修饰符(private 后面会讲)</p>\n</li>\n<li><p>对每个值属性提供对外的公共方法访问，如创建 getter/setter（取值和赋值） 方法，用于对私有属性的访问</p>\n</li>\n<li><p>在 getter/setter 方法里加入属性的控制语句，例如我们可以加一个判断语句，对于非法输入给予否定。</p>\n<a id=\"more\"></a>\n</li>\n</ol>\n<h2 id=\"包\"><a href=\"#包\" class=\"headerlink\" title=\"包\"></a>包</h2><p>有时候在封装的时候会遇到这样的问题，就是我们的类名可能是重复的。为了更好地组织类，Java 提供了包机制，用于区别类名的命名空间。</p>\n<p>包的作用</p>\n<p>把功能相似或相关的类或接口组织在同一个包中，方便类的查找和使用。<br>包采用了树形目录的存储方式。同一个包中的类名字是不同的，不同的包中的类的名字是可以相同的，当同时调用两个不同包中相同类名的类时，应该加上包名加以区别。<br>包也限定了访问权限，拥有包访问权限的类才能访问某个包中的类。<br>我们在以前就学习过了如何定义一个包，我们使用package关键字，加上我们的包名。</p>\n<p>定义包语法：</p>\n<pre><code>package 包名\n//注意：必须放在源程序的第一行，包名可用&quot;.&quot;号隔开\n</code></pre><p>例如：</p>\n<pre><code>//我们在定义文件夹的时候利用&quot;/&quot;来区分层次\n//包中我们用&quot;.&quot;来分层\npackage com.test.Java\n不仅是我们这样利用包名来区分类，系统也是这样做的。\n</code></pre><h2 id=\"访问修饰符\"><a href=\"#访问修饰符\" class=\"headerlink\" title=\"访问修饰符\"></a>访问修饰符</h2><p><code>private</code>: 本类</p>\n<p><code>默认</code>：本类，同包</p>\n<p><code>protected</code>：本类，同包，子类</p>\n<p><code>public</code>：本类，同包，子类，其他</p>\n<h2 id=\"this关键字\"><a href=\"#this关键字\" class=\"headerlink\" title=\"this关键字\"></a>this关键字</h2><p><code>this</code>关键字代表当前对象。使用<code>this.属性</code>操作当前对象的属性，this.方法调用当前对象的方法。</p>\n<p>当我们封装对象属性的时候，经常会使用<code>this</code>关键字。</p>\n<h2 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h2><p>可以将一个类的定义放在另一个类的定义内部，这就是内部类。而包含内部类的类被称为外部类。</p>\n<p>内部类的主要作用如下：</p>\n<ol>\n<li><p>内部类提供了更好的封装，可以把内部类隐藏在外部类之内，不允许同一个包中的其他类访问该类</p>\n</li>\n<li><p>内部类的方法可以直接访问外部类的所有数据，包括私有的数据</p>\n</li>\n<li><p>内部类所实现的功能使用外部类同样可以实现，只是有时使用内部类更方便</p>\n</li>\n<li><p>内部类允许继承多个非接口类型</p>\n</li>\n</ol>\n<p>注：内部类是一个编译时的概念，一旦编译成功，就会成为完全不同的两类。对于一个名为outer的外部类和其内部定义的名为inner的内部类。编译完成后出现outer.class和outer$inner.class两类。所以内部类的成员变量/方法名可以和外部类的相同。</p>\n<h3 id=\"成员内部类\"><a href=\"#成员内部类\" class=\"headerlink\" title=\"成员内部类\"></a>成员内部类</h3><h3 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h3><h3 id=\"局部内部类\"><a href=\"#局部内部类\" class=\"headerlink\" title=\"局部内部类\"></a>局部内部类</h3><h3 id=\"匿名内部类\"><a href=\"#匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类</h3><h1 id=\"Java-继承\"><a href=\"#Java-继承\" class=\"headerlink\" title=\"Java 继承\"></a>Java 继承</h1><h2 id=\"继承的定义\"><a href=\"#继承的定义\" class=\"headerlink\" title=\"继承的定义\"></a>继承的定义</h2><p>继承可以看成是类与类之间的衍生关系。比如狗类是动物类，牧羊犬类又是狗类。于是我们可以说狗类继承了动物类，而牧羊犬类就继承了狗类。于是狗类就是动物类的子类（或派生类），动物类就是狗类的父类（或基类）。</p>\n<pre><code>class 子类 extends 父类\n</code></pre><p>例如我们定义了一个 Animal 类，我们在创建一个 Dog 类，我们需要它继承 Animal 类</p>\n<pre><code>class Dog extends Animal {\n    ...\n}\n\n为什么需要继承？\n</code></pre><p>如果有两个类相似，那么它们会有许多重复的代码，导致后果就是代码量大且臃肿，后期的维护性不高。通过继承就可以解决这个问题，将两段代码中相同的部分提取出来组成一个父类，实现代码的复用。</p>\n<p>继承的特点：</p>\n<ol>\n<li>子类拥有父类除private以外的所有属性和方法</li>\n<li>子类可以拥有自己的属性和方法</li>\n<li>子类可以重写实现父类的方法</li>\n<li>Java 中的继承是单继承，一个类只有一个父类</li>\n</ol>\n<p>注： Java 实现多继承的一个办法是 implements（实现）接口</p>\n<h2 id=\"方法的重写\"><a href=\"#方法的重写\" class=\"headerlink\" title=\"方法的重写\"></a>方法的重写</h2><p>虽然子类可以继承父类的方法，但如果子类对父类的方法不满意，想在里面加入适合自己的一些操作时，我们就需要将方法进行重写。并且子类在调用方法中，优先调用子类的方法。</p>\n<p>当然在方法重写时我们需要注意，重写的方法一定要与原父类的方法语法保持一致，比如返回值类型，参数类型及个数，和方法名都必须一致。</p>\n<h2 id=\"继承的初始化顺序\"><a href=\"#继承的初始化顺序\" class=\"headerlink\" title=\"继承的初始化顺序\"></a>继承的初始化顺序</h2><p>继承的初始化顺序是先初始化父类再初始化子类。</p>\n<p>注：<br><code>final</code>关键字可以修饰类、方法、属性和变量</p>\n<ol>\n<li><p><code>final</code> 修饰类，则该类不允许被继承，为最终类</p>\n</li>\n<li><p><code>final</code> 修饰方法，则该方法不允许被覆盖（重写）</p>\n</li>\n<li><p><code>final</code> 修饰属性：则该类的属性不会进行隐式的初始化（类的初始化属性必须有值）或在构造方法中赋值（但只能选其一）</p>\n</li>\n<li><p><code>final</code> 修饰变量，则该变量的值只能赋一次值，即变为常量</p>\n</li>\n</ol>\n<p><code>super</code>关键字在子类内部使用，代表父类对象。</p>\n<ol>\n<li><p>访问父类的属性 <code>super.属性名</code></p>\n</li>\n<li><p>访问父类的方法 <code>super.bark()</code></p>\n</li>\n<li><p>子类构造方法需要调用父类的构造方法时，在子类的构造方法体里最前面的位置：<code>super()</code></p>\n</li>\n</ol>\n<h1 id=\"Java-多态\"><a href=\"#Java-多态\" class=\"headerlink\" title=\"Java 多态\"></a>Java 多态</h1><p>多态是指允许不同类的对象对同一消息做出响应。即同一消息可以根据发送对象的不同而采用多种不同的行为方式。多态也称作动态绑定（dynamic binding），是指在执行期间判断所引用对象的实际类型，根据其实际的类型调用其相应的方法。</p>\n<p>通俗地讲，只通过父类就能够引用不同的子类，这就是多态，我们只有在运行的时候才会知道引用变量所指向的具体实例对象。</p>\n<h2 id=\"向上转型\"><a href=\"#向上转型\" class=\"headerlink\" title=\"向上转型\"></a>向上转型</h2><h2 id=\"多态的实现条件\"><a href=\"#多态的实现条件\" class=\"headerlink\" title=\"多态的实现条件\"></a>多态的实现条件</h2><p>Java 实现多态有三个必要条件：继承、重写和向上转型（即父类引用指向子类对象）。</p>\n<p>只有满足上述三个条件，我们才能够在同一个继承结构中使用统一的逻辑实现代码处理不同的对象，从而达到执行不同的行为。</p>\n<h2 id=\"多态的实现方法\"><a href=\"#多态的实现方法\" class=\"headerlink\" title=\"多态的实现方法\"></a>多态的实现方法</h2><p>Java中多态的实现方式：继承父类进行方法重写，抽象类和抽象方法，接口实现。</p>\n<h3 id=\"重写\"><a href=\"#重写\" class=\"headerlink\" title=\"重写\"></a>重写</h3><h3 id=\"抽象类和抽象方法\"><a href=\"#抽象类和抽象方法\" class=\"headerlink\" title=\"抽象类和抽象方法\"></a>抽象类和抽象方法</h3><p>Java提供了一个叫做抽象方法的机制，这种方法是不完整的，仅有声明而没有方法体。抽象方法声明语法如下：</p>\n<pre><code>abstract void f();  //f()方法时抽象方法\n</code></pre><p>而包含抽象方法的类叫做抽象类，抽象类在定义类时，前面会加abstract关键字。</p>\n<p>那我们什么时候会用到抽象类呢？</p>\n<p>在某些情况下，某个父类只是知道其子类应该包含怎样的方法，但无法准确知道这些子类如何实现这些方法。也就是说抽象类是约束子类必须要实现哪些方法，而并不关注方法如何去实现。</p>\n<p>从多个具有相同特征的类中抽象出一个抽象类，以这个抽象类作为子类的模板，从而避免了子类设计的随意性。</p>\n<p>所以由上可知，抽象类是限制规定子类必须实现某些方法，但不关注实现细节。</p>\n<p>那抽象类如何用代码实现呢，它的规则如下：</p>\n<ol>\n<li><p>用 abstract 修饰符定义抽象类</p>\n</li>\n<li><p>用 abstract 修饰符定义抽象方法，只用声明，不需要实现</p>\n</li>\n<li><p>包含抽象方法的类就是抽象类</p>\n</li>\n<li><p>抽象类中可以包含普通的方法，也可以没有抽象方法</p>\n</li>\n<li><p>抽象类的对象不能直接创建，我们通常是定义引用变量指向子类对象。</p>\n</li>\n</ol>\n<h3 id=\"接口实现\"><a href=\"#接口实现\" class=\"headerlink\" title=\"接口实现\"></a>接口实现</h3><p><code>abstract</code> 关键字允许人们在类中创建一个或多个没有任何定义的方法，而 interface 使抽象的概念更向前迈进了一步，它会产生一个完全抽象类，根本没有提供任何方法体。</p>\n<p>接口的声明语法格式如下：</p>\n<pre><code>修饰符 interface 接口名称 [extends 其他的类名] {\n        // 声明变量\n        // 抽象方法\n}\n</code></pre><p>如声明一个 Animal 接口：</p>\n<pre><code>interface Animal {\n        //int x;\n        //编译错误,x需要初始化，因为是 static final 类型\n        int y = 5;\n        public void eat();\n        public void travel();\n}\n</code></pre><p>注意：</p>\n<ul>\n<li>接口不能用于实例化对象</li>\n<li>接口中所有的方法是抽象方法</li>\n<li>接口成员是 <code>static final</code> 类型</li>\n<li>接口支持多继承`</li>\n</ul>\n<p>多继承实现方式：</p>\n<pre><code>修饰符 interface A extends 接口1，接口2{\n\n}\n\n修饰符 class A implements 接口1，接口2{\n\n}\n</code></pre><p>实现上面的接口：</p>\n<pre><code>public class Cat implements Animal{\n\n     public void eat(){\n         System.out.println(&quot;Cat eats&quot;);\n     }\n\n     public void travel(){\n         System.out.println(&quot;Cat travels&quot;);\n     }\n     public static void main(String[] args) {\n        Cat cat = new Cat();\n        cat.eat();\n        cat.travel();\n    }\n}\n</code></pre>","categories":["Tech"],"tags":["Notes","Java"]},{"title":"Java 学习笔记（二）","url":"http://mutemeteor.com/2017/09/10/java-note2/","content":"<h1 id=\"Java-数组\"><a href=\"#Java-数组\" class=\"headerlink\" title=\"Java 数组\"></a>Java 数组</h1><h2 id=\"数组的定义和初始化\"><a href=\"#数组的定义和初始化\" class=\"headerlink\" title=\"数组的定义和初始化\"></a>数组的定义和初始化</h2><p><strong>三步曲：声明 → 分配空间（new关键字） → 初始化</strong></p>\n<ol>\n<li>声明</li>\n</ol>\n<pre><code>数据类型[ ] 数组名;   //或者: 数据类型 数组名[ ];\n</code></pre><p>例如：</p>\n<pre><code>int ages[];      //存放年龄的数组，类型为整型\n\nchar symbol[];   //存放符号的数组，类型为字符型\n\nString [] name;  //存放名称的数组，类型为字符串型\n</code></pre><ol>\n<li>分配空间</li>\n</ol>\n<pre><code>数组名 = new  数据类型 [ 数组长度 ];\n</code></pre><ol>\n<li>初始化</li>\n</ol>\n<pre><code>int [] ages = {12,18,9,33,45,60}; //声明并初始化了一个整型数组，它有6个元素\n\nchar [] symbol = new char[10] //声明并分配了一个长度为10的char型数组\n</code></pre><a id=\"more\"></a>\n<h2 id=\"一维数组\"><a href=\"#一维数组\" class=\"headerlink\" title=\"一维数组\"></a>一维数组</h2><p>一维数组是由元素组成单纯的线性结构的数组，简单来理解就是一串元素。</p>\n<p>注意：</p>\n<ol>\n<li><p>数组下标从 0 开始。所以数组的下标范围是0 至 数组长度-1。</p>\n</li>\n<li><p>数组不能越界访问，否则会报错。</p>\n</li>\n</ol>\n<h2 id=\"二维数组\"><a href=\"#二维数组\" class=\"headerlink\" title=\"二维数组\"></a>二维数组</h2><p>二维数组可以看成是一间有座位的教室，每一个座位都有一个行和一个列的属性，一排的座位相当于一个一维数组，所以我们可以将二维数组简单的理解为是一种“特殊”的一维数组，它的每个数组空间中保存的是一个一维数组。</p>\n<p>二维数组也需要声明和分配空间。</p>\n<p>语法：</p>\n<pre><code>数据类型 [][] 数组名 = new 数据类型[行的个数][列的个数];\n\n//或者\n数据类型 [][] 数组名;\n数组名 = new 数据类型[行的个数][列的个数];\n\n//也可以\n数据类型 [][] 数组名 = {\n{第一行值1,第一行值2,...}\n{第二行值1,第二行值2,...}\n...\n}\n\n//二维数组的赋值和访问，跟一维数组类似，可以通过下标来逐个赋值和访问，注意索引从 0 开始\n数组名[行的索引][列的索引] = 值;\n</code></pre><h1 id=\"Java-方法\"><a href=\"#Java-方法\" class=\"headerlink\" title=\"Java 方法\"></a>Java 方法</h1><h2 id=\"方法的定义与语法规则\"><a href=\"#方法的定义与语法规则\" class=\"headerlink\" title=\"方法的定义与语法规则\"></a>方法的定义与语法规则</h2><p>Java中的方法，可以将其看成一个功能的集合，它们是为了解决特定问题的代码组合。比如司机会开车，老师会教书一样，不同的方法可以实现不同的功能。</p>\n<p>方法的定义语法：</p>\n<pre><code>访问修饰符 返回值类型 方法名(参数列表){\n    方法体\n}\n</code></pre><p>在上面的语法说明中：</p>\n<ol>\n<li><p>访问修饰符：代表方法允许被访问的权限范围， 可以是 public、protected、private 甚至可以省略 ，其中 public 表示该方法可以被其他任何代码调用，其他几种修饰符的使用我们会在后面章节中详细讲解。</p>\n</li>\n<li><p>返回值类型：方法返回值的类型，如果方法不返回任何值，则返回值类型指定为 void (代表无类型)；如果方法具有返回值，则需要指定返回值的类型，并且在方法体中使用 return 语句返回值。</p>\n</li>\n<li><p>方法名：是方法的名字，必须使用合法的标识符。</p>\n</li>\n<li><p>参数列表：是传递给方法的参数列表，参数可以有多个，多个参数间以逗号隔开，每个参数由参数类型和参数名组成，以空格隔开。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。</p>\n</li>\n<li><p>方法体：方法体包含具体的语句，定义该方法的功能。</p>\n</li>\n</ol>\n<p>根据方法是否带参、是否带返回值，可将方法分为四类：</p>\n<ul>\n<li>无参无返回值方法</li>\n<li>无参带返回值方法</li>\n<li>带参无返回值方法</li>\n<li>带参带返回值方法</li>\n</ul>\n<p>例如一下代码的calcSum方法用来计算两门课程的成绩总分：</p>\n<pre><code>public class PrintScore {\n    public static void main(String[] args) {\n\n        // 创建对象，对象名为a\n        PrintScore a = new PrintScore();\n\n        int rSum;  //设置一个int型变量，用来接收方法的返回值\n\n        // 调用方法，传入两门课程的成绩\n        rSum = a.calcSum(78,99);\n        System.out.println(&quot;总分：&quot;+ rSum);\n    }\n\n    //功能：计算两门课程考试成绩的总分并输出总分\n    //定义一个包含两个参数的方法，用来传入两门课程的成绩\n\n    public int calcSum(int a, int b){\n            int sum= a + b;\n            return sum;\n    }\n}\n</code></pre><p>如上所示：方法名为<code>calcSum</code>，它的修饰符是<code>public</code>，它有两个参数<code>int a</code>和<code>int b</code>，在方法调用的时候必须传入这两个参数。它有一个<code>int 型</code>的返回值，所以在方法里，有一条语句<code>return sum;</code>用来返回<code>sum</code>的值，其中<code>sum</code>类型也为<code>int 型</code>。而在方法调用的时候，我们用一个<code>int 型</code>变量<code>rSum</code>来接收这个返回值。方法<code>calcSum</code>实现了将两门课程的总成绩算出并返回。</p>\n<p>  注意：</p>\n<ol>\n<li><p>方法体放在一对大括号中，实现特定的操作</p>\n</li>\n<li><p>方法名主要在调用这个方法时使用，需要注意命名的规范，一般采用第一个单词首字母小写，其它单词首字母大写的形式</p>\n</li>\n<li><p>调用方法的语法是对象名.方法名</p>\n</li>\n</ol>\n<h2 id=\"参数与参数列表\"><a href=\"#参数与参数列表\" class=\"headerlink\" title=\"参数与参数列表\"></a>参数与参数列表</h2><p>可以通过在方法中加入参数列表接收外部传入的数据信息，参数可以是任意的基本类型数据或引用类型数据。</p>\n<pre><code>public class PrintScore {\n    public static void main(String[] args) {\n\n        // 创建对象，对象名为a\n        PrintScore a = new PrintScore();\n\n\n        double rAve;   //用来存放返回的平均成绩\n\n        //两课的成绩，是实际的参数\n        int sub1 = 78;  \n        int sub2 = 99;\n\n        // 调用方法，传入两门课程的成绩\n        rAve = a.calcAve(sub1,sub2);\n        System.out.println(&quot;平均分：&quot;+rAve);\n    }\n\n     // 功能：计算两门课程考试成绩的平均分并输出平均分\n    //  定义一个包含两个参数的方法，用来传入两门课程的成绩\n   //   两个参数 a 和 b 为形参，只在方法内有效       \n\n    public double calcAve(int a, int b){\n            double ave = (a + b) / 2;\n            return ave;\n    }\n}\n</code></pre><h2 id=\"方法重载\"><a href=\"#方法重载\" class=\"headerlink\" title=\"方法重载\"></a>方法重载</h2><p>在Java中通过在类中写多个方法，这类方法的方法名相同，方法的参数列表不同（参数的个数和参数类型的不同）来实现方法的重载。所谓方法重载就是：在一个类中，有一系列的方法具有方法名相同，但参数列表不同，这类方法的实现就是方法重载。</p>\n<p>在进行方法重载的时候需要遵循以下的规则：</p>\n<ol>\n<li><p>在使用方法重载的时候，必须通过方法中不同的参数列表来实现方法的重载。如：方法的参数个数不同或者方法的参数类型不同。</p>\n</li>\n<li><p>不能通过访问权限，返回值类型和抛出的异常来实现重载。</p>\n</li>\n<li><p>重载的方法中允许抛出不同的异常。</p>\n</li>\n<li><p>可以有不同的返回值类型，只要方法的参数列表不同即可。</p>\n</li>\n<li><p>可以有不同的访问修饰符。</p>\n</li>\n</ol>\n<h2 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h2><p>方法是一个实现了条件输入和结果输出的过程，往往需要对方法的结果进行进一步的处理，这时候就需要方法返回值了。</p>\n<p>注意：</p>\n<ol>\n<li><p>如果方法的返回类型为 void ，则方法中不能使用 return 返回值。</p>\n</li>\n<li><p>方法的返回值最多只能有一个，不能返回多个值。</p>\n</li>\n<li><p>方法返回值的类型必须兼容，也就是说如果返回值类型为 int ，则不能返回 String 型值。</p>\n</li>\n<li><p>调用带返回值的方法时，由于方法执行后会返回一个结果，因此在调用带返回值方法时一般都会接收其返回值并进行处理。</p>\n</li>\n</ol>\n<h1 id=\"Java-类与对象\"><a href=\"#Java-类与对象\" class=\"headerlink\" title=\"Java 类与对象\"></a>Java 类与对象</h1><h2 id=\"什么是面向对象\"><a href=\"#什么是面向对象\" class=\"headerlink\" title=\"什么是面向对象\"></a>什么是面向对象</h2><p>面向对象，从字面意思来看就是我们人面对着一个对象。其实就是指我们从这个对象的整体出发去看它，它由哪些部件组成，它可以做到哪些事情。</p>\n<p>比如我们想要买一部手机，我们想要内存大一点的，最新款的，CPU 运算快一点的，能实现发短信和打电话功能的手机。那么这部手机是不是对象呢？它不是。当我们买了一部 iPhone 6 后，它满足我们上面的所有信息。于是我们拿在手上的这部 iphone 6 就是我们的对象。于是我们知道，对象一定是一个具体的、确定的物体。</p>\n<p>而这部手机它的样式，颜色，大小，产地，编号等等，便是这部手机的“属性”，这部手机可以打电话、发短信，便是它的“行为”。</p>\n<p><strong>面向对象的思想，体现的是人所关注对象的信息聚集在了一个具体的物体上。人们就是通过对象的属性和行为来了解对象。</strong></p>\n<h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h2><p>类是封装对象的属性和行为的载体，反过来说具有相同属性和行为的一类实体被称为类。类就是对象的抽象(或者模板)，对象就是类的具体（或者实例）。比如手机是一个抽象的概念，它代表着类。而一部 iphone 6 便是手机具象化处理的实体，也就是一个对象。</p>\n<p>类的定义：</p>\n<ol>\n<li><p>类是相同或相似对象的一种抽象，是对象的一个模板，它描述一类对象的行为和状态。</p>\n</li>\n<li><p>类是具有相同属性和方法（行为）的对象的集合</p>\n</li>\n</ol>\n<p>定义一个类，主要有三个步骤：</p>\n<ol>\n<li><p>定义类名，用于区分不同的类。如下代码中 public class 后面跟的就是类名。class是我们声明类的关键字，类名后面跟上大括号，大括号里面就是我们类的一些信息。public我们会在后面详细讲解，大家先记着就行了。</p>\n</li>\n<li><p>编写类的属性。对象有什么，我们通过属性来表示。属性的定义我们是写在类名后面的大括号里，在定义属性时，要明确属性的类型。在一个类当中可以写一个或多个属性。当然也可以不定义属性。</p>\n</li>\n<li><p>编写类的方法。方法也是写在大括号里面。我们可以定义一个方法或多个方法，当然也可以不定义方法。</p>\n</li>\n</ol>\n<p>一个类可以包含以下类型变量：</p>\n<ul>\n<li><p>局部变量：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。</p>\n</li>\n<li><p>成员变量：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。</p>\n</li>\n<li><p>类变量：也叫静态变量，类变量也声明在类中，方法体之外，但必须声明为static类型。</p>\n</li>\n</ul>\n<h2 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h2><p>每个类都有构造方法。如果没有显式地为类定义构造方法，Java编译器将会为该类提供一个默认构造方法。</p>\n<p>在创建一个对象的时候，至少要调用一个构造方法。构造方法的名称必须与类同名，一个类可以有多个构造方法。</p>\n<ul>\n<li><p>构造方法的名称与类名相同，且没有返回值。它的语法格式如下：</p>\n<p>  //与类同名，可以指定参数，没有返回值<br>  public 构造方法名(){<br>  //初始化代码<br>  }</p>\n</li>\n</ul>\n<p>下面是一个构造方法的例子：</p>\n<pre><code>public class People{\n    //无参构造方法\n    public People(){\n\n    }\n    //有一个参数的构造方法\n    public People(int age){\n\n    }\n}\n</code></pre><ul>\n<li><p>如果我们在定义类的时候没有写构造方法，系统会默认给我们生成一个无参构造方法，不过这个构造方法什么也不会做。</p>\n</li>\n<li><p>当有指定的构造方法时，系统都不会再为我们添加无参构造方法了。</p>\n</li>\n<li><p>构造方法的重载：方法名相同，但参数不同的多个方法，调用时会自动根据不同的参数选择相应的方法。</p>\n</li>\n</ul>\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><p>创建对象的语法如下：</p>\n<pre><code>类名 对象名 = new 类名();\n</code></pre><p>比如对People这个类，我想实例化LiLei这个人。LiLei 的数据类型便是 People 这个类型。（类可以看成使我们自己定义的数据类型）</p>\n<pre><code>People LiLei = new People();\n</code></pre><p>定义类的时候是不会为类开辟内存空间的，但是一旦创建了对象，系统就会在内存中为对象开辟一块空间，用来存放对象的属性值和方法。</p>\n<pre><code>public class NewObject {\n    public static void main(String[] args) {\n        People LiLei = new People(); //创建一个People对象LiLei\n\n        LiLei.height =170;\n        LiLei.age = 20;\n        LiLei.sex = 1;\n\n        LiLei.printBaseMes();\n    }\n}\n</code></pre>","categories":["Tech"],"tags":["Notes","Java"]},{"title":"Java 学习笔记（一）","url":"http://mutemeteor.com/2017/09/10/java-note/","content":"<h1 id=\"HelloWorld-认识Java\"><a href=\"#HelloWorld-认识Java\" class=\"headerlink\" title=\"HelloWorld 认识Java\"></a>HelloWorld 认识Java</h1><h2 id=\"利用文本文件编辑-Java-程序\"><a href=\"#利用文本文件编辑-Java-程序\" class=\"headerlink\" title=\"利用文本文件编辑 Java 程序\"></a>利用文本文件编辑 Java 程序</h2><p>开发一个Java程序，主要有三步。</p>\n<p>第一步，使用文本文件去编写Java的源代码文件，Java的源代码文件以<code>.java</code>结尾，源代码文件默认是不能被机器执行的。</p>\n<p>第二步，要使用编译器（也就是javac命令），对源代码文件进行编译的操作。把它编译成字节码文件，字节码文件是以<code>.class</code>结尾。它与平台无关，也就是说无论是windows还是linux，字节码文件都是这样的一个文件，这跟系统没有关系。实际上Java的跨平台就是因为字节码文件的存在。</p>\n<p>第三步，就是解释器。针对不同的平台，根据相应的解释器，去解释运行字节码文件（这里使用java命令），最终我们可以看到程序运行出的结果。</p>\n<p><img src=\"http://ow2f9s8zh.bkt.clouddn.com/2017-09-10%2021-45-46.png\" alt=\"java1\"></p>\n<a id=\"more\"></a>\n<p>具体实现：</p>\n<ol>\n<li><p>输入<code>javac helloworld.java</code>,对源文件进行编译</p>\n</li>\n<li><p>桌面上多出了一个<code>helloworld.class</code>的文件</p>\n</li>\n<li><p>接着我们继续输入<code>java helloworld</code>（java 命令不能跟上文件的后缀名）, 对<code>HelloWorld.class</code>字节码文件利用解释器去执行它，即会打印结果。</p>\n</li>\n</ol>\n<p><strong>※ 实验注：类名和文件名必须相同！</strong></p>\n<h2 id=\"Java代码详解\"><a href=\"#Java代码详解\" class=\"headerlink\" title=\"Java代码详解\"></a>Java代码详解</h2><p><img src=\"http://ow2f9s8zh.bkt.clouddn.com/2017-09-10%2021-46-09.png\" alt=\"java2\"></p>\n<ol>\n<li><p>public是<code>类修饰</code>，表示<code>公有</code>，class是关键字<code>类</code> ，HelloWorld是<code>类名</code>，类名一定要与 Java 文件名一致；</p>\n</li>\n<li><p>内部是一个main方法，是一个<code>程序执行入口方法</code>，方法上的public也是修饰，表示公有，static是<code>静态修饰关键字</code>，是类的一部分，不是对象的一部分，void是<code>方法返回值</code>，标识返回空，Java 必须用对象去调用方法，所以程序的入口方法是静态的；</p>\n</li>\n<li><p>main是方法名，特殊方法，表示执行入口，括号里的String args[] 是方法参数，这里是指字符串数组，用来初始化程序；</p>\n</li>\n<li><p>方法里<code>System.out.println</code>是一个输出语句，输出括号里的内容。</p>\n</li>\n</ol>\n<h1 id=\"Java-基本语法\"><a href=\"#Java-基本语法\" class=\"headerlink\" title=\"Java 基本语法\"></a>Java 基本语法</h1><h2 id=\"Java-程序的构成\"><a href=\"#Java-程序的构成\" class=\"headerlink\" title=\"Java 程序的构成\"></a>Java 程序的构成</h2><p>一个Java程序可以认为是一系列 <strong>对象</strong> 的集合，而这些 <strong>对象</strong> 通过调用彼此的方法来协同工作。</p>\n<ol>\n<li><p>对象(object)：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</p>\n</li>\n<li><p>类(class)：类是一个模板，它描述一类对象的行为和状态。</p>\n</li>\n<li><p>方法(method)：方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。有些类似于C语言中的 <strong>函数</strong> 。</p>\n</li>\n<li><p>实例变量：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。</p>\n</li>\n</ol>\n<h2 id=\"Java-标识符\"><a href=\"#Java-标识符\" class=\"headerlink\" title=\"Java 标识符\"></a>Java 标识符</h2><p>Java 语言中，类、变量、常量、方法都需要名字，我们统统称之为 Java 标识符.</p>\n<p>标识符是用来给类、对象、方法、变量、接口和自定义数据类型命名的。</p>\n<p>关于 Java 标识符，有几点需要注意的：</p>\n<ol>\n<li><p>Java 标识符由数字，字母<code>A-Z</code>或者<code>a-z</code>和下划线<code>_</code>，美元符号<code>$</code>组成。</p>\n</li>\n<li><p>所有的标识符都应该以字母<code>A-Z</code>或者<code>a-z</code>,美元符<code>$</code>、或者下划线<code>_</code>开始，首位不能是数字。</p>\n</li>\n<li><p>关键字不能用作标识符。</p>\n</li>\n<li><p>在 Java 中是区分大小写的。</p>\n</li>\n</ol>\n<p><strong>注：在 Java 中，还有一些约定俗成的命名规则：</strong></p>\n<ol>\n<li><p>类和接口名。每个字的首字母大写，含有大小写。例如，MyClass，HelloWorld，Time 等。</p>\n</li>\n<li><p>方法名。首字符小写，其余的首字母大写，含大小写。尽量少用下划线。例如，myName，setTime 等。这种命名方法叫做驼峰式命名。</p>\n</li>\n<li><p>常量名。基本数据类型的常量名使用全部大写字母，字与字之间用下划线分隔。对象常量可大小混写。例如，SIZE_NAME。</p>\n</li>\n<li><p>变量名。可大小写混写，首字符小写，字间分隔符用字的首字母大写。不用下划线，少用美元符号。给变量命名是尽量做到见名知意。</p>\n</li>\n<li><p>命名过程中尽量做到见名知意，方便后期查看和修改代码，也方便其他人员的阅读。</p>\n</li>\n</ol>\n<h2 id=\"变量和常量\"><a href=\"#变量和常量\" class=\"headerlink\" title=\"变量和常量\"></a>变量和常量</h2><h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>变量代表程序的状态。程序通过改变变量的值来改变整个程序的状态。为了方便地引用变量的值，在程序中需要为变量设定一个名称，这就是变量名。</p>\n<p>由于Java语言是一种强类型的语言，所以变量在使用以前必须首先声明，在程序中声明变量的语法格式如下：</p>\n<p><strong>数据类型 变量名称；</strong></p>\n<p>在 Java 中，变量需要先声明(declare)才能使用。在声明中，说明变量的类型，赋予变量以特别名字，以便在后面的程序中调用它。可以在程序中的任意位置声明变量。</p>\n<p>Java中主要有如下几种类型的变量：</p>\n<ul>\n<li>局部变量</li>\n<li>类变量（静态变量）</li>\n<li>成员变量（非静态变量）</li>\n</ul>\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><p>常量代表程序运行过程中不能改变的值。我们也可以把它们理解为特殊的变量，只是它们在程序的运行过程中是不允许改变的。常量的值是不能被修改的。</p>\n<p>常量的语法格式和变量类似，只需要在变量的语法格式前面添加关键字<code>final</code>即可。在Java编码规范中，要求常量名必须大写。</p>\n<p>常量的语法格式如下：</p>\n<p><strong>final 数据类型 常量名称 = 值；</strong></p>\n<p><strong>final 数据类型 常量名称1 = 值1， 常量名称2 = 值2，……常量名称n = 值n；</strong></p>\n<p><code>final</code> 用于声明属性（常量），方法和类，分别表示属性一旦被分配内存空间就必须初始化, 它的含义是“这是无法改变的”或者“终态的”。</p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>一般在 Java 里有三种注释：</p>\n<ul>\n<li><p>行注释//：只注释一行</p>\n</li>\n<li><p>段注释/<em>…</em>/：注释若干行</p>\n</li>\n<li><p>文档注释/**…*/：注释若干行，并写入 javadoc文档</p>\n</li>\n</ul>\n<h1 id=\"Java-运算符\"><a href=\"#Java-运算符\" class=\"headerlink\" title=\"Java 运算符\"></a>Java 运算符</h1><h2 id=\"2-1算术运算符\"><a href=\"#2-1算术运算符\" class=\"headerlink\" title=\"2.1算术运算符\"></a>2.1算术运算符</h2><p><img src=\"http://ow2f9s8zh.bkt.clouddn.com/2017-09-10%2022-06-55.png\" alt=\"java3\"></p>\n<p>加，减，乘，除，取余，自增，自减。</p>\n<p><img src=\"http://ow2f9s8zh.bkt.clouddn.com/2017-09-10%2022-07-13.png\" alt=\"java4\"></p>\n<h2 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h2><p><img src=\"http://ow2f9s8zh.bkt.clouddn.com/2017-09-10%2022-17-13.png\" alt=\"java5\"></p>\n<h2 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h2><p><img src=\"http://ow2f9s8zh.bkt.clouddn.com/2017-09-10%2022-18-27.png\" alt=\"java6\"></p>\n<h2 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h2><p><img src=\"http://ow2f9s8zh.bkt.clouddn.com/2017-09-10%2022-18-55.png\" alt=\"java7\"></p>\n<h2 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h2><p><img src=\"http://ow2f9s8zh.bkt.clouddn.com/2017-09-10%2022-19-12.png\" alt=\"java8\"></p>\n<h2 id=\"条件运算符\"><a href=\"#条件运算符\" class=\"headerlink\" title=\"条件运算符\"></a>条件运算符</h2><p>条件运算符<code>?:</code>是唯一的一个三目运算符。</p>\n<p><strong>语法形式：布尔表达式？表达式1 : 表达式2</strong></p>\n<p>运算过程：如果布尔表达式的值为<code>true</code> ，则返回 表达式1 的值，否则返回 表达式2 的值。</p>\n<h1 id=\"Java-控制语句\"><a href=\"#Java-控制语句\" class=\"headerlink\" title=\"Java 控制语句\"></a>Java 控制语句</h1><h2 id=\"条件控制语句\"><a href=\"#条件控制语句\" class=\"headerlink\" title=\"条件控制语句\"></a>条件控制语句</h2><h3 id=\"if-语句\"><a href=\"#if-语句\" class=\"headerlink\" title=\"if 语句\"></a>if 语句</h3><ol>\n<li>if 语句</li>\n</ol>\n<pre><code>if(条件){\n  条件成立时执行的代码\n}\n</code></pre><ol>\n<li>if - else 语句</li>\n</ol>\n<pre><code>if(条件){\n  代码块1\n}\nelse{\n  代码块2\n}\n</code></pre><ol>\n<li>if - else if - else 语句</li>\n</ol>\n<pre><code>if(条件1){\n  代码块1\n}\nelse if(条件2){\n  代码块2\n}\n...\nelse {\n  代码块n\n}\n</code></pre><h3 id=\"switch语句\"><a href=\"#switch语句\" class=\"headerlink\" title=\"switch语句\"></a>switch语句</h3><pre><code>switch(表达式){\n    case 值1:\n        代码块1\n        break;\n    case 值2:\n        代码块2\n        break;\n    ...\n    default:\n        默认执行的代码块\n}\n</code></pre><p>当 switch 后表达式的值和 case 语句后的值相同时，从该位置开始向下执行，直到遇到 break 语句或者 switch 语句块结束；如果没有匹配的 case 语句则执行 default 块的代码。</p>\n<h2 id=\"循环控制语句\"><a href=\"#循环控制语句\" class=\"headerlink\" title=\"循环控制语句\"></a>循环控制语句</h2><h3 id=\"while和do-while语句\"><a href=\"#while和do-while语句\" class=\"headerlink\" title=\"while和do-while语句\"></a>while和do-while语句</h3><ol>\n<li>while语法</li>\n</ol>\n<pre><code>while(条件){\n    代码块\n}\n</code></pre><ol>\n<li>do-while</li>\n</ol>\n<pre><code>do{\n    代码块\n}while(条件);    \n</code></pre><h3 id=\"for语句\"><a href=\"#for语句\" class=\"headerlink\" title=\"for语句\"></a>for语句</h3><pre><code>for(循环变量初始化; 循环条件; 循环变量变化){\n    循环操作\n}\n</code></pre><h2 id=\"跳转语句\"><a href=\"#跳转语句\" class=\"headerlink\" title=\"跳转语句\"></a>跳转语句</h2><h3 id=\"break和continue\"><a href=\"#break和continue\" class=\"headerlink\" title=\"break和continue\"></a>break和continue</h3>","categories":["Tech"],"tags":["Notes","Java"]},{"title":"Psychological Clinic","url":"http://mutemeteor.com/2017/08/10/Psychological-Clinic/","content":"<blockquote>\n<p>This is a little detective story written in the writing practice course. </p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><p>“Dear Miss, what can I do for you?”<br>“Oh…… I have heard that you are specialized in helping people solve problems, you are a qualified psychiatrist……”<br>“Dare not guarantee to cure all mental problems. Yet the certificates on the wall behind me are all real.”<br>“So I came to you.”<br>“Your problem is?”<br>“About love. ‘Women are born for love.’ What do you think of this idea?”<br>“‘Life is dear, love is dearer. ’ This is especially true for women.”<br>“Follow love and proceed without hesitation is not wrong, right?”<br>“It can always be forgiven when a woman makes any mistake chasing love.”<br>“Love ends up in marriage, doesn’t it?”<br>“Generally speaking, yes.”<br>“But they’re not the same……”<br>“Love is romantic, marriage is realistic.”<br>“But romance shouldn’t be hindered by reality, is it?”<br>“If a man loves one, yet he gives up because of parents’ oppositions or for the sake of money, it will be a great pity.”</p>\n<h1 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h1><p>“Do you have anything to say to me?”<br>“I…… Must I say something?”<br>“Psychological problems must be resolved or the consequences of accumulation are serious. That’s our rule here. If you don’t say anything at all, how can we help you?”<br>“Well……I heard that your learning is profound and immense, I want to discuss……some philosophical problems.”<br>“If there is anything in the world that can be described as profound knowledge, it must be philosophy.”<br>“Actually, what I want to talk about is not philosophy, it’s a philosopher. How much do you know about Freud?”<br>“His research is too numerous to mention.”<br>“Oedipus complex……”<br>“Really it’s not philosophy.”<br>“What do you think of it?”<br>“I do not quote any of his theories, just my views. I think it’s normal, even so the Oedipus complex can be said to be an animal instinct. The Encyclopedia of animals has introduced a duck. The male duck always looks for his spouse modeling after his mother.”<br>“Is this a common phenomenon?”<br>“Yes, men often have this affection.”<br>“But shouldn’t parents be treated equally?””<br>“A boy loves his mother more than he loves his father. It’s not unusual even after he grows up.”<br>“Extreme, isn’t it?”<br>“If you are suffering from certain stimuli, you will be more strongly defended.”<br>“If the reaction has its cause, one cannot be too radical in matters like this?”<br>“Motherhood is more glorious than anything, even human nature and reason. anyone harmful to the mother is the enemy of the son.”</p>\n<h1 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h1><p>“You look very sad, madam.”<br>“Yes. I have a lot of questions that I can’t figure out.”<br>“For example?”<br>“What others think of me……”<br>“Dante said, ‘go your own way and let others talk.’”<br>“I’m not so easy. But other people seem to think so, and they think that what they say doesn’t hurt anyone else, so they are irresponsible to……”<br>“The world does have a lot of prejudices. For example, they think the stepmother is an old witch who enjoys abusing the children of ex-wife and also prefers to murder her husband. If a young lady marries an old man, it’s only for money.”<br>“In fact, there are many possibilities and helplessness.”<br>“If no one makes allowance for you, just be considerate of yourself.”<br>“Comfort myself?”<br>“Not only on the psychological level, but also into action, for example, try to fight for something.”<br>“But I hate being predicted. They must be as complacent as seers: ‘look, she is just what we said. This is the human nature.’ Why not the different background, but the same way?”<br>“All roads lead to Rome? It happens a lot. Don’t be afraid. Nobody knows the inside story. Isn’t it wonderful that there’s one thing only you know in the world?  Think about what you really want.”</p>\n<h1 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4\"></a>4</h1><p>“You don’t look very well. Relax. Don’t be nervous.”<br>“I’ve come to talk to you about the choice.”<br>“Em?”<br>“Family and love, which do you think is more important?”<br>“Different people have different views.”<br>“People always say ‘the hate of the wife being abducted’ and ‘the revenge of the father being killed’, which seems to be the most intolerable. But they also say, ‘brothers are like hands while wives are like clothes.’ I do not know which one is right.”<br>“Chinese people, if they have a theory, there must be an opposite one, it really causes some annoying headaches.”<br>“What should I do……”<br>“I can’t give a specific suggestion, just a personal opinion. The ancient Chinese values faithfulness, and on the account of the low status of women, love is so deep, even hard to speak out, so it produces the second kind of argument. But we are civilized westerners, right?”</p>\n<h1 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5\"></a>5</h1><p>“How’s the investigation going?”<br>“The famous Mr. Fog, got rich based on his ex-wife’s fortune and then was widowed by accident. Two years ago, he married a woman who was the younger brother’s girlfriend. If he dies before he changes his will next week, we can get four incomes at the same time. Your peers call you ‘scholar’, that really makes sense.”<br>“Remember, knowledge is always useful.”</p>\n","categories":[],"tags":[]},{"title":"Linux 学习笔记","url":"http://mutemeteor.com/2017/08/07/Linux/","content":"<h1 id=\"linux终端\"><a href=\"#linux终端\" class=\"headerlink\" title=\"linux终端\"></a>linux终端</h1><h2 id=\"终端的概念\"><a href=\"#终端的概念\" class=\"headerlink\" title=\"终端的概念\"></a>终端的概念</h2><p>通常我们在使用 Linux 时，并不是直接与系统打交道，而是通过一个叫做 Shell 的中间程序来完成的，在图形界面下为了实现让我们在一个窗口中完成用户输入和显示输出，Linux 系统还提供了一个叫做终端模拟器的程序（Terminal），下面是几个比较常见的终端模拟器： gnome-terminal，kconsole，xterm，rxvt，kvt，nxterm 和 eterm 。</p>\n<a id=\"more\"></a>\n<h1 id=\"Shell\"><a href=\"#Shell\" class=\"headerlink\" title=\"Shell\"></a>Shell</h1><p>通常在图形界面中对实际体验带来差异的不是上述的不同发行版的各种终端模拟器，而是这个 Shell（壳）。有壳就有核，这里的核就是指 UNIX/Linux 内核，Shell 是指“提供给使用者使用界面”的软件（命令解析器），类似于 DOS 下的 command（命令行）和后来的 cmd.exe 。普通意义上的 Shell 就是可以接受用户输入命令的程序。它之所以被称作 Shell 是因为它隐藏了操作系统底层的细节。同样的 UNIX/Linux 下的图形用户界面 GNOME 和 KDE，有时也被叫做“虚拟 shell”或“图形 shell”。</p>\n<p>UNIX/Linux 操作系统下的 Shell 既是用户交互的界面，也是控制系统的脚本语言。当然这一点也有别于 Windows 下的命令行，虽然该命令行也提供了很简单的控制语句。在 Windows 操作系统下，有些用户从来都不会直接使用 Shell，然而在 UNIX 系列操作系统下，Shell 仍然是控制系统启动、X11 启动和很多其它实用工具的脚本解释程序。</p>\n<p>在 UNIX/Linux 中比较流行的常见的 Shell 有 bash、zsh、ksh、csh 等等，Ubuntu 终端默认使用的是 bash，默认的桌面环境是 GNOME 或者 Unity。</p>\n<h1 id=\"命令行操作\"><a href=\"#命令行操作\" class=\"headerlink\" title=\"命令行操作\"></a>命令行操作</h1><h2 id=\"Tab\"><a href=\"#Tab\" class=\"headerlink\" title=\"[Tab]\"></a>[Tab]</h2><p>使用Tab键来进行命令补全，Tab键一般是在字母Q旁边，这个技巧给你带来的最大的好处就是当你忘记某个命令的全称时可以只输入它的开头的一部分，然后按下Tab键就可以得到提示或者帮助完成，当然不止补全命令，补全目录、补全命令参数都是没问题的。</p>\n<h2 id=\"Ctrl-c\"><a href=\"#Ctrl-c\" class=\"headerlink\" title=\"[Ctrl+c]\"></a>[Ctrl+c]</h2><p>用Ctrl+c键来强行终止当前程序（且并不会使终端退出）。</p>\n<p>其他一些常用快捷键:</p>\n<table>\n<thead>\n<tr>\n<th>按键</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Ctrl+d</code></td>\n<td style=\"text-align:center\">键盘输入结束或退出终端</td>\n</tr>\n<tr>\n<td><code>Ctrl+s</code></td>\n<td style=\"text-align:center\">暂停当前程序，暂停后按下任意键恢复运行</td>\n</tr>\n<tr>\n<td><code>Ctrl+z</code></td>\n<td style=\"text-align:center\">将当前程序放到后台运行，恢复到前台为命令fg</td>\n</tr>\n<tr>\n<td><code>Ctrl+a</code></td>\n<td style=\"text-align:center\">将光标移至输入行头，相当于Home键</td>\n</tr>\n<tr>\n<td><code>Ctrl+e</code></td>\n<td style=\"text-align:center\">将光标移至输入行末，相当于End键</td>\n</tr>\n<tr>\n<td><code>Alt+Backspace</code></td>\n<td style=\"text-align:center\">向前删除一个单词</td>\n</tr>\n<tr>\n<td><code>Shift+PgUp</code></td>\n<td style=\"text-align:center\">将终端显示向上滚动</td>\n</tr>\n<tr>\n<td><code>Shift+PgDn</code></td>\n<td style=\"text-align:center\">将终端显示向下滚动</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"历史输入命令\"><a href=\"#历史输入命令\" class=\"headerlink\" title=\"历史输入命令\"></a>历史输入命令</h2><p>很简单，使用键盘上的方向上键<code>↑</code>，恢复之前输入过的命令，一试便知。</p>\n<h2 id=\"通配符\"><a href=\"#通配符\" class=\"headerlink\" title=\"通配符\"></a>通配符</h2><p>通配符是一种特殊语句，主要有星号（*）和问号（?），用来对字符串进行模糊匹配（比如文件名、参数名）。当查找文件夹时，可以使用它来代替一个或多个真正字符；当不知道真正字符或者懒得输入完整名字时，常常使用通配符代替一个或多个真正字符。</p>\n<p>终端里面输入的通配符是由 Shell 处理的，不是由所涉及的命令语句处理的，它只会出现在命令的“参数值”里（它不能出现在命令名称里， 命令不记得，那就用<code>Tab</code>补全）。当 Shell 在“参数值”中遇到了通配符时，Shell 会将其当作路径或文件名在磁盘上搜寻可能的匹配：若符合要求的匹配存在，则进行代换（路径扩展）；否则就将该通配符作为一个普通字符传递给“命令”，然后再由命令进行处理。总之，通配符实际上就是一种 Shell 实现的路径扩展功能。在通配符被处理后， Shell 会先完成该命令的重组，然后继续处理重组后的命令，直至执行该命令。</p>\n<p>Shell 常用通配符：</p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>*</code></td>\n<td style=\"text-align:center\">匹配 0 或多个字符</td>\n</tr>\n<tr>\n<td><code>?</code></td>\n<td style=\"text-align:center\">匹配任意一个字符</td>\n</tr>\n<tr>\n<td><code>[list]</code></td>\n<td style=\"text-align:center\">匹配 list 中的任意单一字符</td>\n</tr>\n<tr>\n<td><code>[!list]</code></td>\n<td style=\"text-align:center\">匹配 除list 中的任意单一字符以外的字符</td>\n</tr>\n<tr>\n<td><code>[c1-c2]</code></td>\n<td style=\"text-align:center\">匹配 c1-c2 中的任意单一字符 如：[0-9] [a-z]</td>\n</tr>\n<tr>\n<td><code>{string1,string2,...}</code></td>\n<td style=\"text-align:center\">匹配 string1 或 string2 (或更多)其一字符串</td>\n</tr>\n<tr>\n<td><code>{c1..c2}</code></td>\n<td style=\"text-align:center\">匹配 c1-c2 中全部字符 如{1..10}</td>\n</tr>\n</tbody>\n</table>\n","categories":[],"tags":["Notes","Linux"]},{"title":"Vim 学习笔记","url":"http://mutemeteor.com/2017/07/23/vim/","content":"<p>从vi演生出来的Vim具有多种模式，这种独特的设计容易使初学者产生混淆。几乎所有的编辑器都会有插入和执行命令两种模式，并且大多数的编辑器使用了与Vim截然不同的方式：命令目录（鼠标或者键盘驱动），组合键（通常通过control键（CTRL）和alt键（ALT）组成）或者鼠标输入。Vim和vi一样，仅仅通过键盘来在这些模式之中切换。这就使得Vim可以不用进行菜单或者鼠标操作，并且最小化组合键的操作。对文字录入员或者程序员可以大大增强速度和效率。</p>\n<a id=\"more\"></a>\n<h1 id=\"Vim-的6种模式\"><a href=\"#Vim-的6种模式\" class=\"headerlink\" title=\"Vim 的6种模式\"></a>Vim 的6种模式</h1><h2 id=\"普通模式-Normal-mode\"><a href=\"#普通模式-Normal-mode\" class=\"headerlink\" title=\"普通模式(Normal mode)\"></a>普通模式(Normal mode)</h2><p>在普通模式中，用的编辑器命令，比如移动光标，删除文本等等。这也是Vim启动后的默认模式。这正好和许多新用户期待的操作方式相反（大多数编辑器默认模式为插入模式）。</p>\n<p>Vim强大的编辑能来自于其普通模式命令。普通模式命令往往需要一个操作符结尾。例如普通模式命令<code>dd</code>删除当前行，但是第一个”d”的后面可以跟另外的移动命令来代替第二个<code>d</code>，比如用移动到下一行的”j”键就可以删除当前行和下一行。另外还可以指定命令重复次数，<code>2dd</code>（重复<code>dd</code>两次），和<code>dj</code>的效果是一样的。用户学习了各种各样的文本间移动／跳转的命令和其他的普通模式的编辑命令，并且能够灵活组合使用的话，能够比那些没有模式的编辑器更加高效的进行文本编辑。</p>\n<p>在普通模式中，有很多方法可以进入插入模式。比较普通的方式是按<code>a</code>（append／追加）键或者<code>i</code>（insert／插入）键。</p>\n<h2 id=\"插入模式-Insert-mode\"><a href=\"#插入模式-Insert-mode\" class=\"headerlink\" title=\"插入模式(Insert mode)\"></a>插入模式(Insert mode)</h2><p>在这个模式中，大多数按键都会向文本缓冲中插入文本。大多数新用户希望文本编辑器编辑过程中一直保持这个模式。</p>\n<p>在插入模式中，可以按<code>ESC</code>键回到普通模式。</p>\n<h2 id=\"可视模式-Visual-mode\"><a href=\"#可视模式-Visual-mode\" class=\"headerlink\" title=\"可视模式(Visual mode)\"></a>可视模式(Visual mode)</h2><p>这个模式与普通模式比较相似。但是移动命令会扩大高亮的文本区域。高亮区域可以是字符、行或者是一块文本。当执行一个非移动命令时，命令会被执行到这块高亮的区域上。Vim的”文本对象”也能和移动命令一样用在这个模式中。</p>\n<h2 id=\"选择模式-Select-mode\"><a href=\"#选择模式-Select-mode\" class=\"headerlink\" title=\"选择模式(Select mode)\"></a>选择模式(Select mode)</h2><p>这个模式和无模式编辑器的行为比较相似（Windows标准文本控件的方式）。这个模式中，可以用鼠标或者光标键高亮选择文本，不过输入任何字符的话，Vim会用这个字符替换选择的高亮文本块，并且自动进入插入模式。</p>\n<h2 id=\"命令行模式-Command-line-mode\"><a href=\"#命令行模式-Command-line-mode\" class=\"headerlink\" title=\"命令行模式(Command line mode)\"></a>命令行模式(Command line mode)</h2><p>在命令行模式中可以输入会被解释成并执行的文本。例如执行命令（<code>:</code>键），搜索（<code>/</code>和<code>?</code>键）或者过滤命令（<code>!</code>键）。在命令执行之后，Vim返回到命令行模式之前的模式，通常是普通模式。</p>\n<h2 id=\"Ex模式-Ex-mode\"><a href=\"#Ex模式-Ex-mode\" class=\"headerlink\" title=\"Ex模式(Ex mode)\"></a>Ex模式(Ex mode)</h2><p>这和命令行模式比较相似，在使用<code>:visual</code>命令离开Ex模式前，可以一次执行多条命令。</p>\n<p>这其中我们常用到就是普通模式、插入模式和命令行模式。</p>\n<h1 id=\"三种常用模式的切换\"><a href=\"#三种常用模式的切换\" class=\"headerlink\" title=\"三种常用模式的切换\"></a>三种常用模式的切换</h1><p>vim启动进入普通模式，处于插入模式或命令行模式时只需要按<code>Esc</code>或者<code>Ctrl+[</code>即可进入普通模式。普通模式中按<code>i</code>（插入）或<code>a</code>（附加）键都可以进入插入模式，普通模式中按<code>:</code>进入命令行模式。命令行模式中输入<code>wq</code>回车后保存并退出vim。</p>\n<h1 id=\"进入vim\"><a href=\"#进入vim\" class=\"headerlink\" title=\"进入vim\"></a>进入vim</h1><h2 id=\"使用vim命令进入vim界面\"><a href=\"#使用vim命令进入vim界面\" class=\"headerlink\" title=\"使用vim命令进入vim界面\"></a>使用vim命令进入vim界面</h2><p>vim后面加上你要打开的已存在的文件名或者不存在（则作为新建文件）的文件名。</p>\n<p>打开终端，输入以下命令：</p>\n<pre><code>$ vim practice_1.txt\n</code></pre><p>直接使用vim也可以打开vim编辑器，但是不会打开任何文件：</p>\n<pre><code>$ vim\n</code></pre><p>进入命令行模式后输入<code>:e 文件路径</code> 同样可以打开相应文件。</p>\n<h2 id=\"游标移动\"><a href=\"#游标移动\" class=\"headerlink\" title=\"游标移动\"></a>游标移动</h2><p>在进入vim后，按下<code>i</code>键进入插入模式。<br>按<code>Esc</code>进入普通模式，在该模式下使用方向键或者<code>h</code>,<code>j</code>,<code>k</code>,<code>l</code>键可以移动游标。</p>\n<table>\n<thead>\n<tr>\n<th>按键</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>h</code></td>\n<td style=\"text-align:center\">左</td>\n</tr>\n<tr>\n<td><code>l</code></td>\n<td style=\"text-align:center\">右</td>\n</tr>\n<tr>\n<td><code>j</code></td>\n<td style=\"text-align:center\">下</td>\n</tr>\n<tr>\n<td><code>k</code></td>\n<td style=\"text-align:center\">上</td>\n</tr>\n<tr>\n<td><code>w</code></td>\n<td style=\"text-align:center\">移动到下一个单词</td>\n</tr>\n<tr>\n<td><code>e</code></td>\n<td style=\"text-align:center\">移动到上一个单词</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"进入插入模式\"><a href=\"#进入插入模式\" class=\"headerlink\" title=\"进入插入模式\"></a>进入插入模式</h2><p>在普通模式下使用下面的键将进入插入模式，并可以从相应的位置开始输入</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>i</code></td>\n<td style=\"text-align:center\">在当前光标处进行编辑</td>\n</tr>\n<tr>\n<td><code>I</code></td>\n<td style=\"text-align:center\">在行首插入</td>\n</tr>\n<tr>\n<td><code>A</code></td>\n<td style=\"text-align:center\">在行末插入</td>\n</tr>\n<tr>\n<td><code>a</code></td>\n<td style=\"text-align:center\">在光标后插入编辑</td>\n</tr>\n<tr>\n<td><code>o</code></td>\n<td style=\"text-align:center\">在当前行后插入一个新行</td>\n</tr>\n<tr>\n<td><code>O</code></td>\n<td style=\"text-align:center\">在当前行前插入一个新行</td>\n</tr>\n<tr>\n<td><code>cw</code></td>\n<td style=\"text-align:center\">替换从光标所在位置后到一个单词结尾的字符</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"保存文档\"><a href=\"#保存文档\" class=\"headerlink\" title=\"保存文档\"></a>保存文档</h1><p>从普通模式输入<code>:</code>进入命令行模式，输入<code>w</code>回车，保存文档。输入<code>:w</code> 文件名可以将文档另存为其他文件名或存到其它路径下。</p>\n<h1 id=\"退出vim\"><a href=\"#退出vim\" class=\"headerlink\" title=\"退出vim\"></a>退出vim</h1><h2 id=\"命令行模式下退出vim\"><a href=\"#命令行模式下退出vim\" class=\"headerlink\" title=\"命令行模式下退出vim\"></a>命令行模式下退出vim</h2><p>从普通模式输入:进入命令行模式，输入wq回车，保存并退出编辑。</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>:q!</code></td>\n<td style=\"text-align:center\">强制退出，不保存</td>\n</tr>\n<tr>\n<td><code>:q</code></td>\n<td style=\"text-align:center\">退出</td>\n</tr>\n<tr>\n<td><code>:wq!</code></td>\n<td style=\"text-align:center\">强制保存并退出</td>\n</tr>\n<tr>\n<td><code>:w &lt;文件路径&gt;</code></td>\n<td style=\"text-align:center\">另存为</td>\n</tr>\n<tr>\n<td><code>:saveas 文件路径</code></td>\n<td style=\"text-align:center\">另存为</td>\n</tr>\n<tr>\n<td><code>:x</code></td>\n<td style=\"text-align:center\">保存并退出</td>\n</tr>\n<tr>\n<td><code>:wq</code></td>\n<td style=\"text-align:center\">保存并退出</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"普通模式下退出vim\"><a href=\"#普通模式下退出vim\" class=\"headerlink\" title=\"普通模式下退出vim\"></a>普通模式下退出vim</h2><p>普通模式下输入<code>Shift+zz</code>即可保存退出vim。</p>\n<h1 id=\"删除文本\"><a href=\"#删除文本\" class=\"headerlink\" title=\"删除文本\"></a>删除文本</h1><p>进入普通模式，使用下列命令可以进行文本快速删除：</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>x</code></td>\n<td style=\"text-align:center\">删除游标所在的字符</td>\n</tr>\n<tr>\n<td><code>X</code></td>\n<td style=\"text-align:center\">删除游标所在前一个字符</td>\n</tr>\n<tr>\n<td><code>Delete</code></td>\n<td style=\"text-align:center\">同x</td>\n</tr>\n<tr>\n<td><code>dd</code></td>\n<td style=\"text-align:center\">删除整行</td>\n</tr>\n<tr>\n<td><code>dw</code></td>\n<td style=\"text-align:center\">删除一个单词（不适用中文）</td>\n</tr>\n<tr>\n<td><code>d$或D</code></td>\n<td style=\"text-align:center\">删除至行尾</td>\n</tr>\n<tr>\n<td><code>d^</code></td>\n<td style=\"text-align:center\">删除至行首</td>\n</tr>\n<tr>\n<td><code>dG</code></td>\n<td style=\"text-align:center\">删除到文档结尾处</td>\n</tr>\n<tr>\n<td><code>d1G</code></td>\n<td style=\"text-align:center\">删至文档首部</td>\n</tr>\n</tbody>\n</table>\n<p>除此之外，还可以在命令之前加上数字，表示一次删除多行，如：<code>2dd</code>表示一次删除2行。</p>\n<p><img src=\"http://on7kyvg9n.bkt.clouddn.com/vi-vim-cheat-sheet-sch.gif\" alt=\"vim键盘图\"></p>\n","categories":["Tech"],"tags":["Notes","Vim"]},{"title":"MySQL 学习笔记之进阶篇","url":"http://mutemeteor.com/2017/07/20/MySQL2/","content":"<h1 id=\"进阶篇-MySQL-服务安装及命令使用\"><a href=\"#进阶篇-MySQL-服务安装及命令使用\" class=\"headerlink\" title=\"进阶篇 - MySQL 服务安装及命令使用\"></a>进阶篇 - MySQL 服务安装及命令使用</h1><h1 id=\"进阶篇-MySQL-操作详解\"><a href=\"#进阶篇-MySQL-操作详解\" class=\"headerlink\" title=\"进阶篇 - MySQL 操作详解\"></a>进阶篇 - MySQL 操作详解</h1><h1 id=\"进阶篇-MySQL-常用查询\"><a href=\"#进阶篇-MySQL-常用查询\" class=\"headerlink\" title=\"进阶篇 - MySQL 常用查询\"></a>进阶篇 - MySQL 常用查询</h1><h1 id=\"进阶篇-MySQL-语言结构\"><a href=\"#进阶篇-MySQL-语言结构\" class=\"headerlink\" title=\"进阶篇 - MySQL 语言结构\"></a>进阶篇 - MySQL 语言结构</h1><h1 id=\"进阶篇-MySQL-数据类型\"><a href=\"#进阶篇-MySQL-数据类型\" class=\"headerlink\" title=\"进阶篇 - MySQL 数据类型\"></a>进阶篇 - MySQL 数据类型</h1><h1 id=\"进阶篇-MySQL-函数和操作符\"><a href=\"#进阶篇-MySQL-函数和操作符\" class=\"headerlink\" title=\"进阶篇 - MySQL 函数和操作符\"></a>进阶篇 - MySQL 函数和操作符</h1><h1 id=\"进阶篇-SQL-语句语法详解\"><a href=\"#进阶篇-SQL-语句语法详解\" class=\"headerlink\" title=\"进阶篇 - SQL 语句语法详解\"></a>进阶篇 - SQL 语句语法详解</h1><h1 id=\"进阶篇-MySQL-触发器\"><a href=\"#进阶篇-MySQL-触发器\" class=\"headerlink\" title=\"进阶篇 - MySQL 触发器\"></a>进阶篇 - MySQL 触发器</h1><h1 id=\"进阶篇-MySQL-视图\"><a href=\"#进阶篇-MySQL-视图\" class=\"headerlink\" title=\"进阶篇 - MySQL 视图\"></a>进阶篇 - MySQL 视图</h1><h1 id=\"进阶篇-MySQL-存储过程和函数\"><a href=\"#进阶篇-MySQL-存储过程和函数\" class=\"headerlink\" title=\"进阶篇 - MySQL 存储过程和函数\"></a>进阶篇 - MySQL 存储过程和函数</h1><h1 id=\"进阶篇-MySQL-数据库管理\"><a href=\"#进阶篇-MySQL-数据库管理\" class=\"headerlink\" title=\"进阶篇 - MySQL 数据库管理\"></a>进阶篇 - MySQL 数据库管理</h1>","categories":["Tech"],"tags":["Notes","MySQL"]},{"title":"MySQL 学习笔记之基础篇","url":"http://mutemeteor.com/2017/03/31/MySQL1/","content":"<h1 id=\"基础篇-SQL-介绍\"><a href=\"#基础篇-SQL-介绍\" class=\"headerlink\" title=\"基础篇 - SQL 介绍\"></a>基础篇 - SQL 介绍</h1><h2 id=\"数据库和-SQL-概念\"><a href=\"#数据库和-SQL-概念\" class=\"headerlink\" title=\"数据库和 SQL 概念\"></a>数据库和 SQL 概念</h2><p>数据库（Database）是按照数据结构来组织、存储和管理数据的仓库，它的产生距今已有六十多年。</p>\n<p>结构化查询语言(Structured Query Language)简称 SQL，是上世纪 70 年代由 IBM 公司开发，用于对数据库进行操作的语言。SQL 是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统，同时也是数据库脚本文件的扩展名。</p>\n<h2 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h2><p>MySQL 是一个 DBMS（数据库管理系统），由瑞典 MySQLAB 公司开发，目前属于 Oracle 公司，MySQL 是最流行的关系型数据库管理系统。MySQL 是一个 DBMS（数据库管理系统），由瑞典 MySQLAB 公司开发，目前属于 Oracle 公司，MySQL 是最流行的关系型数据库管理系统<br><a id=\"more\"></a></p>\n<h2 id=\"尝试-MySQL\"><a href=\"#尝试-MySQL\" class=\"headerlink\" title=\"尝试 MySQL\"></a>尝试 MySQL</h2><h3 id=\"打开-MySQL\"><a href=\"#打开-MySQL\" class=\"headerlink\" title=\"打开 MySQL\"></a>打开 MySQL</h3><pre><code># 启动 MySQL 服务\nsudo service mysql start\n\n#使用 root 用户登录，密码为空\nmysql -u root\n</code></pre><h3 id=\"查看数据库\"><a href=\"#查看数据库\" class=\"headerlink\" title=\"查看数据库\"></a>查看数据库</h3><p>使用命令 <code>show databases;</code>，查看有哪些数据库。</p>\n<h3 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h3><p>选择连接其中一个数据库，语句格式为 <code>use &lt;数据库名&gt;</code>，这里可以不用加分号。</p>\n<h3 id=\"查看表\"><a href=\"#查看表\" class=\"headerlink\" title=\"查看表\"></a>查看表</h3><p>使用命令 <code>show tables;</code> 查看数据库中有哪些表（不要漏掉“;”）。</p>\n<h1 id=\"基础篇-创建数据库并插入数据\"><a href=\"#基础篇-创建数据库并插入数据\" class=\"headerlink\" title=\"基础篇 - 创建数据库并插入数据\"></a>基础篇 - 创建数据库并插入数据</h1><h2 id=\"新建数据库\"><a href=\"#新建数据库\" class=\"headerlink\" title=\"新建数据库\"></a>新建数据库</h2><p>语句格式为 <code>CREATE DATABASE &lt;数据库名字&gt;;</code>,在大多数系统中，SQL 语句都是不区分大小写的，但是出于严谨，而且便于区分保留字（保留字(reserved word)：指在高级语言中已经定义过的字，使用者不能再将这些字作为变量名或过程名使用。）和变量名，我们把保留字大写，把变量和数据小写。</p>\n<h2 id=\"连接数据库-1\"><a href=\"#连接数据库-1\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h2><p>首先要连接数据库，使用语句 <code>use &lt;数据库名字&gt;</code>。</p>\n<h2 id=\"数据表\"><a href=\"#数据表\" class=\"headerlink\" title=\"数据表\"></a>数据表</h2><p>数据表（table）简称表，它是数据库最重要的组成部分之一。数据库只是一个框架，表才是实质内容。<br>而一个数据库中一般会有多张表，这些各自独立的表通过建立关系被联接起来，才成为可以交叉查阅、一目了然的数据库。</p>\n<h2 id=\"新建数据表\"><a href=\"#新建数据表\" class=\"headerlink\" title=\"新建数据表\"></a>新建数据表</h2><p>在数据库中新建一张表的语句格式为：</p>\n<pre><code>CREATE TABLE 表的名字\n(\n列名a 数据类型(数据长度),\n列名b 数据类型(数据长度)，\n列名c 数据类型(数据长度)\n);\n</code></pre><h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th style=\"text-align:center\">大小(字节)</th>\n<th style=\"text-align:right\">用途</th>\n<th style=\"text-align:right\">格式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>INT</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:right\">整数</td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td>FLOAT</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:right\">单精度浮点数</td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td>DOUBLE</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:right\">双精度浮点数</td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td>ENUM</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">单选,比如性别</td>\n<td style=\"text-align:right\">ENUM(‘a’,’b’,’c’)</td>\n</tr>\n<tr>\n<td>SET</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">多选</td>\n<td style=\"text-align:right\">SET(‘1’,’2’,’3’)</td>\n</tr>\n<tr>\n<td>DATE</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:right\">日期</td>\n<td style=\"text-align:right\">YYYY-MM-DD</td>\n</tr>\n<tr>\n<td>TIME</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:right\">时间点或持续时间</td>\n<td style=\"text-align:right\">HH:MM:SS</td>\n</tr>\n<tr>\n<td>YEAR</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:right\">年份值</td>\n<td style=\"text-align:right\">YYYY</td>\n</tr>\n<tr>\n<td>CHAR</td>\n<td style=\"text-align:center\">0~255</td>\n<td style=\"text-align:right\">定长字符串</td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td>VARCHAR</td>\n<td style=\"text-align:center\">0~255</td>\n<td style=\"text-align:right\">变长字符串</td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td>TEXT</td>\n<td style=\"text-align:center\">0~65535</td>\n<td style=\"text-align:right\">长文本数据</td>\n<td style=\"text-align:right\"></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>整数除了 INT 外，还有 TINYINT、SMALLINT、MEDIUMINT、BIGINT。</li>\n<li>整数除了 INT 外，还有 TINYINT、SMALLINT、MEDIUMINT、BIGINT。<br>CHAR 和 VARCHAR 的区别: CHAR 的长度是固定的，而 VARCHAR 的长度是可以变化的，比如，存储字符串 “abc”，对于 CHAR(10)，表示存储的字符将占 10 个字节(包括 7 个空字符)，而同样的 VARCHAR(12) 则只占用4个字节的长度，增加一个额外字节来存储字符串本身的长度，12 只是最大值，当你存储的字符小于 12 时，按实际长度存储。</li>\n</ul>\n<h2 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h2><p>使用语句 <code>SELECT * FROM 表的名字;</code> 查看表中的内容，刚建的表内是空的，通过 INSERT 语句向表中插入数据，语句格式为：</p>\n<pre><code>INSERT INTO 表的名字(列名a,列名b,列名c) VALUES(值1,值2,值3);\n</code></pre><p>例如像表employee内加入内容：</p>\n<pre><code>INSERT INTO employee(id,name,phone) VALUES(01,&apos;Tom&apos;,110110110);\nINSERT INTO employee VALUES(02,&apos;Jack&apos;,119119119);\nINSERT INTO employee(id,name) VALUES(03,&apos;Rose&apos;);\n</code></pre><p>有的数据需要用单引号括起来，比如 Tom、Jack、Rose 的名字，这是由于它们的数据类型是 CHAR 型。此外 VARCHAR,TEXT,DATE,TIME,ENUM 等类型的数据也需要单引号修饰，而 INT,FLOAT,DOUBLE 等则不需要。</p>\n<h1 id=\"基础篇-SQL-的约束\"><a href=\"#基础篇-SQL-的约束\" class=\"headerlink\" title=\"基础篇 - SQL 的约束\"></a>基础篇 - SQL 的约束</h1><h2 id=\"约束分类\"><a href=\"#约束分类\" class=\"headerlink\" title=\"约束分类\"></a>约束分类</h2><p>约束是一种限制，它通过对表的行或列的数据做出限制，来确保表的数据的完整性、唯一性。在MySQL中，通常有这几种约束：</p>\n<table>\n<thead>\n<tr>\n<th>约束类型：</th>\n<th style=\"text-align:center\">主键</th>\n<th style=\"text-align:right\">默认值</th>\n<th style=\"text-align:right\">唯一</th>\n<th style=\"text-align:right\">外键</th>\n<th style=\"text-align:right\">非空</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>关键字：</td>\n<td style=\"text-align:center\">PRIMARY KEY</td>\n<td style=\"text-align:right\">DEFAULT</td>\n<td style=\"text-align:right\">UNIQUE</td>\n<td style=\"text-align:right\">FOREIGN KEY</td>\n<td style=\"text-align:right\">NOT NULL</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>主键 (PRIMARY KEY)是用于约束表中的一行，作为这一行的唯一标识符，在一张表中通过主键就能准确定位到一行，因此主键十分重要。主键不能有重复且不能为空。还有一种特殊的主键——复合主键。主键不仅可以是表中的一列，也可以由表中的两列或多列来共同标识。</p>\n</li>\n<li><p>默认值约束 (DEFAULT) 规定，当有 DEFAULT 约束的列，插入数据为空时，将使用默认值。DEFAULT 约束只会在使用 INSERT 语句时体现出来，INSERT语句中，如果被 DEFAULT 约束的位置没有值，那么这个位置将会被 DEFAULT 的值填充。</p>\n</li>\n</ul>\n<h1 id=\"基础篇-SELECT-语句详解\"><a href=\"#基础篇-SELECT-语句详解\" class=\"headerlink\" title=\"基础篇 - SELECT 语句详解\"></a>基础篇 - SELECT 语句详解</h1><h1 id=\"基础篇-数据库及表的修改和删除\"><a href=\"#基础篇-数据库及表的修改和删除\" class=\"headerlink\" title=\"基础篇 - 数据库及表的修改和删除\"></a>基础篇 - 数据库及表的修改和删除</h1><h1 id=\"基础篇-其他基本操作\"><a href=\"#基础篇-其他基本操作\" class=\"headerlink\" title=\"基础篇 - 其他基本操作\"></a>基础篇 - 其他基本操作</h1>","categories":["Tech"],"tags":["Notes","MySQL"]},{"title":"《思维导图使用手册》","url":"http://mutemeteor.com/2017/02/03/思维导图使用手册/","content":"<p>寒假在家读了几本书，整理了几个导图。</p>\n<p>东尼·博赞的这本书可以说是思维导图制作的入门书，内容不多，算上做图的时间，大概读了两个小时左右。总得来说讲的还是比较浅，加读《如何阅读一本书》效果可能会更好。</p>\n<p><a href=\"http://ol4v2310i.bkt.clouddn.com/use%20your%20head.svg\" target=\"_blank\" rel=\"external\">《思维导图使用手册》 mind map</a><br><a id=\"more\"></a><br><a href=\"http://ol4v2310i.bkt.clouddn.com/use%20your%20head.svg\" target=\"_blank\" rel=\"external\"><br>    <img src=\"http://ol4v2310i.bkt.clouddn.com/use%20your%20head.svg\" alt=\"思维导图使用手册\">\n</a></p>\n","categories":["读书记"],"tags":["Mind Map"]},{"title":"大唐叛逆记","url":"http://mutemeteor.com/2016/11/19/大唐叛逆记/","content":"<blockquote>\n<p>我喉咙干燥，也不愿发声，听天由命<br>  我来寻找的是高贵的朋友，锦绣的前程<br>                    ——木心《伪所罗门书》</p>\n</blockquote>\n<h1 id=\"小絮叨\"><a href=\"#小絮叨\" class=\"headerlink\" title=\"小絮叨\"></a><strong>小絮叨</strong></h1><p>懒癌晚期的某人终于在11月下旬敲下了十一游记的第一个字。所幸时间隔得也不算太久，希望记忆力奇差的我没有忘光其中的细节。</p>\n<a id=\"more\"></a>\n<p>种种原因，决定去西安的时候已经是9月27日了，花了一个下午的时间敲定了路线。</p>\n<p>旅行不能怕麻烦。旅行的意义本就是在循规蹈矩的生活中注入一剂催化剂，每个躁动的灵魂都渴望新鲜感。渴望地理环境上的改变能唤起一些内心中将死的东西。渴望一场或浪漫或刺激的邂逅。渴望远眺一座不知名的山。渴望遇见一个触动心灵的人。</p>\n<p>当列车伴着报站声启动，当清风摇曳山谷，当妖冶的霓虹灯闪烁，当各色各样的方言穿梭耳畔······</p>\n<p><strong>你就知道，你的旅程，开始了。</strong></p>\n<p><br></p>\n<h1 id=\"烟台\"><a href=\"#烟台\" class=\"headerlink\" title=\"烟台\"></a><strong>烟台</strong></h1><p><br><br><img src=\"http://oevzkmimu.bkt.clouddn.com/B612_20161008_173542.jpg\" alt=\"烟台站\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 烟台站 </center></font></p>\n<p>这次旅行完全是轻装上阵，一个挎包，几件衣服，一包洗漱用品，单反也没拎，颇有点出门逛街的感觉。</p>\n<p><img src=\"http://oevzkmimu.bkt.clouddn.com/B612_20161008_173603.jpg\" alt=\"烟台站\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 烟台站 </center></font></p>\n<p>10.2 从烟台出发。刚下完雨，空气还是湿的，深吸一口，胸腔喉咙里都是微甜的味道。<br>离上车的时间还早，在麦叔叔点了一个套餐，掏出kindle，打发时间。</p>\n<p><br>   </p>\n<h1 id=\"洛阳\"><a href=\"#洛阳\" class=\"headerlink\" title=\"洛阳\"></a><strong>洛阳</strong></h1><p><br></p>\n<blockquote>\n<p>离歌且莫翻新阕，<br>一曲能教肠寸结。<br>直须看尽洛阳花，<br>始共春风容易别。</p>\n</blockquote>\n<p>坐了十几个小时的火车，中转郑州，抵达洛阳。</p>\n<p>十三朝古都，名字好听，在河南——这基本就是我对洛阳的全部印象。</p>\n<p>很多时候，我们对一个城市了解都是由一些零碎的信息拼凑起来的。教科书，网络，别人的言谈——这些间接的信息会在我们的脑海里不断汇集，最后打下烙印。这些烙印有好有坏，不过终是变成了我们思维中的一部分。而旅行，正是打破这一惯性思维的行为。</p>\n<p>所见所闻所感比所有的道听途说都来的真实。你会发现你遇到的东北人不都是会打架的，河南人很真挚，南京人也能分清nl。</p>\n<p><strong>世界不再是你想象中的模样，它就在你眼前，无比鲜活。</strong></p>\n<h2 id=\"洛阳的傍晚\"><a href=\"#洛阳的傍晚\" class=\"headerlink\" title=\"洛阳的傍晚\"></a><strong>洛阳的傍晚</strong></h2><p><img src=\"http://oevzkmimu.bkt.clouddn.com/B612_20161008_183509_mh1475922966592.jpg\" alt=\"洛阳龙门站\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 洛阳龙门站 </center></font></p>\n<p>10.3 下午6时抵达洛阳龙门高铁站。下站人不多，全然没有我想象中十一“该有”的样子。</p>\n<p><img src=\"http://oevzkmimu.bkt.clouddn.com/IMG20161003175624_mh1475923885527.jpg\" alt=\"落日\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 落日 </center></font></p>\n<p>傍晚的落日，真美，就像洛阳这座城市，温暖而内敛。</p>\n<p>溜溜达达地走出车站，转了一圈，没找到打出租的地方，又绕回高铁站，干脆坐了公交，K75路，6站地。</p>\n<p>洛阳的公交站点很有特点，都是路口的名字，像厚载门街关林路口，厚载门街翠云路口，厚载门街牡丹大道路口……</p>\n<p>洛龙区应该是新开发的区，没有历史的痕迹，都是大高楼，人也不多，道路都很干净。</p>\n<p><img src=\"http://oevzkmimu.bkt.clouddn.com/B612_20161008_185141.jpg\" alt=\"秘制鸡丝面\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 秘制鸡丝面 </center></font></p>\n<p>坐了一天的火车，浑身乏累，所以下楼觅了个食之后就回来洗澡睡觉了。</p>\n<h2 id=\"洛阳的街\"><a href=\"#洛阳的街\" class=\"headerlink\" title=\"洛阳的街\"></a><strong>洛阳的街</strong></h2><p>10.4 洗漱之后退了房，依旧75路向河科大进发，寻找小伙伴。小伙伴是初高中同校的同学，一个搞播音的工科男，很swag，和我一样很跨界。</p>\n<p>我们在他学校转一圈，校园是老校区，很有历史感，临街就是法国大梧桐树，有5、6层高，十月，叶子还没黄透，一阵风吹过来，扫过几片，簌簌作响。</p>\n<p>到了吃中饭的时间，小伙伴亮出了他的小绵羊，载着我，开始了洛阳一日环游。</p>\n<p>当天洛阳很热，有将近30度，太阳灼烤着，像要把人晒化掉。秋老虎名不虚传。不过幸亏我们有小绵羊，坐上去一秒上天堂，简直不要更！美！好！</p>\n<p>第一站，锅贴烧麦小笼包！</p>\n<p><img src=\"http://oevzkmimu.bkt.clouddn.com/B612_20161005_164728.jpg\" alt=\"锅贴烧麦小笼包\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 锅贴烧麦小笼包 </center></font></p>\n<p>一家老店，人很多，中午热热闹闹的，很有烟火气。小伙伴很贴心的把每样都点了一份，所以每个都尝了尝。炒鸡好吃。</p>\n<h2 id=\"洛阳的景\"><a href=\"#洛阳的景\" class=\"headerlink\" title=\"洛阳的景\"></a><strong>洛阳的景</strong></h2><p><img src=\"http://oevzkmimu.bkt.clouddn.com/B612_20161008_192945.jpg\" alt=\"丽景门\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 洛阳老街 丽景门 </center></font></p>\n<p>吃完午饭，去火车站换了票，到丽景门的时候是下午，想来晚上应该会更美。</p>\n<p><img src=\"http://oevzkmimu.bkt.clouddn.com/B612_20161005_221340.jpg\" alt=\"十字街\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 十字街 </center></font></p>\n<p><img src=\"http://oevzkmimu.bkt.clouddn.com/B612_20161008_192034.jpg\" alt=\"鼓楼\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 鼓楼 </center></font></p>\n<p>洛阳的鼓楼不大。没有西安的鼓楼那么气势恢宏，但依然有历史的沉重感。（一抹墙皮就哗哗往下掉···</p>\n<p><img src=\"http://oevzkmimu.bkt.clouddn.com/B612_20161008_192801.jpg\" alt=\"明堂天堂\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 明堂&amp;天堂 </center></font></p>\n<p>武则天登基的宫殿。她执政的15年，几乎都是在洛阳度过的。<br>不过明堂给人感觉修复得过多，没甚么历史感。一进门就是跑男的宣传，商业化过重。<br>明堂里主要还是关于唐朝文化的介绍，融入了很多科技的元素，比如用VR看洛阳城，知识竞答上状元榜等等。</p>\n<p><img src=\"http://oevzkmimu.bkt.clouddn.com/B612_20161005_221201.jpg\" alt=\"祈福\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 天堂门前的祈福地 </center></font><br>就在天堂门楼逛了一圈，懒癌发作，没进去看。</p>\n<p>出来之后，和小伙伴去了凯旋门，吃了晚饭，像肉夹馍一样的东西，具体名字，我不记得了······<br>然后，打车，回到龙门高铁站，困到坐着睡了一觉。</p>\n<p><br>   </p>\n<h1 id=\"西安\"><a href=\"#西安\" class=\"headerlink\" title=\"西安\"></a><strong>西安</strong></h1><p><br></p>\n<blockquote>\n<p>长安大道连狭斜，青牛白马七香车。玉辇纵横过主第，金鞭络绎向侯家。<br>龙衔宝盖承朝日，凤吐流苏带晚霞。百丈游丝争绕树，一群娇鸟共啼花。</p>\n</blockquote>\n<p>西安，古称“长安”，简称“秦”。讲中国地理的时候总会提到一条什么都管的分界线——秦淮一线。秦即秦岭，横亘在中国内陆的腹部地区。由于古代秦人和秦帝国的威名，且伫立于秦国之南，所以谓之“秦”岭。</p>\n<p>西安给我的第一印象，应该就是泡馍，凉皮，肉夹馍了。</p>\n<p>到西安北站的时候已经是晚上十点了，北站特别大，好半天才找到出口。</p>\n<h2 id=\"城墙\"><a href=\"#城墙\" class=\"headerlink\" title=\"城墙\"></a><strong>城墙</strong></h2><p>你爱这里城墙，<br>古墓，长歌，<br>蔓草里开野花朵。<br>                                             ——林徽因《城楼上》  </p>\n<p><img src=\"http://oevzkmimu.bkt.clouddn.com/B612_20161005_132725.jpg\" alt=\"城墙\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 登城墙 </center></font></p>\n<p>10.5 和小伙伴们在政协大酒会合后，睡了一个饱觉。第二天出门之前犹豫了好久要不要带伞，最后还是因为懒癌发作，没带伞就出门了。结果——刚上城墙就被雨拍在了上面······<br><img src=\"http://oevzkmimu.bkt.clouddn.com/B612_20161005_132744.jpg\" alt=\"转角\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 城墙转角 </center></font></p>\n<p>一路淋雨一路照。雨不小，走了一个小时，几乎都淋透了。所幸天气还不是那么冷。<br>路上咕咚勾搭了一个日本大叔，我们用尽毕生所学的日语和他唠了一路，磕磕巴巴。</p>\n<p><img src=\"http://oevzkmimu.bkt.clouddn.com/B612_20161005_132821.jpg\" alt=\"永宁门\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 永宁门 </center></font></p>\n<p>一个多小时后终于找到了一个出口，为了犒劳被大雨拍傻了的我们，我们点了一个全家桶。<br>下雨天，淋雨和全家桶挺配的。</p>\n<p>没有带单反的我就犹如拍照少了一条胳膊。以下是灵魂摄手和灵魂模特的城墙照。</p>\n<p><img src=\"http://oevzkmimu.bkt.clouddn.com/B612_20161005_133954.jpg\" alt=\"城墙\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 咕咚&amp;郑小辫 </center></font></p>\n<p><img src=\"http://oevzkmimu.bkt.clouddn.com/B612_20161005_133056.jpg\" alt=\"城墙\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 崔崔 </center></font></p>\n<h2 id=\"街景\"><a href=\"#街景\" class=\"headerlink\" title=\"街景\"></a><strong>街景</strong></h2><p><img src=\"http://oevzkmimu.bkt.clouddn.com/B612_20161008_184249.jpg\" alt=\"从城墙看西安\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 从城墙看西安 </center></font></p>\n<p>城墙之后，第二天去了回民街，因为下雨，所以也没照照片。回民街和南锣鼓巷、芙蓉街都差不多，可能每一座城市都有一条这样的小吃街，只不过名字不同而已。吃了久负盛名的羊肉泡馍，院长和咕咚很喜欢，我和崔崔觉得不甚合口味。</p>\n<p>吃了这么多城市，回头看看，好像还是我大辽宁的东西最好吃。</p>\n<p>想来只是口味作祟而已。</p>\n<p><img src=\"http://oevzkmimu.bkt.clouddn.com/B612_20161008_192827.jpg\" alt=\"夜\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 西安的夜景 </center></font></p>\n<p>西安的夜很静。城墙将这座千年古都包围了起来，登楼远望，闹市风光，秦川景色尽收眼底。<br>在现代文明的挤压下，钟鼓楼依旧熠熠生辉。</p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a><strong>最后</strong></h1><p>这次旅行最大的收获应该是遇到了形形色色的人，一路火车转辗，因为这些人，倒也没有那么疲累了。当时买返程票的时候，卧铺已经没有了，不得已买了张硬座。24个小时，我们四个吃吃喝喝玩玩，大家轮着睡，过得也还算快。</p>\n<p>这次旅行，西安和我想象的样子不那么相同。也可能是我待得时间短，还没有足够的品味这个城市的魅力。</p>\n<p>倒是洛阳，很让我惊喜。安静又内敛，干净又有沉淀。</p>\n<p>旅行本身就是一次自我的寻找与碰撞。<br>你来到一座城市，在树荫中缓步穿行，和风拂过你的面颊，口袋里揣着去往下一站地的车票，你不知道下一站会遇到谁，会和谁交谈，一切幸乐都在赋予与被给予之间升华。</p>\n<p><strong>热闹过后才安静。</strong><br><br></p>\n","categories":["旅人说"],"tags":["旅行"]},{"title":"《春天责备》","url":"http://mutemeteor.com/2016/11/02/春天责备/","content":"<p><a href=\"http://oevzkmimu.bkt.clouddn.com/%E6%98%A5%E5%A4%A9%E8%B4%A3%E5%A4%87.jpg\" target=\"_blank\" rel=\"external\"><br>    <img src=\"http://oevzkmimu.bkt.clouddn.com/%E6%98%A5%E5%A4%A9%E8%B4%A3%E5%A4%87.jpg\" alt=\"春天责备\">\n</a></p>\n<ul>\n<li><p>马齿咀嚼青草，星星在黑暗中，咀嚼亡魂。</p>\n</li>\n<li><p>还没到秋天<br>街就空了<br>街隔着玻璃窗伸手乞讨<br>他想要一个来自远方的脏孩子<br>我举着枪 准星巨大如天</p>\n</li>\n<li><p>星光下 一千个失眠者列队静默<br>今夜，没有爱情<br>我怜悯老迈的天空</p>\n<a id=\"more\"></a>\n</li>\n<li><p>如果我是尸体<br>就该投入明亮的白昼焚烧<br>在阳光下 请你喝一瓶啤酒<br>谈谈春天，然后，告诉你我有多想女人</p>\n</li>\n<li><p>大鹏<br>克服了九万里天风<br>野马也 尘埃也<br>三千世界的呼吸<br>我宁愿叫云蓬<br>毫无方向的宿命者<br>一直麻雀惊起<br>滴水穿石<br>些许怀疑<br>都是命运<br>羊跑了</p>\n</li>\n<li><p>有夜行者敲门 我身体就开门 有野猫怀孕 我就是充满鱼腥味的窝</p>\n</li>\n</ul>\n<p><br><br><br></p>\n","categories":["读书记"],"tags":["诗"]},{"title":"刨个坑，埋坛酒","url":"http://mutemeteor.com/2016/10/12/刨个坑，埋坛酒/","content":"<p><img src=\"http://oevzkmimu.bkt.clouddn.com/paogegengmaitanjiu.png\" alt=\"刨个坑，埋坛酒\"></p>\n<blockquote>\n<p>“Life is like spring dream which vanishes without a trace.” I should be ungrateful to the gods if I did not try to put my life down on record.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p><br><br>这几年，碎片化的信息看得太多，脑子里都是支离破碎的东西。12年开始玩微博，这三四年间，写中文超过300字儿的次数用两只手也数得过来。我想着，再这样下去，语言能力离退化成原始人也不远了。上周上语言学的课，芮老师笑说我们作为学语言的学生，语言组织能力还不如中学生，说个主旨改个论文题目都磕磕巴巴，半点没有学语言的样子。我心想，还真是这样。搞翻译的时候也是，常常有心无力，英文原文摆在那儿，意思心里明白得很，翻译出来却经不起一点推敲。年前无意在家中翻到高中写的文章，自己都有点诧异，原来自己曾经文笔也好过，只不过这“一过”过了多久，我还真没脸去说。</p>\n<p>最近一段时间，尝试着把微博朋友圈之类的东西都关掉了，有倾诉欲是时候，就拿出纸笔记一记。</p>\n<p>说实话，感觉挺棒的。从前刷着这些碎片化的信息，不但浪费时间，而且正面的负面的消息都一股脑的涌进来，好多东西都是被迫接受，厌烦得很。现在停了这些零碎八碎的东西，读书的时间更多了，思考的时间也更多了。心很静，也很满。</p>\n<p>《浮生六记》里，沈复在第一章的闺房记乐里写道，东坡云：事如春梦了无痕，苟不记之笔墨，未免有辜彼苍之厚。我想，对抗碎片化的最好办法，就是把自己的生活成篇的纪录下来吧。</p>\n<p>白云苍狗，苍狗白衣。</p>\n<p>现今挖个坑，埋下一坛酒，待到来年花开时，应该会有一番香气吧。</p>\n","categories":["子不语"],"tags":["随笔"]},{"title":"邂逅滇渝——山城与艳遇之都的慢摇滚","url":"http://mutemeteor.com/2016/10/12/邂逅渝滇——山城与艳遇之都的慢摇滚/","content":"<h1 id=\"行-又行\"><a href=\"#行-又行\" class=\"headerlink\" title=\"行 又行\"></a><strong>行 又行</strong></h1><p>   那年的八月<br>   自月初起<br>   行进的火车便没停过<br>   一次次从站台登上<br>   缓过神来，已经进入了中国腹地<br>   夏风飒飒，黄葛树满树翠绿<br>   连天都是深蓝色的<br>   阳光不只温暖甚至刺眼<br>   旅行，将那些伤痛都鄙夷化了吧<br>   市街的喧嚣里，一切内心的声音都渐渐变小</p>\n<p>   信鸽俯冲着扑来<br>   我所等待的，正是这样一封来信</p>\n<a id=\"more\"></a>\n<p><br></p>\n<h1 id=\"重庆\"><a href=\"#重庆\" class=\"headerlink\" title=\"重庆\"></a><strong>重庆</strong></h1><blockquote>\n<p>曾经沧海难为水，<br>  除却巫山不是云。<br>  取次花丛懒回顾，<br>  半缘修道半缘君。<br>  ——元稹 《离思》</p>\n</blockquote>\n<p>想到重庆，不知为何，第一时间映在我脑海里的，就是这首诗。唐宋时期，夔州控制下的长江三峡已是中国南方最繁盛的交通走廊，而夔州之山就是现今的巫山。巫山地处三省交界，主峰便位于重庆境内。</p>\n<p>重庆是我从高中时就向往的城市了，也许是因为在大东北生活了二十年，平原的地貌形态已经镌刻在我的脑子里，无法想象重庆的“360度立体全方位超现实魔幻主义建筑风格”会是什么样的——“坐公交车犹如过山车”，“坐一站地愣是翻了一座山”，“用百度地图定位发现自己在江中”，“你永远不知道在重庆下个转角会遇到什么”，“1楼、4楼、12楼都有出口到马路”···去了重庆，你会发现，这些话真的所言非虚。<br><br></p>\n<p><img src=\"http://ogzk5vp9m.bkt.clouddn.com/0qinggui.jpg\" alt=\"地铁\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 重庆轻轨 </center></font><br>一路上溜溜达达，到重庆北站的时候已经是8月2号了。重庆不愧是“四大火炉”之一，8月还正是重庆最热的时候，一下火车，一股热气就扑面而来，感觉整个人都被包裹在潮湿中。</p>\n<p>在重庆定的住宿是公寓型民宿，地点比较好，紧靠日月光广场，轻轨2号线可以直达。<br>说到交通，重庆地铁、轻轨并行，地铁速度稍快，最高能达到每小时100km，轻轨则在80左右。因为考虑到重庆地形过于复杂的问题，成本比较高，所以很多情况下都是首选轻轨。</p>\n<p>重庆的轻轨坐起来特别刺激。坐在上面，你会穿过有人居住的楼房，驶过滚滚的长江，行于山谷之间，川渝美景尽收眼底。<br><br></p>\n<h2 id=\"重庆-·-街景\"><a href=\"#重庆-·-街景\" class=\"headerlink\" title=\"重庆 · 街景\"></a><strong>重庆 · 街景</strong></h2><p><img src=\"http://ogzk5vp9m.bkt.clouddn.com/3gaolou.jpg\" alt=\"擎天楼\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 擎天楼 </center></font><br>重庆放眼望去都是30层以上的高楼大厦。<br>看不见天空。映在长江上的是游船，是残垣，是入云的摩天大楼。</p>\n<p><img src=\"http://ogzk5vp9m.bkt.clouddn.com/1changjiang.jpg\" alt=\"长江\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 长江 </center></font><br>重庆老城区的建筑都很有历史感，穿梭其中，<strong>你会感受到独属于重庆的文化</strong>。</p>\n<p>重庆棒棒工随处可见，人数也非常庞大，年龄在十几岁到五六十岁不等。他们遍布于重庆街头的每一个角落，码头、车站、商厦，从衣物、砖头到汽车轮胎，一根竹棒，几捆绳子就是全部的劳动工具。去重庆回来后，恰好读了一本书，一位美国记者写的《江城》。文中的river town就是从前的小城涪陵现今重庆的一个地级行政区。在这本书中，笔者也对棒棒工着墨不少，可见棒棒工的历史在重庆已然不短。然现在，三分之二的棒棒工年龄都在五十岁以上，这个号称“民工之卵”的群体也在走向衰亡。</p>\n<p><img src=\"http://ogzk5vp9m.bkt.clouddn.com/2lupai.jpg\" alt=\"指路牌\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 指路牌 </center></font><br>重庆就像一个大迷宫，还属于超s级难解型的。</p>\n<p>在重庆，方向感这种东西等于没有，在其他城市，几乎一个百度地图就能走天下了，但是在重庆，什么地图都不管用，如果你敢跟着百度地图走，估计就离跳进长江不远了。</p>\n<p><img src=\"http://ogzk5vp9m.bkt.clouddn.com/4jiefangbei.jpg\" alt=\"解放碑\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 重庆的标志建筑，解放碑  </center></font><br>解放碑，是重庆的标志建筑物之一，位于渝中区CBD，有旋梯可达顶端。碑顶有时钟和方向标志。我们也就是在这儿走丢的。从这到住的地方百度地图显示大概要十几分钟步行，我们愣是走了一个小时。后来实在走蒙了想打车，结果司机都不愿意拉我们，说太近了。感觉整个人都被嫌弃了。</p>\n<h2 id=\"重庆-·-食\"><a href=\"#重庆-·-食\" class=\"headerlink\" title=\"重庆 · 食\"></a><strong>重庆 · 食</strong></h2><p><img src=\"http://ogzk5vp9m.bkt.clouddn.com/10chaoshou.jpg\" alt=\"重庆·食\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 麻辣抄手 </center></font><br>麻辣抄手应该算重庆的特色美食之一了。没有找很大的店吃，想来街边的小店应该更有本地特色的风味。这抄手吃起来辣而不油，香而不腻，皮薄馅大，几朵葱花放进去，还有淡淡的清香。</p>\n<p><img src=\"http://ogzk5vp9m.bkt.clouddn.com/13mupodpufu.jpg\" alt=\"重庆·食\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 麻婆豆腐 </center></font><br>这碗麻婆豆腐和在大理的小厨留客吃到的完全不一样。总之吃完这个，我再也不敢说自己能吃辣了。</p>\n<p><img src=\"http://ogzk5vp9m.bkt.clouddn.com/12shuizhuyu.jpg\" alt=\"重庆·食\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 翠云水煮鱼 </center></font></p>\n<p><img src=\"http://ogzk5vp9m.bkt.clouddn.com/11yunou.jpg\" alt=\"重庆·食\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 干煸芸豆 </center></font><br>上面这三道菜应该算是正宗的川菜了。挑了一家美团上评价不错的店，较场口的味觉系。也是到重庆吃的第一顿饭。听店主说，在夏季，会把原有的比较辣的辣椒换成微辣的辣椒。像翠云水煮鱼里用的辣椒就是国内顶级辣椒，贵州“子弹头”——只香不辣。</p>\n<p>口味很好，喜欢吃辣的人不能错过。不过重庆的辣和我印象中吃过的辣完全不同，痛感强烈，吃完感觉嘴巴和脑子和自己都没什么关系了，起来走路也有点蒙，后劲特别大。</p>\n<h2 id=\"重庆-·-大学\"><a href=\"#重庆-·-大学\" class=\"headerlink\" title=\"重庆 · 大学\"></a><strong>重庆 · 大学</strong></h2><p>习惯于在到每个城市后，都去逛一逛它的大学。因为我一直相信，每一所学校都是城市的一部史书，在无声中记载着这个城市的变化。到重庆也是一样，规划路线时便留了半天给大学城。吃完饭，坐着轻轨，去重庆大学城转了一圈。放假期间，没什么人，包场看了个电影。</p>\n<p><img src=\"http://ogzk5vp9m.bkt.clouddn.com/5daxuecheng.jpg\" alt=\"重庆大学方向\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 大学城方向 </center></font></p>\n<p><img src=\"http://ogzk5vp9m.bkt.clouddn.com/7cqdx.jpg\" alt=\"重庆大学·正门\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 重庆大学·正门 </center></font></p>\n<p><img src=\"http://ogzk5vp9m.bkt.clouddn.com/6xiaoyuan_che.jpg\" alt=\"重庆大学·未知名的植物\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 脚踏车 </center></font></p>\n<p><img src=\"http://ogzk5vp9m.bkt.clouddn.com/8xiaohua.jpg\" alt=\"重庆大学·未知名的小花\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 未知名的小花 </center></font></p>\n<p>重庆属于有武侠梦的侠客，也属于有浪漫心的少女。它泼辣又不失温柔，潇洒又不乏内敛。它以峭拔的姿态守护着独属山城的美。</p>\n<p>重庆是一个让人忘不得的城市。它的山川，它的河谷，它的璀璨，它的深邃，<strong>你开始只是细细的呷尝着，却又忍不住咀嚼起来，带着力量，试图将这一切吞入腹中，永不相忘</strong>。</p>\n<p><br></p>\n<h1 id=\"昆明\"><a href=\"#昆明\" class=\"headerlink\" title=\"昆明\"></a><strong>昆明</strong></h1><blockquote>\n<p>波光潋滟三千顷，莽莽群山抱古城。<br>  四季看花花不老，一江春月是昆明。<br>     ——《昆明行记》</p>\n</blockquote>\n<p><img src=\"http://ogzm8sn8w.bkt.clouddn.com/1kunmingz.jpg\" alt=\"昆明站\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 昆明站 </center></font><br>在火车上睡了一晚，8月5号清晨，到了昆明。</p>\n<p>来之前对昆明的印象并不是很好，曾经一度被“昆明火车站”事件洗脑得很严重。所以也没有定停留昆明的时间，想着早上5点到昆明，晚上7点去大理，中间的时间也够在昆明逛逛的了。不过，到了昆明，我只想对当初定路线的自己说，孩子，你还是太肤浅、太天真。</p>\n<p>昆明这个城市要比我想象的好得多，原谅用了“好”这个泛泛的词，因为停留昆明的时间太短，确实也没有机会更多的体会这个城市的美。</p>\n<p><img src=\"http://ogzm8sn8w.bkt.clouddn.com/2zhusu.jpg\" alt=\"别墅青旅\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 别墅青旅 </center></font><br>昆明是这次旅行唯一现定住宿的一站。不过很幸运，定到了一家在别墅区、离滇池很近的青旅。乘双层巴士到住宿处大概1一小时左右，到青旅整顿了一下之后，我们就租了自行车向民族村进发。</p>\n<p><img src=\"http://ogzm8sn8w.bkt.clouddn.com/4xiaohua.jpg\" alt=\"小粉\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 小花 </center></font><br>骑行去民族村时，遇到的路边的小花。觉得很漂亮，就顺手拍了下来。</p>\n<p><img src=\"http://ogzm8sn8w.bkt.clouddn.com/3minzucun.jpg\" alt=\"民族村\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 民族村正门 </center></font><br>昆明的天特别蓝，空气也很清新。我们跟着百度地图，一路骑到了民族村。</p>\n<p><img src=\"http://ogzm8sn8w.bkt.clouddn.com/5daxiang.jpg\" alt=\"湖光山色\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 大象 </center></font><br>民族村位于滇池国家旅游度假区内，背靠森林公园，紧邻“高原明珠”滇池。</p>\n<p>众所周知，云南是我国少数民族最多的省份，全省少数民族人口占总人口的近三分之一。民族村便是少数民族小聚居的一个缩影，将少数民族文化风情、音乐舞蹈、宗教信仰浓缩于湖光山色之中。</p>\n<p>我们到的当天民族村内还挂着“火舞民族村，狂欢滇池夜”的条幅，想来火把节应该是刚刚过去不久。</p>\n<p><br></p>\n<h1 id=\"大理\"><a href=\"#大理\" class=\"headerlink\" title=\"大理\"></a><strong>大理</strong></h1><blockquote>\n<p>下关风，上关花，苍山雪，洱海月。<br>谓之“风花雪月”。</p>\n</blockquote>\n<p>大理啊，真是一个听名字就透着浪漫的地方。听说大理是小清新的必到地之一，作为一个伪清新实重口的女青年，我决定来大理看看，“风花雪月”是什么样子的。</p>\n<p>大理作为一个18线开外的旅游城市，交通和省会城市昆明简直是没法比。除了大理古城之外，市区看起来也相对来讲比较落后。清晨到达大理站，坐了一个半小时的公交，终于颠到了古城区。</p>\n<h2 id=\"大理-·-建筑\"><a href=\"#大理-·-建筑\" class=\"headerlink\" title=\"大理 · 建筑\"></a><strong>大理 · 建筑</strong></h2><p><img src=\"http://ogzkwweuh.bkt.clouddn.com/1lupan.jpg\" alt=\"路牌\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 路牌 </center></font><br>大理古城东门进入的第一个路口。</p>\n<p><img src=\"http://ogzkwweuh.bkt.clouddn.com/2baizuminju.jpg\" alt=\"白族民居\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 白族民居 </center></font></p>\n<p><img src=\"http://ogzkwweuh.bkt.clouddn.com/5jianzhu.jpg\" alt=\"白族民居\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 白族民居 </center></font><br>白族民居多为二层楼房，三开间，筒板瓦盖顶，前伸重檐，呈前出廊格局。墙脚、门头、窗头、飞檐等部位用刻有几何线条和麻点花纹的石块，墙壁常用天然鹅卵石砌筑。墙面石灰粉刷，白墙青瓦，尤耀人眼目。</p>\n<p><img src=\"http://ogzkwweuh.bkt.clouddn.com/3%20fenghxy.jpg\" alt=\"白族民居\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 写着风花雪月的飞檐 </center></font></p>\n<p><img src=\"http://ogzkwweuh.bkt.clouddn.com/4jinhuamw.jpg\" alt=\"金花木屋\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 金花木屋 </center></font><br>大理的民居建筑特别的漂亮，很有本地的特色。</p>\n<h2 id=\"大理-·-明信片\"><a href=\"#大理-·-明信片\" class=\"headerlink\" title=\"大理 · 明信片\"></a><strong>大理 · 明信片</strong></h2><p><img src=\"http://ogzkwweuh.bkt.clouddn.com/6mingxinpiand.jpg\" alt=\"明信片小店\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 明信片小店 </center></font></p>\n<p>来大理的第二天。<br>在古城里各种扫荡。明信片儿，寄出去了二十几张。</p>\n<p>下午下了瓢泼大雨，得亏带了雨衣。<br>积水到了小腿肚，我们不管不顾地披着雨衣在里面淌啊淌···<br>就着雨水蘸邮票，把心情邮塞进了邮筒里。</p>\n<p><img src=\"http://ogzkwweuh.bkt.clouddn.com/7chengxie.jpg\" alt=\"明信片\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 手写明信片 </center></font><br>这是某橙写的。</p>\n<h2 id=\"大理-·-苍山洱海\"><a href=\"#大理-·-苍山洱海\" class=\"headerlink\" title=\"大理 · 苍山洱海\"></a><strong>大理 · 苍山洱海</strong></h2><p>提到大理，最不能忘的应该就是苍山洱海了。古城区内遍是去苍山洱海的小旅游团，每走一百米就会有人来跟你搭讪。因为古城区离苍山洱海不是特别近，所以我们也订了一个团，跟着大巴走。</p>\n<p><img src=\"http://ogzkwweuh.bkt.clouddn.com/8suodao.jpg\" alt=\"苍山索道\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 苍山索道 </center></font><br>坐这个还是有点小恐高。不过风景特别的美，也让人顾不上害怕了。</p>\n<p><img src=\"http://oevzkmimu.bkt.clouddn.com/IMG_20160928_131004.jpg\" alt=\"姻缘锁\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 姻缘锁 </center></font><br>苍山顶的姻缘锁。<br>听说相爱的人把彼此锁在这儿，就永远不会分离。</p>\n<p>不知道是不是真的，但有一点可以肯定——能爬上来的情侣，体力一定都特别好。<br>因为实在是太陡了！太高了！太累了！<br>爬到半山腰的时候，有个可以下山的出口，工作人员在那喊，老人孩子爬不动的可以从这边下去了啊。我刚要往下山的方向迈出一只脚，就看一个60多岁精神矍铄的老大爷往上爬去了，我不得不颤颤巍巍的又把那只脚收了回来···</p>\n<p><img src=\"http://ogzkwweuh.bkt.clouddn.com/9csseeeh.jpg\" alt=\"苍山洱海\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 苍山洱海 </center></font><br>不过爬到山顶了，景色确实特别的美。</p>\n<p><img src=\"http://ogzkwweuh.bkt.clouddn.com/10tianlongdong.jpg\" alt=\"苍山洱海\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 天龙洞</center></font><br>天龙八部取景拍摄的地方。</p>\n<p><img src=\"http://ogzkwweuh.bkt.clouddn.com/12erhaiyouhuan.jpg\" alt=\"苍洱大观\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 洱海游船</center></font><br>爬完苍山后，又坐着游船在洱海上转了一圈。</p>\n<p><img src=\"http://ogzkwweuh.bkt.clouddn.com/11cloud.jpg\" alt=\"苍山洱海\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 大理的云 </center></font></p>\n<p><img src=\"http://ogzkwweuh.bkt.clouddn.com/14yuanshan.jpg\" alt=\"远山\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 远山 </center></font></p>\n<p><img src=\"http://ogzkwweuh.bkt.clouddn.com/13cangshanerhai.jpg\" alt=\"洱海\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 洱海 </center></font></p>\n<p><strong>远山如黛，静水微澜。</strong><br><strong>山风猎猎，海浪沧沧。</strong></p>\n<p>这就是大理，一个能让人停住脚步的城市。<br>苍山洱海之间，心安即是归途。</p>\n<p><br></p>\n<h1 id=\"丽江\"><a href=\"#丽江\" class=\"headerlink\" title=\"丽江\"></a><strong>丽江</strong></h1><blockquote>\n<p>翠色山峦下，<br>  商居掩古城。<br>  花溪迎曲巷，<br>  岁月久悠增。</p>\n</blockquote>\n<p>  丽江，艳遇之都。无数人从大城市逃离，来到这里，找寻自己。许许多多的人把丽江看作是身心与灵魂的栖息地。</p>\n<p>  丽江人口以纳西人为主，而古城的纳西名称叫“巩本知”，“巩本”为仓廪，“知”为集市，可知丽江古城曾是仓廪集散之地。</p>\n<h2 id=\"束河古镇\"><a href=\"#束河古镇\" class=\"headerlink\" title=\"束河古镇\"></a><strong>束河古镇</strong></h2><p><img src=\"http://ogzkngv09.bkt.clouddn.com/1jinrioufang.jpg\" alt=\"今日有房\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 客栈 </center></font><br>丽江的第一站是束河古镇。到丽江的时候，又下了一场雨，雷雨浥尘，暑气一夕尽消。</p>\n<p>束河远比我想的要安静，白天几乎没甚么人，只有几条小狗爬在路边。<br>到了束河，你会连呼吸都不自觉慢下来。<br>空气很清新，深吸一口，再缓缓吐出来，都觉得很幸福。</p>\n<p><img src=\"http://oevzkmimu.bkt.clouddn.com/IMG_20160928_132621.jpg\" alt=\"客栈\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 客栈 </center></font><br>束河满地都是客栈，古风古韵，各有特色。</p>\n<p><img src=\"http://ogzkngv09.bkt.clouddn.com/2mache.jpg\" alt=\"马车\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 马车 </center></font><br>偶尔会有一辆马车驶过来，让人想起木心一首很有名的诗:</p>\n<blockquote>\n<p>记得早先少年时，大家诚诚恳恳，说一句是一句。<br>清早上火车站，长街黑暗无行人，卖豆浆的小店冒着热气。<br>从前的日色变得慢，车、马、邮件都慢，一生只够爱一个人。<br>从前的锁也好看，钥匙精美有样子，你锁了，人家就懂了。</p>\n</blockquote>\n<p><img src=\"http://ogzkngv09.bkt.clouddn.com/5cangting.jpg\" alt=\"猫花园餐厅\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 猫花园餐厅 </center></font><br>肚子饿了，路过一家餐厅，顺道坐下来。</p>\n<p><img src=\"http://ogzkngv09.bkt.clouddn.com/3samoye.jpg\" alt=\"萨摩耶\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 萨摩耶 </center></font><br>狗也懒得很。</p>\n<p><img src=\"http://ogzkngv09.bkt.clouddn.com/3sifangjie.jpg\" alt=\"四方街\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 四方街 </center></font><br>束河古镇和大研古城都有一条“四方街”，不知道是巧合还是什么。</p>\n<p><img src=\"http://ogzkngv09.bkt.clouddn.com/4zhuchang.jpg\" alt=\"酒吧驻唱\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 酒吧驻唱 </center></font><br>路过酒吧一条街，停下轻和一曲。</p>\n<p><img src=\"http://ogzkngv09.bkt.clouddn.com/5%E6%B2%8F%E8%8C%B6.gif\" alt=\"沏茶\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 沏茶 </center></font><br>买披肩的时候，接待我们的店主的妈妈，是一位很和善的阿姨，买完东西还请我们到隔壁（他们家的茶店）喝茶。<br>阿姨亲手给我们沏茶。茶名叫苍山雪，第一口喝起来很苦，这时候再稍抿一口白水，口腔喉腔里一股淡淡的甜味就散开了。</p>\n<p>喝着茶，屋外便是流浪歌手的歌声，和阿姨聊聊束河的风土人情，想着时间可要慢点过去才好。</p>\n<p><img src=\"http://ogzkngv09.bkt.clouddn.com/6liudeng.jpg\" alt=\"灯\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 灯 </center></font><br>晚上十点多钟回到客栈，老板贴心地给我们留了灯。</p>\n<p><img src=\"http://ogzkngv09.bkt.clouddn.com/7suhe%20zhu_.jpg\" alt=\"住宿\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 客栈的院子 </center></font><br>束河住宿的地方。客栈不大，两层，店主是一大家子人，养了两只萨摩。</p>\n<h2 id=\"大研古城\"><a href=\"#大研古城\" class=\"headerlink\" title=\"大研古城\"></a><strong>大研古城</strong></h2><p>大研古城是中国历史文化名城之一，也是中国向联合国申报世界文化遗产成功的古城之一，与四川阆中、山西平遥、安徽歙县并称为“保存最为完好的四大古城”。</p>\n<p>我们平常说的“丽江古城”实际上就是大研古城。大研古城城内的街道依山傍水修建，铺的大多是红色角砾岩，雨季不会泥泞，干季不会飞灰。街道曲、幽、窄、达，家家流水，错落有致。</p>\n<p>据说因为丽江世袭的官宦家姓木，而筑城墙势必如“木”字加框而成“困”，所以丽江古城并没有城墙。</p>\n<p><img src=\"http://ogzkngv09.bkt.clouddn.com/11jiuba.jpg\" alt=\"酒吧一条街\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 酒吧一条街</center></font><br>大研和束河比，商业化的气息更浓重了些。</p>\n<p><img src=\"http://ogzkngv09.bkt.clouddn.com/8guangyings.jpg\" alt=\"茶画院\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 光阴的故事 </center></font></p>\n<p><img src=\"http://ogzkngv09.bkt.clouddn.com/15lijiang.jpg\" alt=\"静谧\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 静谧 </center></font><br>入夜，大雨随时沛然而至<br>我们行向古城深处<br>从古桥至木府，从四方街到五凤楼<br>入市过桥，朝着幽深的胡同<br>小小的祠，流转的水车<br>洋气的声乐、器乐，让人忍不住轻声跟着和的民谣<br>一路全无记忆的路名<br>吃食的香腻味儿争抢着从道路两侧扑出来<br>静立着，头顶没伞，雨一来就汇成了小池潭<br>细细的沙碛溅起来<br>月明如昼</p>\n<p><img src=\"http://ogzkngv09.bkt.clouddn.com/13fengling.jpg\" alt=\"风铃\"></p>\n<p><font color=\"gray\" size=\"2\" face=\"方正姚体\"><center> ▲ 风铃 </center></font><br>没有城墙，风放肆的拥挤进来，铃铛响了。</p>\n<p><br></p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a><strong>最后</strong></h1><p>2015年8月滇渝之行已经过去一年多了，之前一直懒得下笔，偶尔有了兴致却没有写作的地方。最近动笔写了今年十一的游记，索性把去年的旅行也一并回忆下来。有照片，写起来倒也不难，每个照片都有它背后的故事，将他们串联，便就是一次旅行。</p>\n<p>这次旅行前期筹划了很久，因为中间要玩5个城市，20几天，所以订酒店订票转接都稍有些麻烦。我和某橙同学分工明确，我负责定票、订酒店、定路线，她负责吃和玩。</p>\n<p>做攻略，买旅行用品，准备背包行李，忙活了一个多月，终于在七月的最后一天开始了旅行的第一站。虽然已经精简得不能再精简了，但因为时间不短，而且要去四季如春的云南，所以备了几件外套，再加上旅行必需品，最后汇在一起，俩人的背包大概也得各有15.6斤了。不过后来事实证明，多带衣服真的没错，因为从我们到了云南开始就一直下雨，晚上最冷的时候温度也就十几度。</p>\n<p>这次旅行，真是美好遭罪皆有，幸福苦难并行。作为学生穷游，一路火车坐下来真是无聊到崩溃。尤其是回程，从昆明到济南，2200多公里，加上晚点、延迟，我们在火车上待了两天两夜还要多。但是一路上也遇到了很多有趣的人，幽默的大叔，可爱的小孩，搭伴儿的闺蜜，这些形色各异的人为枯燥的火车旅行添加了不少调味剂。</p>\n<p>这样的旅行，想来多少次都不会腻。<br><strong>因为风景在变，遇到的人在变，路上的你，也一直在变。</strong><br><br><br><br></p>\n","categories":["旅人说"],"tags":["旅行"]},{"title":"《朱生豪情书》","url":"http://mutemeteor.com/2016/10/11/朱生豪情书/","content":"<p><a href=\"http://oevzkmimu.bkt.clouddn.com/%E6%9C%B1%E7%94%9F%E8%B1%AA%E6%83%85%E4%B9%A6.png\" target=\"_blank\" rel=\"external\"><br>    <img src=\"http://oevzkmimu.bkt.clouddn.com/%E6%9C%B1%E7%94%9F%E8%B1%AA%E6%83%85%E4%B9%A6.png\" alt=\"朱生豪情书\">\n</a></p>\n<blockquote>\n<p>听一个男人说这么多的情话，竟也没觉得腻得慌或者矫情。自己并不向往这样的爱情，却依然觉得朱&amp;宋如此美好。想起豆瓣有人评论朱生豪，他短暂的一生只做了两件事，翻译莎士比亚全集和给爱的人写情书。而后者是比前者更伟大的成就。</p>\n</blockquote>\n<ul>\n<li>要是我们两人一同在雨声里做梦，那境界是如何不同，或者一同在雨声里失眠，那也是何等有味。</li>\n<li>这里一切都是丑的，风、雨、太阳，都丑，人也丑，我也丑得很。只有你是青天一样可羡。</li>\n<li>寄给你全宇宙的爱和自太古至永劫的思念。<a id=\"more\"></a></li>\n<li>做人最好常在等待中，须是一个辽远的期望，不给你到达最后的终点，但一天比一天更接近这目标，永远是渴望，不实现也不摧毁，每天发现新的欢喜，是鼓舞而不是完全的满足。顶好是一切希望完全化为事实，在生命终了前的一秒钟中。</li>\n<li>为了你，我也有走向光明的热望，世界不会于我太寂寞。</li>\n<li>我是个平凡的人，不像你那么“狂野”，但我厌弃的是平凡的梦。我只愿意凭着这一点灵感的相通，时时带给彼此以慰藉，“像流星的光辉，照耀我疲惫的梦寐，永远存一个安慰，纵然在别离的时候。”</li>\n<li>我的快乐即是爱你，我的安慰即是思念你，你愿不愿待我好则非我所愿计及。</li>\n<li>临颖不如云，却怨天气好，愿化一面镜子，常常照你笑。</li>\n<li>接到你的信，真快活，风和日暖，令人愿意永远活下去。世上一切算得什么，只要有你。 我是，我是宋清如至上主义者。</li>\n<li>我一天一天明白你的平凡，同时却一天一天愈更深切地爱你。你如照镜子，你不会看得见你特别好的所在，但你如走进我的心里来时，你一定能知道自己是怎样好法</li>\n<li>但愿来生我们终日在一起，每天每天从早晨口角到夜深，恨不得大家走开。</li>\n<li>寂寞常是啮着我，唯你能给我感奋。</li>\n<li>不要愁老之将至，你老了一定很可爱。而且，假如你老了十岁，我当然也同样老了十岁，世界也老了十岁，上帝也老了十岁，一切都是一样。 我愿意舍弃一切，以想念你终此一生。 所有的恋慕。</li>\n<li>你总有一天会看我不起，因为我实在毫无希望，就是胡思乱想的本领，也比从前差得多了，如果不是因为今天是星期五之故，我真不想活。 不骗你，我很爱你，仍旧想跟你在一起做梦。</li>\n<li>如果我想要做一个梦，世界是一片大的草原，山在远处，青天在顶上，溪流在足下，鸟声在树上，如睡眠的静谧，没有一个人，只有你我，在一起跳着飞着躲着捉迷藏，你允不允许？因为你不允许我做的梦，我不敢做的。我不是诗人，否则一定要做一些可爱的梦，为着你的缘故。我不能写一首世间最美的抒情诗给你，这将是我终生抱憾的事。我多么愿意自己是个诗人，只是为了你的缘故。</li>\n<li>今后再不说诳话欺骗自己了，愿意炼成一个坚强的钢铁样的信心，永远倾向着你，当我疲倦了一切无谓的游戏之后。我不愿说那是恋爱，那自然是比恋爱更纯粹的信念。我愿意懂得“永恒”两字的意义，把悲壮的意味放入平凡的生活里，而做一个虔诚的人。因我是厌了易变的世事，也厌了易变的自己的心情。</li>\n<li>我的野心，便是想成为你的好朋友；现在我的野心，便是希望这样的友谊能继续到死时。谢谢你给我一个等待。</li>\n<li>上星期日是母亲忌辰，却忘记了，今天查起来才知道已经过去。也是昨天一样的天气，十一年前的那天，人生的悲哀掩上了我，以至于今日。</li>\n<li>如果不是那样饥渴地想忆着你，像沉舟者在海中拼命攀住一根漂浮的桅杆一样，我的思想一定会转入无底绝望而黑暗的深渊，我觉得我的生命好像不是属于自己的，非自己所能把握。</li>\n<li>不要自寻烦恼，最好，我知道你很懂得这意思。但是在必要的时候，无事可做的时候，不那样心里便是空虚得那样的时候，仍不妨寻寻烦恼，跟人吵吵闹闹哭哭气气都好的，只不要让烦恼生了根。</li>\n<li>假如有人问我烦忧的缘故， 我不敢说出你的名字。</li>\n<li>上天入地茫无路，我愿你——灵性不泯，挟风雨作伴，与日月同存；我也愿你——酣睡千秋，超然尘俗之外，忘怀古今得失。</li>\n</ul>\n","categories":["读书记"],"tags":["书信"]},{"title":"《云雀叫了一整天》","url":"http://mutemeteor.com/2016/10/11/云雀叫了一整天/","content":"<p><a href=\"http://oevzkmimu.bkt.clouddn.com/%E4%BA%91%E9%9B%80%E5%8F%AB%E4%BA%86%E4%B8%80%E6%95%B4%E5%A4%A9.png\" target=\"_blank\" rel=\"external\"><img src=\"http://oevzkmimu.bkt.clouddn.com/%E4%BA%91%E9%9B%80%E5%8F%AB%E4%BA%86%E4%B8%80%E6%95%B4%E5%A4%A9.png\" alt=\"云雀叫了一整天\"></a></p>\n<blockquote>\n<p>读木心的诗，你需要懂点历史，懂点地理，懂点文学，中国的外国的，你还得懂点冷幽默……</p>\n</blockquote>\n<ul>\n<li>“我能抗拒任何事物 除了诱惑”（王尔德） 我能抗拒任何诱惑 直到它们被我所诱惑</li>\n<li>这里的花都是深紫色的 我倒并不悲伤 只是想放声大哭一场<a id=\"more\"></a></li>\n<li>马车已驶进城里的石砌街道 行人们向我招呼 我答礼 游目贪看那些房屋的顶层 悬挂在墙洞间的铜钟 栖满了密密麻麻的燕子 一忽儿成群飞起 一忽儿啾啾唧唧 我知道它们准备远行 这里的阳光不够温暖 凉风阵阵 黄叶飘零 仿佛听见古老的歌 “当我归来时 啊 我归来时 一切都已成空”</li>\n<li>吃美国大兵剩下来的饲料 读俄罗斯悲天悯人的长篇小说 八年离乱熬过去了 人躺着 两脚高搁床档上 满脑子意大利文艺复兴法国印象派 这便是我辈动辄大言不惭的黑色青春</li>\n<li>我愿他人活在我身上 我愿自己活在他人身上 这是“知” 我曾经活在他人身上 他人曾经活在我身上 这是“爱” 雷奥纳多说 知得愈多 爱得愈多 爱得愈多 知得愈多 知与爱永成正比</li>\n<li>那时的天气也常会连日阴冷 海鸥飞鸣于屋子的上空 事情发生了 又发生 说不得的 除非记忆 记忆就像滚滚浪潮 撞上海湾里的礁石激出巨响 记忆的巨响人们是听不到的</li>\n<li>我们以形骸为贽礼 确曾是 蒙昧的智者 喜怒哀乐皆可念 虽然我并未预知 青春是一去不回来的</li>\n<li>迎春送春是说说的 春天又不是一个人</li>\n<li>我是一个在黑暗中大雪纷飞的人哪</li>\n<li>那种夜说长好长 说短诚然太短 那种黎明惫已惫极 猛烈又怎生猛烈 床上早餐吃什么 已经快正午了 总以为一生就这样下去</li>\n<li>彼癖而不洁 此洁而不癖</li>\n<li>街角的寒风比野地的寒风尤为悲凉</li>\n<li>记得早先少年时 大家诚诚恳恳 说一句是一句 清早上火车站 长街黑暗无行人 卖豆浆的小店冒着热气 从前的日色变得慢 车、马、邮件都慢 一生只够爱一个人 从前的锁也好看 钥匙精美有样子 你锁了 人家就懂了</li>\n<li>创作是父性的 翻译是母性的</li>\n<li>第一个发明刮耳光的人多有才气</li>\n<li>懂得树 就懂得贝多芬</li>\n<li>我不好斗 只好胜</li>\n<li>好事坏事 过后谈起来都很罗曼蒂克</li>\n<li>唐诗下酒 宋词伴茶</li>\n<li>有的书 读了便成文盲</li>\n<li>海上的早晨 好大好大的早晨</li>\n<li>你再不来 我要下雪了</li>\n<li>蠢 都是资深的</li>\n<li>世界是一口钟 敲在任何地方 都会响的</li>\n<li>鹰滑翔的时候 是它思想的时候</li>\n<li>主啊 兄弟得罪我 原谅他七次够了么 主说 已经不是兄弟了</li>\n<li>把寄与他人的希望收回来放在自己身上 倒也温馨</li>\n<li>直道相思了无益 且作新狂解旧狂</li>\n<li>天鹅谈飞行术 麻雀说哪有这么多的讲究</li>\n<li>玩物丧志 其志小 志大者玩物养志</li>\n<li>一次又一次觉得 灵智比肉欲要性感得多</li>\n<li>你强 强在你不爱我 我弱 弱在我爱你</li>\n<li>花的香是形而上的</li>\n<li>忽有谈话的欲望 环顾阒无一人</li>\n<li>哥德七十四岁犹动情 到底是哥德</li>\n<li>我也曾猝倒在洪大的幸福中</li>\n</ul>\n","categories":["读书记"],"tags":["诗"]},{"title":"","url":"http://mutemeteor.com/about/index.html","content":"<font color=\"gray\" size=\"5\"> 愿桥都坚固<br>隧道都光明</font>\n\n\n\n<p><br></p>\n<h1 id=\"ABOUT-ME\"><a href=\"#ABOUT-ME\" class=\"headerlink\" title=\"ABOUT-ME\"></a>ABOUT-ME</h1><ul>\n<li>万年INTJ，沉默的话唠</li>\n<li>英语专业的Python拥趸</li>\n<li>业余写文案拍片剪视频烤烤串</li>\n<li>兼职地理老师不提升成绩不要钱</li>\n<li>主业是东北某黑帮老大</li>\n<li>除了腿长没别的什么特长</li>\n</ul>\n<p><br></p>\n<h1 id=\"INSIDE-ME\"><a href=\"#INSIDE-ME\" class=\"headerlink\" title=\"INSIDE-ME\"></a>INSIDE-ME</h1><ul>\n<li><p>骨子里并不安分，对绝大多数未知的事物都葆有热情，喜欢生活中的新鲜感，愿意去尝试不同的领域或生活，期待惊喜和挑战。</p>\n</li>\n<li><p>性格慢热，接纳一个人会花费很长的时间，但是一旦确认，会从很多方面以多种方式用心维护亲密关系，因此长期关系的质量较高。</p>\n</li>\n<li><p>关注内在的想法与价值，做决定的依据源于内在的力量，并不在意世俗的眼光及评价和大众眼中所谓的困难。</p>\n</li>\n<li><p>思想交流重于情感交流，情感交流往往也是由坦诚的自我暴露和理性的相互剖析构成。能解决的问题都摊开来讨论，不能解决的问题会谨慎地回避讨论。</p>\n</li>\n<li><p>比起道德，更崇尚法则。</p>\n</li>\n<li><p>习惯于强迫自己思考所有的可能性，为此投入的精力与思考的成果相比，性价比往往很低，所以这种行为模式走向极端的话可能谈不上理性。一旦通盘考量与时间线结合，要思考的事物就变成了所有的可能性的未来的演变，这样的大命题更会使我无法自拔，尤其是当大海捞针一样的发现了某些长线规划值得一试时，往往会忘记此后每一天的挣扎。</p>\n</li>\n<li><p>看起来很乐观，实则是消极的悲观主义者，不过当我认识到、并同自己的悲观情绪和解时，可能会比乐观积极的人看起来更能轻松应对麻烦。</p>\n</li>\n<li><p>做事有规划、有条理、崇尚运筹帷幄，喜欢掌控全局。</p>\n</li>\n<li><p>渴望情感连结，但同时对其是否真实存在持保留态度，所以有时也怀疑自己渴望的合理性。</p>\n</li>\n<li><p>对周边的人和事一向很包容，但一旦越过了原则，一定会在保全自己的前提下倾尽全力让他难过。有一句话叫做，底线之上，云淡风轻。底线之下，恶魔横生。</p>\n</li>\n<li><p>自己非常喜欢的人类特质概括起来是：复杂、渊博、聪明、充满宽容与想象力、不随意judge别的事物或人以及对不可说的请务必保持沉默。</p>\n</li>\n<li><p>不盲从权威，对人对事都属于质疑型，在没有特定目的下不会刻意奉承。</p>\n</li>\n<li><p>非常果断，不会被什么牵绊，能天南海北地聊，也会毫不留情地删。</p>\n</li>\n<li><p>虽然看上去较为内向，但是讨论问题的时候是比较有话语权的，喜欢总结讨论的内容，产生可行的方案或者大的理论构架。</p>\n</li>\n<li><p>是一个非常狠得下心的人，在某些时刻有高度的自律和自省。</p>\n</li>\n<li><p>并非那么渴望成功，只是厌恶平庸，希望与众不同，所以愿意付出努力。</p>\n</li>\n<li><p>喜欢提供建议，能在很快的时间察觉到问题并且提供解决问题的方案。</p>\n</li>\n<li><p>容易冒犯他人，因为下结论过快被认为是傲慢的。这点在改。</p>\n</li>\n</ul>\n","categories":[],"tags":[]},{"title":"category","url":"http://mutemeteor.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"categories","url":"http://mutemeteor.com/categories/index.html","content":"","categories":[],"tags":[]},{"title":"Life is short, I learn Python","url":"http://mutemeteor.com/index/index.html","content":"<ul>\n<li><a href=\"#1\">1. 基础阶段</a><ul>\n<li><a href=\"#1.1\">1.1 Liunx操作系统基础</a></li>\n<li><a href=\"#1.2\">1.2 Python语法基础</a></li>\n<li><a href=\"#1.3\">1.3 Git</a></li>\n</ul>\n</li>\n<li><a href=\"#2\">2. 提高阶段</a><ul>\n<li><a href=\"#2.1\">2.1 Liunx系统编程进阶</a></li>\n<li><a href=\"#2.2\">2.2 Python核心编程</a></li>\n<li><a href=\"#2.3\">2.3 网络编程</a></li>\n<li><a href=\"#2.4\">2.4 Web服务器案例</a></li>\n<li><a href=\"#2.5\">2.5 正则表达式</a></li>\n</ul>\n</li>\n<li><a href=\"#3\">3. 数据结构与算法</a><ul>\n<li><a href=\"#3.1\">3.1 数据结构和算法基础</a></li>\n<li><a href=\"#3.2\">3.2 顺序表</a></li>\n<li><a href=\"#3.3\">3.3 栈与队列</a></li>\n<li><a href=\"#3.4\">3.4 链表</a></li>\n<li><a href=\"#3.5\">3.5 排序与搜索</a></li>\n<li><a href=\"#3.6\">3.6 树</a></li>\n</ul>\n</li>\n<li><a href=\"#4\">4. 数据库</a><ul>\n<li><a href=\"#4.1\">4.1 MySQL</a></li>\n<li><a href=\"#4.2\">4.2 MongoDB</a></li>\n<li><a href=\"#4.3\">4.3 Redis</a></li>\n</ul>\n</li>\n<li><a href=\"#5\">5. 前端</a><ul>\n<li><a href=\"#5.1\">5.1 HTML</a></li>\n<li><a href=\"#5.2\">5.2 CSS</a></li>\n<li><a href=\"#5.3\">5.3 JavaScript</a></li>\n<li><a href=\"#5.4\">5.4 JQuery</a></li>\n<li><a href=\"#5.5\">5.5 Bootstrap</a></li>\n</ul>\n</li>\n<li><a href=\"#6\">6. Django</a><ul>\n<li><a href=\"#6.1\">6.1 框架</a></li>\n<li><a href=\"#6.2\">6.2 MongoDB</a></li>\n<li><a href=\"#6.3\">6.3 Redis</a></li>\n</ul>\n</li>\n<li><a href=\"#7\">7. 爬虫</a>  </li>\n<li><a href=\"#8\">8. Tornado</a></li>\n<li><a href=\"#9\">9. shell和自动化运维</a></li>\n<li><a href=\"#10\">10. 大数据</a><ul>\n<li><a href=\"#10.1\">10.1 Hadoop</a></li>\n<li><a href=\"#10.2\">10.2 Hive</a></li>\n<li><a href=\"#10.3\">10.3 HBase</a></li>\n<li><a href=\"#10.4\">10.4 Spark</a></li>\n<li><a href=\"#10.5\">10.5 Docker</a></li>\n<li><a href=\"#10.6\">10.6 Kafka</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"1\">基础阶段</h2> <h3 id=\"1.1\">Liunx操作系统基础</h3> - <a href=\"http://mutemeteor.com/2017/08/07/Linux/\">Linux 学习笔记</a><br>- <a href=\"http://mutemeteor.com/2017/08/07/Linux/\">Linux 常见服务器搭建</a><br>- <a href=\"http://localhost:4000/2017/07/23/vim/\" target=\"_blank\" rel=\"external\">Vim 学习笔记</a><br><h3 id=\"1.2\">Python语法基础</h3> - <a href=\"http://mutemeteor.com/2017/03/23/Python3-note/\">python3 学习笔记（一）</a><br>- <a href=\"http://mutemeteor.com/2017/03/23/Python3-note2/\">python3 学习笔记（二）</a><br>- <a href=\"http://mutemeteor.com/2017/03/23/Python3-note3/\">python3 学习笔记（三）</a><br><h3 id=\"1.3\">Git</h3> - <a href=\"http://git.oschina.net/progit/\" target=\"_blank\" rel=\"external\">Pro Git（中文版）</a><br><br><h2 id=\"2\">提高阶段</h2><br><h3 id=\"2.1\">Liunx系统编程进阶</h3><br><h3 id=\"2.2\">Python核心编程</h3><br><h3 id=\"2.3\">网络编程</h3> - <a href=\"http://wiki.jikexueyuan.com/project/http-2-explained/\" target=\"_blank\" rel=\"external\">HTTP2 讲解</a><br>- <a href=\"http://wiki.jikexueyuan.com/project/http-api/\" target=\"_blank\" rel=\"external\">HTTP API 设计指南</a><br><h3 id=\"2.4\">Web服务器案例</h3> - <a href=\"http://wiki.jikexueyuan.com/project/restful/\" target=\"_blank\" rel=\"external\">RESTful Web 服务教程</a><br>- <a href=\"http://wiki.jikexueyuan.com/project/nginx/\" target=\"_blank\" rel=\"external\">Nginx 入门指南</a><br><h3 id=\"2.5\">正则表达式</h3><br><br><h2 id=\"3\">数据结构与算法</h2><br><h3 id=\"3.1\">数据结构和算法基础</h3><br><h3 id=\"3.2\">顺序表</h3><br><h3 id=\"3.3\">栈与队列</h3><br><h3 id=\"3.4\"> 链表</h3><br><h3 id=\"3.5\">排序与搜索</h3><br><h3 id=\"3.6\">树</h3><br><br><h2 id=\"4\">数据库</h2><br><h3 id=\"4.1\">MySQL</h3> - <a href=\"http://wiki.jikexueyuan.com/project/mysql/\" target=\"_blank\" rel=\"external\">MySQL 教程</a><br><h3 id=\"4.2\">MongoDB</h3> - <a href=\"http://wiki.jikexueyuan.com/project/mongodb/\" target=\"_blank\" rel=\"external\">Mongodb 教程</a><br><h3 id=\"4.3\">Redis</h3> - <a href=\"http://wiki.jikexueyuan.com/project/redis-guide/\" target=\"_blank\" rel=\"external\">Redis 3.0 中文版</a><br><br><h2 id=\"5\">前端</h2> - <a href=\"http://wiki.jikexueyuan.com/project/fedHandlebook/\" target=\"_blank\" rel=\"external\">前端开发者手册</a><br>- <a href=\"http://wiki.jikexueyuan.com/project/fend_note/\" target=\"_blank\" rel=\"external\">前端开发笔记本</a><br><h3 id=\"5.1\">HTML</h3> - <a href=\"http://wiki.jikexueyuan.com/project/html5/\" target=\"_blank\" rel=\"external\">HTML5 中文教程</a><br>- <a href=\"http://wiki.jikexueyuan.com/project/chrome-devtools/\" target=\"_blank\" rel=\"external\">Chrome 开发工具指南</a><br><h3 id=\"5.2\">CSS</h3><br><h3 id=\"5.3\">JavaScript</h3> - <a href=\"http://wiki.jikexueyuan.com/project/javascript/\" target=\"_blank\" rel=\"external\">轻松学习 JavaScript</a><br>- <a href=\"http://wiki.jikexueyuan.com/project/brief-talk-js/\" target=\"_blank\" rel=\"external\">浅谈 JavaScript</a><br>- <a href=\"http://wiki.jikexueyuan.com/project/javascript-depth-understanding/\" target=\"_blank\" rel=\"external\">深入理解 JavaScript</a><br>- <a href=\"http://wiki.jikexueyuan.com/project/react/\" target=\"_blank\" rel=\"external\">React 中文版</a><br>- <a href=\"http://wiki.jikexueyuan.com/project/vue-js/\" target=\"_blank\" rel=\"external\">Vue.js 教程</a><br><h3 id=\"5.4\">JQuery</h3> - <a href=\"http://wiki.jikexueyuan.com/project/jquery-tutorial/\" target=\"_blank\" rel=\"external\">jQuery 教程</a><br><h3 id=\"5.5\">Bootstrap</h3> - <a href=\"http://wiki.jikexueyuan.com/project/bootstrap/\" target=\"_blank\" rel=\"external\">Bootstrap 3 中文文档教程</a><br><br><h2 id=\"6\">Django</h2>\n\n<h2 id=\"7\">爬虫</h2> - <a href=\"https://kosmoscosmos.gitbooks.io/the-way-to-spyider/\" target=\"_blank\" rel=\"external\">爬虫之路</a><br>- <a href=\"http://wiki.jikexueyuan.com/project/python-crawler-guide/\" target=\"_blank\" rel=\"external\">Python 爬虫学习系列教程</a><br>- <a href=\"http://wiki.jikexueyuan.com/project/scrapy/\" target=\"_blank\" rel=\"external\">Scrapy 中文指南</a><br><br><h2 id=\"8\">Tornado</h2>  \n\n<p></p><h2 id=\"9\">shell和自动化运维</h2> - <a href=\"http://wiki.jikexueyuan.com/project/shell-learning/\" target=\"_blank\" rel=\"external\">shell 脚本编程</a><p></p>\n<p></p><h2 id=\"10\">大数据</h2><p></p>\n<h3 id=\"10.1\">Hadoop</h3> - <a href=\"http://wiki.jikexueyuan.com/project/hadoop/\" target=\"_blank\" rel=\"external\">Hadoop</a><br><h3 id=\"10.2\">Hive</h3><br><h3 id=\"10.3\">HBase</h3><br><h3 id=\"10.4\">Spark</h3><br><h3 id=\"10.5\">Docker</h3> - <a href=\"http://wiki.jikexueyuan.com/project/docker/\" target=\"_blank\" rel=\"external\">Docker</a><br>- <a href=\"http://wiki.jikexueyuan.com/project/docker-technology-and-combat/\" target=\"_blank\" rel=\"external\">Docker —— 从入门到实践</a><br><h3 id=\"10.6\">Kafka</h3>\n\n<hr>\n<p><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=2924723&auto=1&height=66\"></iframe></p>\n<font color=\"gray\" size=\"2\"> I wish you the best of all possible journeys and the courage to speak softly.﻿</font>\n","categories":[],"tags":[]},{"title":"project","url":"http://mutemeteor.com/project/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://mutemeteor.com/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://mutemeteor.com/tag/index.html","content":"","categories":[],"tags":[]},{"title":"tags","url":"http://mutemeteor.com/tags/index.html","content":"","categories":[],"tags":[]}]